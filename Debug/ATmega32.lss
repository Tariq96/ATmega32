
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  00005534  000055c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  008001b0  008001b0  00005718  2**0
                  ALLOC
  3 .stab         00004c2c  00000000  00000000  00005718  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018f6  00000000  00000000  0000a344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000bc3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000bdda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000bfca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000e3d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000f74d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010928  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  00010ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00010ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000117a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f5 e5       	ldi	r31, 0x55	; 85
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3f       	cpi	r26, 0xF0	; 240
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <main>
      8a:	0c 94 98 2a 	jmp	0x5530	; 0x5530 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c0 27 	jmp	0x4f80	; 0x4f80 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e9       	ldi	r26, 0x9B	; 155
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dc 27 	jmp	0x4fb8	; 0x4fb8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cc 27 	jmp	0x4f98	; 0x4f98 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cc 27 	jmp	0x4f98	; 0x4f98 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c0 27 	jmp	0x4f80	; 0x4f80 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e9       	ldi	r24, 0x9B	; 155
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dc 27 	jmp	0x4fb8	; 0x4fb8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c8 27 	jmp	0x4f90	; 0x4f90 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e9       	ldi	r22, 0x9B	; 155
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e4 27 	jmp	0x4fc8	; 0x4fc8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cc 27 	jmp	0x4f98	; 0x4f98 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cc 27 	jmp	0x4f98	; 0x4f98 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cc 27 	jmp	0x4f98	; 0x4f98 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c9 27 	jmp	0x4f92	; 0x4f92 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 e5 27 	jmp	0x4fca	; 0x4fca <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 d0 27 	jmp	0x4fa0	; 0x4fa0 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 ec 27 	jmp	0x4fd8	; 0x4fd8 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	ed 55       	subi	r30, 0x5D	; 93
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <void_init_pin>:
#include "DIO.h"



void void_init_pin(char portname,char pinnumber , char dir)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <void_init_pin+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <void_init_pin+0x8>
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	6a 83       	std	Y+2, r22	; 0x02
     e0a:	4b 83       	std	Y+3, r20	; 0x03
	switch (portname)
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3d 83       	std	Y+5, r19	; 0x05
     e14:	2c 83       	std	Y+4, r18	; 0x04
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
     e18:	9d 81       	ldd	r25, Y+5	; 0x05
     e1a:	84 34       	cpi	r24, 0x44	; 68
     e1c:	91 05       	cpc	r25, r1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <void_init_pin+0x2a>
     e20:	b9 c0       	rjmp	.+370    	; 0xf94 <void_init_pin+0x19c>
     e22:	2c 81       	ldd	r18, Y+4	; 0x04
     e24:	3d 81       	ldd	r19, Y+5	; 0x05
     e26:	25 34       	cpi	r18, 0x45	; 69
     e28:	31 05       	cpc	r19, r1
     e2a:	94 f4       	brge	.+36     	; 0xe50 <void_init_pin+0x58>
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	9d 81       	ldd	r25, Y+5	; 0x05
     e30:	82 34       	cpi	r24, 0x42	; 66
     e32:	91 05       	cpc	r25, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <void_init_pin+0x40>
     e36:	56 c0       	rjmp	.+172    	; 0xee4 <void_init_pin+0xec>
     e38:	2c 81       	ldd	r18, Y+4	; 0x04
     e3a:	3d 81       	ldd	r19, Y+5	; 0x05
     e3c:	23 34       	cpi	r18, 0x43	; 67
     e3e:	31 05       	cpc	r19, r1
     e40:	0c f0       	brlt	.+2      	; 0xe44 <void_init_pin+0x4c>
     e42:	7c c0       	rjmp	.+248    	; 0xf3c <void_init_pin+0x144>
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	9d 81       	ldd	r25, Y+5	; 0x05
     e48:	81 34       	cpi	r24, 0x41	; 65
     e4a:	91 05       	cpc	r25, r1
     e4c:	f9 f0       	breq	.+62     	; 0xe8c <void_init_pin+0x94>
     e4e:	cd c0       	rjmp	.+410    	; 0xfea <void_init_pin+0x1f2>
     e50:	2c 81       	ldd	r18, Y+4	; 0x04
     e52:	3d 81       	ldd	r19, Y+5	; 0x05
     e54:	22 36       	cpi	r18, 0x62	; 98
     e56:	31 05       	cpc	r19, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <void_init_pin+0x64>
     e5a:	44 c0       	rjmp	.+136    	; 0xee4 <void_init_pin+0xec>
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	83 36       	cpi	r24, 0x63	; 99
     e62:	91 05       	cpc	r25, r1
     e64:	34 f4       	brge	.+12     	; 0xe72 <void_init_pin+0x7a>
     e66:	2c 81       	ldd	r18, Y+4	; 0x04
     e68:	3d 81       	ldd	r19, Y+5	; 0x05
     e6a:	21 36       	cpi	r18, 0x61	; 97
     e6c:	31 05       	cpc	r19, r1
     e6e:	71 f0       	breq	.+28     	; 0xe8c <void_init_pin+0x94>
     e70:	bc c0       	rjmp	.+376    	; 0xfea <void_init_pin+0x1f2>
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	9d 81       	ldd	r25, Y+5	; 0x05
     e76:	83 36       	cpi	r24, 0x63	; 99
     e78:	91 05       	cpc	r25, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <void_init_pin+0x86>
     e7c:	5f c0       	rjmp	.+190    	; 0xf3c <void_init_pin+0x144>
     e7e:	2c 81       	ldd	r18, Y+4	; 0x04
     e80:	3d 81       	ldd	r19, Y+5	; 0x05
     e82:	24 36       	cpi	r18, 0x64	; 100
     e84:	31 05       	cpc	r19, r1
     e86:	09 f4       	brne	.+2      	; 0xe8a <void_init_pin+0x92>
     e88:	85 c0       	rjmp	.+266    	; 0xf94 <void_init_pin+0x19c>
     e8a:	af c0       	rjmp	.+350    	; 0xfea <void_init_pin+0x1f2>
	{
	case 'A':
	case 'a':
		if (dir)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	88 23       	and	r24, r24
     e90:	a1 f0       	breq	.+40     	; 0xeba <void_init_pin+0xc2>
			SET_BIT(DDRA,pinnumber);
     e92:	aa e3       	ldi	r26, 0x3A	; 58
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	ea e3       	ldi	r30, 0x3A	; 58
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <void_init_pin+0xb8>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <void_init_pin+0xb4>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	98 c0       	rjmp	.+304    	; 0xfea <void_init_pin+0x1f2>
		else
			CLEAR_BIT(DDRA,pinnumber);
     eba:	aa e3       	ldi	r26, 0x3A	; 58
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	ea e3       	ldi	r30, 0x3A	; 58
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <void_init_pin+0xe0>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <void_init_pin+0xdc>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	83 c0       	rjmp	.+262    	; 0xfea <void_init_pin+0x1f2>
		break ;
	case 'B':
	case 'b':
		if (dir)
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	88 23       	and	r24, r24
     ee8:	a1 f0       	breq	.+40     	; 0xf12 <void_init_pin+0x11a>
			SET_BIT(DDRB,pinnumber);
     eea:	a7 e3       	ldi	r26, 0x37	; 55
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e7 e3       	ldi	r30, 0x37	; 55
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <void_init_pin+0x110>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <void_init_pin+0x10c>
     f0c:	84 2b       	or	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	6c c0       	rjmp	.+216    	; 0xfea <void_init_pin+0x1f2>
		else
			CLEAR_BIT(DDRB,pinnumber);
     f12:	a7 e3       	ldi	r26, 0x37	; 55
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e7 e3       	ldi	r30, 0x37	; 55
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <void_init_pin+0x138>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <void_init_pin+0x134>
     f34:	80 95       	com	r24
     f36:	84 23       	and	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	57 c0       	rjmp	.+174    	; 0xfea <void_init_pin+0x1f2>
		break ;
	case 'C':
	case 'c':
		if (dir)
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	88 23       	and	r24, r24
     f40:	a1 f0       	breq	.+40     	; 0xf6a <void_init_pin+0x172>
			SET_BIT(DDRC,pinnumber);
     f42:	a4 e3       	ldi	r26, 0x34	; 52
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e4 e3       	ldi	r30, 0x34	; 52
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <void_init_pin+0x168>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <void_init_pin+0x164>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	40 c0       	rjmp	.+128    	; 0xfea <void_init_pin+0x1f2>
		else
			CLEAR_BIT(DDRC,pinnumber);
     f6a:	a4 e3       	ldi	r26, 0x34	; 52
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e4 e3       	ldi	r30, 0x34	; 52
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <void_init_pin+0x190>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <void_init_pin+0x18c>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	2b c0       	rjmp	.+86     	; 0xfea <void_init_pin+0x1f2>
		break ;
	case 'D':
	case 'd':
		if (dir)
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	88 23       	and	r24, r24
     f98:	a1 f0       	breq	.+40     	; 0xfc2 <void_init_pin+0x1ca>
			SET_BIT(DDRD,pinnumber);
     f9a:	a1 e3       	ldi	r26, 0x31	; 49
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e1 e3       	ldi	r30, 0x31	; 49
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <void_init_pin+0x1c0>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <void_init_pin+0x1bc>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <void_init_pin+0x1f2>
		else
			CLEAR_BIT(DDRD,pinnumber);
     fc2:	a1 e3       	ldi	r26, 0x31	; 49
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e1 e3       	ldi	r30, 0x31	; 49
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <void_init_pin+0x1e8>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <void_init_pin+0x1e4>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
		break ;


	}

}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <void_write_pin>:
void void_write_pin(char portname,char pinnumber , char state)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <void_write_pin+0x6>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <void_write_pin+0x8>
    1002:	0f 92       	push	r0
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	6a 83       	std	Y+2, r22	; 0x02
    100c:	4b 83       	std	Y+3, r20	; 0x03


	switch (portname)
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	3d 83       	std	Y+5, r19	; 0x05
    1016:	2c 83       	std	Y+4, r18	; 0x04
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	9d 81       	ldd	r25, Y+5	; 0x05
    101c:	84 34       	cpi	r24, 0x44	; 68
    101e:	91 05       	cpc	r25, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <void_write_pin+0x2a>
    1022:	b9 c0       	rjmp	.+370    	; 0x1196 <void_write_pin+0x19c>
    1024:	2c 81       	ldd	r18, Y+4	; 0x04
    1026:	3d 81       	ldd	r19, Y+5	; 0x05
    1028:	25 34       	cpi	r18, 0x45	; 69
    102a:	31 05       	cpc	r19, r1
    102c:	94 f4       	brge	.+36     	; 0x1052 <void_write_pin+0x58>
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	9d 81       	ldd	r25, Y+5	; 0x05
    1032:	82 34       	cpi	r24, 0x42	; 66
    1034:	91 05       	cpc	r25, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <void_write_pin+0x40>
    1038:	56 c0       	rjmp	.+172    	; 0x10e6 <void_write_pin+0xec>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	23 34       	cpi	r18, 0x43	; 67
    1040:	31 05       	cpc	r19, r1
    1042:	0c f0       	brlt	.+2      	; 0x1046 <void_write_pin+0x4c>
    1044:	7c c0       	rjmp	.+248    	; 0x113e <void_write_pin+0x144>
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	81 34       	cpi	r24, 0x41	; 65
    104c:	91 05       	cpc	r25, r1
    104e:	f9 f0       	breq	.+62     	; 0x108e <void_write_pin+0x94>
    1050:	cd c0       	rjmp	.+410    	; 0x11ec <void_write_pin+0x1f2>
    1052:	2c 81       	ldd	r18, Y+4	; 0x04
    1054:	3d 81       	ldd	r19, Y+5	; 0x05
    1056:	22 36       	cpi	r18, 0x62	; 98
    1058:	31 05       	cpc	r19, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <void_write_pin+0x64>
    105c:	44 c0       	rjmp	.+136    	; 0x10e6 <void_write_pin+0xec>
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	83 36       	cpi	r24, 0x63	; 99
    1064:	91 05       	cpc	r25, r1
    1066:	34 f4       	brge	.+12     	; 0x1074 <void_write_pin+0x7a>
    1068:	2c 81       	ldd	r18, Y+4	; 0x04
    106a:	3d 81       	ldd	r19, Y+5	; 0x05
    106c:	21 36       	cpi	r18, 0x61	; 97
    106e:	31 05       	cpc	r19, r1
    1070:	71 f0       	breq	.+28     	; 0x108e <void_write_pin+0x94>
    1072:	bc c0       	rjmp	.+376    	; 0x11ec <void_write_pin+0x1f2>
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	9d 81       	ldd	r25, Y+5	; 0x05
    1078:	83 36       	cpi	r24, 0x63	; 99
    107a:	91 05       	cpc	r25, r1
    107c:	09 f4       	brne	.+2      	; 0x1080 <void_write_pin+0x86>
    107e:	5f c0       	rjmp	.+190    	; 0x113e <void_write_pin+0x144>
    1080:	2c 81       	ldd	r18, Y+4	; 0x04
    1082:	3d 81       	ldd	r19, Y+5	; 0x05
    1084:	24 36       	cpi	r18, 0x64	; 100
    1086:	31 05       	cpc	r19, r1
    1088:	09 f4       	brne	.+2      	; 0x108c <void_write_pin+0x92>
    108a:	85 c0       	rjmp	.+266    	; 0x1196 <void_write_pin+0x19c>
    108c:	af c0       	rjmp	.+350    	; 0x11ec <void_write_pin+0x1f2>
	{
	case 'A':
	case 'a':
		if (state)
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	88 23       	and	r24, r24
    1092:	a1 f0       	breq	.+40     	; 0x10bc <void_write_pin+0xc2>
			SET_BIT(PORTA,pinnumber);
    1094:	ab e3       	ldi	r26, 0x3B	; 59
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	eb e3       	ldi	r30, 0x3B	; 59
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <void_write_pin+0xb8>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <void_write_pin+0xb4>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	98 c0       	rjmp	.+304    	; 0x11ec <void_write_pin+0x1f2>
		else
			CLEAR_BIT(PORTA,pinnumber);
    10bc:	ab e3       	ldi	r26, 0x3B	; 59
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	eb e3       	ldi	r30, 0x3B	; 59
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <void_write_pin+0xe0>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <void_write_pin+0xdc>
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	83 c0       	rjmp	.+262    	; 0x11ec <void_write_pin+0x1f2>
		break ;
	case 'B':
	case 'b':
		if (state)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	88 23       	and	r24, r24
    10ea:	a1 f0       	breq	.+40     	; 0x1114 <void_write_pin+0x11a>
			SET_BIT(PORTB,pinnumber);
    10ec:	a8 e3       	ldi	r26, 0x38	; 56
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e8 e3       	ldi	r30, 0x38	; 56
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <void_write_pin+0x110>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <void_write_pin+0x10c>
    110e:	84 2b       	or	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	6c c0       	rjmp	.+216    	; 0x11ec <void_write_pin+0x1f2>
		else
			CLEAR_BIT(PORTB,pinnumber);
    1114:	a8 e3       	ldi	r26, 0x38	; 56
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e8 e3       	ldi	r30, 0x38	; 56
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <void_write_pin+0x138>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <void_write_pin+0x134>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	57 c0       	rjmp	.+174    	; 0x11ec <void_write_pin+0x1f2>
		break ;
	case 'C':
	case 'c':
		if (state)
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	88 23       	and	r24, r24
    1142:	a1 f0       	breq	.+40     	; 0x116c <void_write_pin+0x172>
			SET_BIT(PORTC,pinnumber);
    1144:	a5 e3       	ldi	r26, 0x35	; 53
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e5 e3       	ldi	r30, 0x35	; 53
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <void_write_pin+0x168>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <void_write_pin+0x164>
    1166:	84 2b       	or	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	40 c0       	rjmp	.+128    	; 0x11ec <void_write_pin+0x1f2>
		else
			CLEAR_BIT(PORTC,pinnumber);
    116c:	a5 e3       	ldi	r26, 0x35	; 53
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e5 e3       	ldi	r30, 0x35	; 53
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <void_write_pin+0x190>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <void_write_pin+0x18c>
    118e:	80 95       	com	r24
    1190:	84 23       	and	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	2b c0       	rjmp	.+86     	; 0x11ec <void_write_pin+0x1f2>
		break ;
	case 'D':
	case 'd':
		if (state)
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	88 23       	and	r24, r24
    119a:	a1 f0       	breq	.+40     	; 0x11c4 <void_write_pin+0x1ca>
			SET_BIT(PORTD,pinnumber);
    119c:	a2 e3       	ldi	r26, 0x32	; 50
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e2 e3       	ldi	r30, 0x32	; 50
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <void_write_pin+0x1c0>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <void_write_pin+0x1bc>
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	14 c0       	rjmp	.+40     	; 0x11ec <void_write_pin+0x1f2>
		else
			CLEAR_BIT(PORTD,pinnumber);
    11c4:	a2 e3       	ldi	r26, 0x32	; 50
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e2 e3       	ldi	r30, 0x32	; 50
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <void_write_pin+0x1e8>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <void_write_pin+0x1e4>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
		break ;


	}

}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <void_init_port>:
void void_init_port(char portname,char pins_dir)
{
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	00 d0       	rcall	.+0      	; 0x1202 <void_init_port+0x6>
    1202:	00 d0       	rcall	.+0      	; 0x1204 <void_init_port+0x8>
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	6a 83       	std	Y+2, r22	; 0x02

	switch (portname)
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	3c 83       	std	Y+4, r19	; 0x04
    1214:	2b 83       	std	Y+3, r18	; 0x03
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	84 34       	cpi	r24, 0x44	; 68
    121c:	91 05       	cpc	r25, r1
    121e:	09 f4       	brne	.+2      	; 0x1222 <void_init_port+0x26>
    1220:	3f c0       	rjmp	.+126    	; 0x12a0 <void_init_port+0xa4>
    1222:	2b 81       	ldd	r18, Y+3	; 0x03
    1224:	3c 81       	ldd	r19, Y+4	; 0x04
    1226:	25 34       	cpi	r18, 0x45	; 69
    1228:	31 05       	cpc	r19, r1
    122a:	84 f4       	brge	.+32     	; 0x124c <void_init_port+0x50>
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	82 34       	cpi	r24, 0x42	; 66
    1232:	91 05       	cpc	r25, r1
    1234:	59 f1       	breq	.+86     	; 0x128c <void_init_port+0x90>
    1236:	2b 81       	ldd	r18, Y+3	; 0x03
    1238:	3c 81       	ldd	r19, Y+4	; 0x04
    123a:	23 34       	cpi	r18, 0x43	; 67
    123c:	31 05       	cpc	r19, r1
    123e:	5c f5       	brge	.+86     	; 0x1296 <void_init_port+0x9a>
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	81 34       	cpi	r24, 0x41	; 65
    1246:	91 05       	cpc	r25, r1
    1248:	e1 f0       	breq	.+56     	; 0x1282 <void_init_port+0x86>
    124a:	2e c0       	rjmp	.+92     	; 0x12a8 <void_init_port+0xac>
    124c:	2b 81       	ldd	r18, Y+3	; 0x03
    124e:	3c 81       	ldd	r19, Y+4	; 0x04
    1250:	22 36       	cpi	r18, 0x62	; 98
    1252:	31 05       	cpc	r19, r1
    1254:	d9 f0       	breq	.+54     	; 0x128c <void_init_port+0x90>
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	83 36       	cpi	r24, 0x63	; 99
    125c:	91 05       	cpc	r25, r1
    125e:	34 f4       	brge	.+12     	; 0x126c <void_init_port+0x70>
    1260:	2b 81       	ldd	r18, Y+3	; 0x03
    1262:	3c 81       	ldd	r19, Y+4	; 0x04
    1264:	21 36       	cpi	r18, 0x61	; 97
    1266:	31 05       	cpc	r19, r1
    1268:	61 f0       	breq	.+24     	; 0x1282 <void_init_port+0x86>
    126a:	1e c0       	rjmp	.+60     	; 0x12a8 <void_init_port+0xac>
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	83 36       	cpi	r24, 0x63	; 99
    1272:	91 05       	cpc	r25, r1
    1274:	81 f0       	breq	.+32     	; 0x1296 <void_init_port+0x9a>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	24 36       	cpi	r18, 0x64	; 100
    127c:	31 05       	cpc	r19, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <void_init_port+0xa4>
    1280:	13 c0       	rjmp	.+38     	; 0x12a8 <void_init_port+0xac>
	{
	case 'A':
	case 'a':
		DDRA=pins_dir;
    1282:	ea e3       	ldi	r30, 0x3A	; 58
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	80 83       	st	Z, r24
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <void_init_port+0xac>
		break;

	case 'B':
	case 'b':
		DDRB=pins_dir;
    128c:	e7 e3       	ldi	r30, 0x37	; 55
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	80 83       	st	Z, r24
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <void_init_port+0xac>
		break ;
	case 'C':
	case 'c':
		DDRC =pins_dir;
    1296:	e4 e3       	ldi	r30, 0x34	; 52
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 83       	st	Z, r24
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <void_init_port+0xac>
		break ;
	case 'D':
	case 'd':
		DDRD=pins_dir;
    12a0:	e1 e3       	ldi	r30, 0x31	; 49
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
		break;
	}

}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <void_write_port>:
void void_write_port(char portname,char pins_dir)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <void_write_port+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <void_write_port+0x8>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	6a 83       	std	Y+2, r22	; 0x02

	switch (portname)
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	3c 83       	std	Y+4, r19	; 0x04
    12ce:	2b 83       	std	Y+3, r18	; 0x03
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	84 34       	cpi	r24, 0x44	; 68
    12d6:	91 05       	cpc	r25, r1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <void_write_port+0x26>
    12da:	3f c0       	rjmp	.+126    	; 0x135a <void_write_port+0xa4>
    12dc:	2b 81       	ldd	r18, Y+3	; 0x03
    12de:	3c 81       	ldd	r19, Y+4	; 0x04
    12e0:	25 34       	cpi	r18, 0x45	; 69
    12e2:	31 05       	cpc	r19, r1
    12e4:	84 f4       	brge	.+32     	; 0x1306 <void_write_port+0x50>
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	82 34       	cpi	r24, 0x42	; 66
    12ec:	91 05       	cpc	r25, r1
    12ee:	59 f1       	breq	.+86     	; 0x1346 <void_write_port+0x90>
    12f0:	2b 81       	ldd	r18, Y+3	; 0x03
    12f2:	3c 81       	ldd	r19, Y+4	; 0x04
    12f4:	23 34       	cpi	r18, 0x43	; 67
    12f6:	31 05       	cpc	r19, r1
    12f8:	5c f5       	brge	.+86     	; 0x1350 <void_write_port+0x9a>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	81 34       	cpi	r24, 0x41	; 65
    1300:	91 05       	cpc	r25, r1
    1302:	e1 f0       	breq	.+56     	; 0x133c <void_write_port+0x86>
    1304:	2e c0       	rjmp	.+92     	; 0x1362 <void_write_port+0xac>
    1306:	2b 81       	ldd	r18, Y+3	; 0x03
    1308:	3c 81       	ldd	r19, Y+4	; 0x04
    130a:	22 36       	cpi	r18, 0x62	; 98
    130c:	31 05       	cpc	r19, r1
    130e:	d9 f0       	breq	.+54     	; 0x1346 <void_write_port+0x90>
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	83 36       	cpi	r24, 0x63	; 99
    1316:	91 05       	cpc	r25, r1
    1318:	34 f4       	brge	.+12     	; 0x1326 <void_write_port+0x70>
    131a:	2b 81       	ldd	r18, Y+3	; 0x03
    131c:	3c 81       	ldd	r19, Y+4	; 0x04
    131e:	21 36       	cpi	r18, 0x61	; 97
    1320:	31 05       	cpc	r19, r1
    1322:	61 f0       	breq	.+24     	; 0x133c <void_write_port+0x86>
    1324:	1e c0       	rjmp	.+60     	; 0x1362 <void_write_port+0xac>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	83 36       	cpi	r24, 0x63	; 99
    132c:	91 05       	cpc	r25, r1
    132e:	81 f0       	breq	.+32     	; 0x1350 <void_write_port+0x9a>
    1330:	2b 81       	ldd	r18, Y+3	; 0x03
    1332:	3c 81       	ldd	r19, Y+4	; 0x04
    1334:	24 36       	cpi	r18, 0x64	; 100
    1336:	31 05       	cpc	r19, r1
    1338:	81 f0       	breq	.+32     	; 0x135a <void_write_port+0xa4>
    133a:	13 c0       	rjmp	.+38     	; 0x1362 <void_write_port+0xac>
	{
	case 'A':
	case 'a':
		PORTA=pins_dir;
    133c:	eb e3       	ldi	r30, 0x3B	; 59
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	80 83       	st	Z, r24
    1344:	0e c0       	rjmp	.+28     	; 0x1362 <void_write_port+0xac>
		break;

	case 'B':
	case 'b':
		PORTB=pins_dir;
    1346:	e8 e3       	ldi	r30, 0x38	; 56
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	80 83       	st	Z, r24
    134e:	09 c0       	rjmp	.+18     	; 0x1362 <void_write_port+0xac>
		break ;
	case 'C':
	case 'c':
		PORTC =pins_dir;
    1350:	e5 e3       	ldi	r30, 0x35	; 53
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	80 83       	st	Z, r24
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <void_write_port+0xac>
		break ;
	case 'D':
	case 'd':
		PORTD=pins_dir;
    135a:	e2 e3       	ldi	r30, 0x32	; 50
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	80 83       	st	Z, r24
		break;
	}

}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <char_read_pin>:
char char_read_pin(char portname,char pinnumber)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <char_read_pin+0x6>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <char_read_pin+0x8>
    1378:	0f 92       	push	r0
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	3d 83       	std	Y+5, r19	; 0x05
    138a:	2c 83       	std	Y+4, r18	; 0x04
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	9d 81       	ldd	r25, Y+5	; 0x05
    1390:	84 34       	cpi	r24, 0x44	; 68
    1392:	91 05       	cpc	r25, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <char_read_pin+0x28>
    1396:	67 c0       	rjmp	.+206    	; 0x1466 <char_read_pin+0xf6>
    1398:	2c 81       	ldd	r18, Y+4	; 0x04
    139a:	3d 81       	ldd	r19, Y+5	; 0x05
    139c:	25 34       	cpi	r18, 0x45	; 69
    139e:	31 05       	cpc	r19, r1
    13a0:	8c f4       	brge	.+34     	; 0x13c4 <char_read_pin+0x54>
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	82 34       	cpi	r24, 0x42	; 66
    13a8:	91 05       	cpc	r25, r1
    13aa:	c9 f1       	breq	.+114    	; 0x141e <char_read_pin+0xae>
    13ac:	2c 81       	ldd	r18, Y+4	; 0x04
    13ae:	3d 81       	ldd	r19, Y+5	; 0x05
    13b0:	23 34       	cpi	r18, 0x43	; 67
    13b2:	31 05       	cpc	r19, r1
    13b4:	0c f0       	brlt	.+2      	; 0x13b8 <char_read_pin+0x48>
    13b6:	45 c0       	rjmp	.+138    	; 0x1442 <char_read_pin+0xd2>
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	81 34       	cpi	r24, 0x41	; 65
    13be:	91 05       	cpc	r25, r1
    13c0:	e1 f0       	breq	.+56     	; 0x13fa <char_read_pin+0x8a>
    13c2:	63 c0       	rjmp	.+198    	; 0x148a <char_read_pin+0x11a>
    13c4:	2c 81       	ldd	r18, Y+4	; 0x04
    13c6:	3d 81       	ldd	r19, Y+5	; 0x05
    13c8:	22 36       	cpi	r18, 0x62	; 98
    13ca:	31 05       	cpc	r19, r1
    13cc:	41 f1       	breq	.+80     	; 0x141e <char_read_pin+0xae>
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	9d 81       	ldd	r25, Y+5	; 0x05
    13d2:	83 36       	cpi	r24, 0x63	; 99
    13d4:	91 05       	cpc	r25, r1
    13d6:	34 f4       	brge	.+12     	; 0x13e4 <char_read_pin+0x74>
    13d8:	2c 81       	ldd	r18, Y+4	; 0x04
    13da:	3d 81       	ldd	r19, Y+5	; 0x05
    13dc:	21 36       	cpi	r18, 0x61	; 97
    13de:	31 05       	cpc	r19, r1
    13e0:	61 f0       	breq	.+24     	; 0x13fa <char_read_pin+0x8a>
    13e2:	53 c0       	rjmp	.+166    	; 0x148a <char_read_pin+0x11a>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	83 36       	cpi	r24, 0x63	; 99
    13ea:	91 05       	cpc	r25, r1
    13ec:	51 f1       	breq	.+84     	; 0x1442 <char_read_pin+0xd2>
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	24 36       	cpi	r18, 0x64	; 100
    13f4:	31 05       	cpc	r19, r1
    13f6:	b9 f1       	breq	.+110    	; 0x1466 <char_read_pin+0xf6>
    13f8:	48 c0       	rjmp	.+144    	; 0x148a <char_read_pin+0x11a>
	{
	case 'A':
	case 'a':
		return READ_BIT(PINA,pinnumber);
    13fa:	e9 e3       	ldi	r30, 0x39	; 57
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <char_read_pin+0xa4>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <char_read_pin+0xa0>
    1418:	84 23       	and	r24, r20
    141a:	8b 83       	std	Y+3, r24	; 0x03
    141c:	38 c0       	rjmp	.+112    	; 0x148e <char_read_pin+0x11e>
	case 'B':
	case 'b':
		return READ_BIT(PINB,pinnumber);
    141e:	e6 e3       	ldi	r30, 0x36	; 54
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <char_read_pin+0xc8>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <char_read_pin+0xc4>
    143c:	84 23       	and	r24, r20
    143e:	8b 83       	std	Y+3, r24	; 0x03
    1440:	26 c0       	rjmp	.+76     	; 0x148e <char_read_pin+0x11e>
	case 'C':
	case 'c':
		return READ_BIT(PINC,pinnumber);
    1442:	e3 e3       	ldi	r30, 0x33	; 51
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <char_read_pin+0xec>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <char_read_pin+0xe8>
    1460:	84 23       	and	r24, r20
    1462:	8b 83       	std	Y+3, r24	; 0x03
    1464:	14 c0       	rjmp	.+40     	; 0x148e <char_read_pin+0x11e>
	case 'D':
	case 'd':
		return READ_BIT(PIND,pinnumber);
    1466:	e0 e3       	ldi	r30, 0x30	; 48
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <char_read_pin+0x110>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <char_read_pin+0x10c>
    1484:	84 23       	and	r24, r20
    1486:	8b 83       	std	Y+3, r24	; 0x03
    1488:	02 c0       	rjmp	.+4      	; 0x148e <char_read_pin+0x11e>



	}
	return 'N';
    148a:	3e e4       	ldi	r19, 0x4E	; 78
    148c:	3b 83       	std	Y+3, r19	; 0x03
    148e:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <ADC_INIT>:

#endif
#ifdef inlecture

void ADC_INIT(adc_t *adc)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <ADC_INIT+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <ADC_INIT+0x8>
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <ADC_INIT+0xa>
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	9a 83       	std	Y+2, r25	; 0x02
    14b0:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(ADCSRA,ADEN); //enabling adc
    14b2:	a6 e2       	ldi	r26, 0x26	; 38
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e6 e2       	ldi	r30, 0x26	; 38
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	80 68       	ori	r24, 0x80	; 128
    14be:	8c 93       	st	X, r24
	//ADC Interrupt Enable
	if (adc->interrupt_en==1)
    14c0:	e9 81       	ldd	r30, Y+1	; 0x01
    14c2:	fa 81       	ldd	r31, Y+2	; 0x02
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	41 f4       	brne	.+16     	; 0x14da <ADC_INIT+0x3a>
		SET_BIT(ADCSRA,ADIE);
    14ca:	a6 e2       	ldi	r26, 0x26	; 38
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e6 e2       	ldi	r30, 0x26	; 38
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	88 60       	ori	r24, 0x08	; 8
    14d6:	8c 93       	st	X, r24
    14d8:	07 c0       	rjmp	.+14     	; 0x14e8 <ADC_INIT+0x48>
	else
		SET_BIT(ADCSRA,ADIE);
    14da:	a6 e2       	ldi	r26, 0x26	; 38
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e6 e2       	ldi	r30, 0x26	; 38
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	88 60       	ori	r24, 0x08	; 8
    14e6:	8c 93       	st	X, r24
	//ADC Prescaler Select Bits
	if (adc->data_mode==1)//left adjust
    14e8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ea:	fa 81       	ldd	r31, Y+2	; 0x02
    14ec:	83 81       	ldd	r24, Z+3	; 0x03
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	41 f4       	brne	.+16     	; 0x1502 <ADC_INIT+0x62>
		SET_BIT(ADMUX,ADLAR);
    14f2:	a7 e2       	ldi	r26, 0x27	; 39
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e7 e2       	ldi	r30, 0x27	; 39
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	80 62       	ori	r24, 0x20	; 32
    14fe:	8c 93       	st	X, r24
    1500:	07 c0       	rjmp	.+14     	; 0x1510 <ADC_INIT+0x70>
	else //right adjust
		CLEAR_BIT(ADMUX,ADLAR);
    1502:	a7 e2       	ldi	r26, 0x27	; 39
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e7 e2       	ldi	r30, 0x27	; 39
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8f 7d       	andi	r24, 0xDF	; 223
    150e:	8c 93       	st	X, r24

	switch(adc->prescaler)
    1510:	e9 81       	ldd	r30, Y+1	; 0x01
    1512:	fa 81       	ldd	r31, Y+2	; 0x02
    1514:	20 81       	ld	r18, Z
    1516:	31 81       	ldd	r19, Z+1	; 0x01
    1518:	3e 83       	std	Y+6, r19	; 0x06
    151a:	2d 83       	std	Y+5, r18	; 0x05
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	80 31       	cpi	r24, 0x10	; 16
    1522:	91 05       	cpc	r25, r1
    1524:	09 f4       	brne	.+2      	; 0x1528 <ADC_INIT+0x88>
    1526:	6b c0       	rjmp	.+214    	; 0x15fe <ADC_INIT+0x15e>
    1528:	2d 81       	ldd	r18, Y+5	; 0x05
    152a:	3e 81       	ldd	r19, Y+6	; 0x06
    152c:	21 31       	cpi	r18, 0x11	; 17
    152e:	31 05       	cpc	r19, r1
    1530:	88 f4       	brcc	.+34     	; 0x1554 <ADC_INIT+0xb4>
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	84 30       	cpi	r24, 0x04	; 4
    1538:	91 05       	cpc	r25, r1
    153a:	a9 f1       	breq	.+106    	; 0x15a6 <ADC_INIT+0x106>
    153c:	2d 81       	ldd	r18, Y+5	; 0x05
    153e:	3e 81       	ldd	r19, Y+6	; 0x06
    1540:	28 30       	cpi	r18, 0x08	; 8
    1542:	31 05       	cpc	r19, r1
    1544:	09 f4       	brne	.+2      	; 0x1548 <ADC_INIT+0xa8>
    1546:	45 c0       	rjmp	.+138    	; 0x15d2 <ADC_INIT+0x132>
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	82 30       	cpi	r24, 0x02	; 2
    154e:	91 05       	cpc	r25, r1
    1550:	a1 f0       	breq	.+40     	; 0x157a <ADC_INIT+0xda>
    1552:	ac c0       	rjmp	.+344    	; 0x16ac <ADC_INIT+0x20c>
    1554:	2d 81       	ldd	r18, Y+5	; 0x05
    1556:	3e 81       	ldd	r19, Y+6	; 0x06
    1558:	20 34       	cpi	r18, 0x40	; 64
    155a:	31 05       	cpc	r19, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <ADC_INIT+0xc0>
    155e:	7b c0       	rjmp	.+246    	; 0x1656 <ADC_INIT+0x1b6>
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	80 38       	cpi	r24, 0x80	; 128
    1566:	91 05       	cpc	r25, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <ADC_INIT+0xcc>
    156a:	8b c0       	rjmp	.+278    	; 0x1682 <ADC_INIT+0x1e2>
    156c:	2d 81       	ldd	r18, Y+5	; 0x05
    156e:	3e 81       	ldd	r19, Y+6	; 0x06
    1570:	20 32       	cpi	r18, 0x20	; 32
    1572:	31 05       	cpc	r19, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <ADC_INIT+0xd8>
    1576:	59 c0       	rjmp	.+178    	; 0x162a <ADC_INIT+0x18a>
    1578:	99 c0       	rjmp	.+306    	; 0x16ac <ADC_INIT+0x20c>
		{

	case 2:
		CLEAR_BIT(ADCSRA,ADPS0);
    157a:	a6 e2       	ldi	r26, 0x26	; 38
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e6 e2       	ldi	r30, 0x26	; 38
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	8e 7f       	andi	r24, 0xFE	; 254
    1586:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS1);
    1588:	a6 e2       	ldi	r26, 0x26	; 38
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e6 e2       	ldi	r30, 0x26	; 38
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	8d 7f       	andi	r24, 0xFD	; 253
    1594:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS2);
    1596:	a6 e2       	ldi	r26, 0x26	; 38
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e6 e2       	ldi	r30, 0x26	; 38
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	8b 7f       	andi	r24, 0xFB	; 251
    15a2:	8c 93       	st	X, r24
    15a4:	83 c0       	rjmp	.+262    	; 0x16ac <ADC_INIT+0x20c>

		break;
	case 4:
		CLEAR_BIT(ADCSRA,ADPS0);
    15a6:	a6 e2       	ldi	r26, 0x26	; 38
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e6 e2       	ldi	r30, 0x26	; 38
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	8e 7f       	andi	r24, 0xFE	; 254
    15b2:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    15b4:	a6 e2       	ldi	r26, 0x26	; 38
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e6 e2       	ldi	r30, 0x26	; 38
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	82 60       	ori	r24, 0x02	; 2
    15c0:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS2);
    15c2:	a6 e2       	ldi	r26, 0x26	; 38
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e6 e2       	ldi	r30, 0x26	; 38
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	8b 7f       	andi	r24, 0xFB	; 251
    15ce:	8c 93       	st	X, r24
    15d0:	6d c0       	rjmp	.+218    	; 0x16ac <ADC_INIT+0x20c>

		break;
	case 8:
		SET_BIT(ADCSRA,ADPS0);
    15d2:	a6 e2       	ldi	r26, 0x26	; 38
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e6 e2       	ldi	r30, 0x26	; 38
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	81 60       	ori	r24, 0x01	; 1
    15de:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    15e0:	a6 e2       	ldi	r26, 0x26	; 38
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e6 e2       	ldi	r30, 0x26	; 38
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	82 60       	ori	r24, 0x02	; 2
    15ec:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS2);
    15ee:	a6 e2       	ldi	r26, 0x26	; 38
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e6 e2       	ldi	r30, 0x26	; 38
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	8b 7f       	andi	r24, 0xFB	; 251
    15fa:	8c 93       	st	X, r24
    15fc:	57 c0       	rjmp	.+174    	; 0x16ac <ADC_INIT+0x20c>

		break;
	case 16:
		CLEAR_BIT(ADCSRA,ADPS0);
    15fe:	a6 e2       	ldi	r26, 0x26	; 38
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e6 e2       	ldi	r30, 0x26	; 38
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8e 7f       	andi	r24, 0xFE	; 254
    160a:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS1);
    160c:	a6 e2       	ldi	r26, 0x26	; 38
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e6 e2       	ldi	r30, 0x26	; 38
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	8d 7f       	andi	r24, 0xFD	; 253
    1618:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    161a:	a6 e2       	ldi	r26, 0x26	; 38
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e6 e2       	ldi	r30, 0x26	; 38
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	84 60       	ori	r24, 0x04	; 4
    1626:	8c 93       	st	X, r24
    1628:	41 c0       	rjmp	.+130    	; 0x16ac <ADC_INIT+0x20c>

		break;
	case 32:
		SET_BIT(ADCSRA,ADPS0);
    162a:	a6 e2       	ldi	r26, 0x26	; 38
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e6 e2       	ldi	r30, 0x26	; 38
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	81 60       	ori	r24, 0x01	; 1
    1636:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS1);
    1638:	a6 e2       	ldi	r26, 0x26	; 38
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e6 e2       	ldi	r30, 0x26	; 38
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	8d 7f       	andi	r24, 0xFD	; 253
    1644:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    1646:	a6 e2       	ldi	r26, 0x26	; 38
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e6 e2       	ldi	r30, 0x26	; 38
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	84 60       	ori	r24, 0x04	; 4
    1652:	8c 93       	st	X, r24
    1654:	2b c0       	rjmp	.+86     	; 0x16ac <ADC_INIT+0x20c>

		break;

	case 64:
		CLEAR_BIT(ADCSRA,ADPS0);
    1656:	a6 e2       	ldi	r26, 0x26	; 38
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e6 e2       	ldi	r30, 0x26	; 38
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	8e 7f       	andi	r24, 0xFE	; 254
    1662:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    1664:	a6 e2       	ldi	r26, 0x26	; 38
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e6 e2       	ldi	r30, 0x26	; 38
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	82 60       	ori	r24, 0x02	; 2
    1670:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    1672:	a6 e2       	ldi	r26, 0x26	; 38
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e6 e2       	ldi	r30, 0x26	; 38
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	84 60       	ori	r24, 0x04	; 4
    167e:	8c 93       	st	X, r24
    1680:	15 c0       	rjmp	.+42     	; 0x16ac <ADC_INIT+0x20c>

		break;
	case 128:
		SET_BIT(ADCSRA,ADPS0);
    1682:	a6 e2       	ldi	r26, 0x26	; 38
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e6 e2       	ldi	r30, 0x26	; 38
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	81 60       	ori	r24, 0x01	; 1
    168e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
    1690:	a6 e2       	ldi	r26, 0x26	; 38
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e6 e2       	ldi	r30, 0x26	; 38
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	82 60       	ori	r24, 0x02	; 2
    169c:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
    169e:	a6 e2       	ldi	r26, 0x26	; 38
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e6 e2       	ldi	r30, 0x26	; 38
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	84 60       	ori	r24, 0x04	; 4
    16aa:	8c 93       	st	X, r24

		break;

		}
	switch(adc->ref)
    16ac:	e9 81       	ldd	r30, Y+1	; 0x01
    16ae:	fa 81       	ldd	r31, Y+2	; 0x02
    16b0:	84 81       	ldd	r24, Z+4	; 0x04
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	3c 83       	std	Y+4, r19	; 0x04
    16b8:	2b 83       	std	Y+3, r18	; 0x03
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	91 05       	cpc	r25, r1
    16c2:	c1 f0       	breq	.+48     	; 0x16f4 <ADC_INIT+0x254>
    16c4:	2b 81       	ldd	r18, Y+3	; 0x03
    16c6:	3c 81       	ldd	r19, Y+4	; 0x04
    16c8:	23 30       	cpi	r18, 0x03	; 3
    16ca:	31 05       	cpc	r19, r1
    16cc:	11 f1       	breq	.+68     	; 0x1712 <ADC_INIT+0x272>
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	61 f5       	brne	.+88     	; 0x172e <ADC_INIT+0x28e>
		{
	//Voltage Reference Selection
		case 0:

			CLEAR_BIT(ADMUX,REFS0);
    16d6:	a7 e2       	ldi	r26, 0x27	; 39
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e7 e2       	ldi	r30, 0x27	; 39
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8f 7b       	andi	r24, 0xBF	; 191
    16e2:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX,REFS1);
    16e4:	a7 e2       	ldi	r26, 0x27	; 39
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e7 e2       	ldi	r30, 0x27	; 39
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	8f 77       	andi	r24, 0x7F	; 127
    16f0:	8c 93       	st	X, r24
    16f2:	1d c0       	rjmp	.+58     	; 0x172e <ADC_INIT+0x28e>
			break;
		case 1:

			SET_BIT(ADMUX,REFS0);
    16f4:	a7 e2       	ldi	r26, 0x27	; 39
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e7 e2       	ldi	r30, 0x27	; 39
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	80 64       	ori	r24, 0x40	; 64
    1700:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX,REFS1);
    1702:	a7 e2       	ldi	r26, 0x27	; 39
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e7 e2       	ldi	r30, 0x27	; 39
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	8f 77       	andi	r24, 0x7F	; 127
    170e:	8c 93       	st	X, r24
    1710:	0e c0       	rjmp	.+28     	; 0x172e <ADC_INIT+0x28e>
			break;
		case 3:

			SET_BIT(ADMUX,REFS0);
    1712:	a7 e2       	ldi	r26, 0x27	; 39
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e7 e2       	ldi	r30, 0x27	; 39
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	80 64       	ori	r24, 0x40	; 64
    171e:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX,REFS1);
    1720:	a7 e2       	ldi	r26, 0x27	; 39
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e7 e2       	ldi	r30, 0x27	; 39
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8f 77       	andi	r24, 0x7F	; 127
    172c:	8c 93       	st	X, r24
			break;
		}
	ADMUX|=adc->channel_mux;
    172e:	a7 e2       	ldi	r26, 0x27	; 39
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e7 e2       	ldi	r30, 0x27	; 39
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	90 81       	ld	r25, Z
    1738:	e9 81       	ldd	r30, Y+1	; 0x01
    173a:	fa 81       	ldd	r31, Y+2	; 0x02
    173c:	85 81       	ldd	r24, Z+5	; 0x05
    173e:	89 2b       	or	r24, r25
    1740:	8c 93       	st	X, r24




}
    1742:	26 96       	adiw	r28, 0x06	; 6
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <ADC_READ>:
int ADC_READ()
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
ADCSRA|=(1<<ADSC);
    175c:	a6 e2       	ldi	r26, 0x26	; 38
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e6 e2       	ldi	r30, 0x26	; 38
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	80 64       	ori	r24, 0x40	; 64
    1768:	8c 93       	st	X, r24
while(!(READ_BIT(ADCSRA,ADIF)));
    176a:	e6 e2       	ldi	r30, 0x26	; 38
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	80 71       	andi	r24, 0x10	; 16
    1776:	90 70       	andi	r25, 0x00	; 0
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	b9 f3       	breq	.-18     	; 0x176a <ADC_READ+0x16>
	return ADC;
    177c:	e4 e2       	ldi	r30, 0x24	; 36
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	91 81       	ldd	r25, Z+1	; 0x01
}
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <F91_void_Initpin>:
#include <avr/io.h>
#include "F90_DIO.h"

void F91_void_Initpin(char port ,int number , int Dir)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	27 97       	sbiw	r28, 0x07	; 7
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	7b 83       	std	Y+3, r23	; 0x03
    17a2:	6a 83       	std	Y+2, r22	; 0x02
    17a4:	5d 83       	std	Y+5, r21	; 0x05
    17a6:	4c 83       	std	Y+4, r20	; 0x04

	switch(port)
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	3f 83       	std	Y+7, r19	; 0x07
    17b0:	2e 83       	std	Y+6, r18	; 0x06
    17b2:	8e 81       	ldd	r24, Y+6	; 0x06
    17b4:	9f 81       	ldd	r25, Y+7	; 0x07
    17b6:	84 34       	cpi	r24, 0x44	; 68
    17b8:	91 05       	cpc	r25, r1
    17ba:	09 f4       	brne	.+2      	; 0x17be <F91_void_Initpin+0x34>
    17bc:	83 c0       	rjmp	.+262    	; 0x18c4 <F91_void_Initpin+0x13a>
    17be:	2e 81       	ldd	r18, Y+6	; 0x06
    17c0:	3f 81       	ldd	r19, Y+7	; 0x07
    17c2:	25 34       	cpi	r18, 0x45	; 69
    17c4:	31 05       	cpc	r19, r1
    17c6:	94 f4       	brge	.+36     	; 0x17ec <F91_void_Initpin+0x62>
    17c8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ca:	9f 81       	ldd	r25, Y+7	; 0x07
    17cc:	82 34       	cpi	r24, 0x42	; 66
    17ce:	91 05       	cpc	r25, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <F91_void_Initpin+0x4a>
    17d2:	51 c0       	rjmp	.+162    	; 0x1876 <F91_void_Initpin+0xec>
    17d4:	2e 81       	ldd	r18, Y+6	; 0x06
    17d6:	3f 81       	ldd	r19, Y+7	; 0x07
    17d8:	23 34       	cpi	r18, 0x43	; 67
    17da:	31 05       	cpc	r19, r1
    17dc:	0c f0       	brlt	.+2      	; 0x17e0 <F91_void_Initpin+0x56>
    17de:	99 c0       	rjmp	.+306    	; 0x1912 <F91_void_Initpin+0x188>
    17e0:	8e 81       	ldd	r24, Y+6	; 0x06
    17e2:	9f 81       	ldd	r25, Y+7	; 0x07
    17e4:	81 34       	cpi	r24, 0x41	; 65
    17e6:	91 05       	cpc	r25, r1
    17e8:	f9 f0       	breq	.+62     	; 0x1828 <F91_void_Initpin+0x9e>
    17ea:	b9 c0       	rjmp	.+370    	; 0x195e <F91_void_Initpin+0x1d4>
    17ec:	2e 81       	ldd	r18, Y+6	; 0x06
    17ee:	3f 81       	ldd	r19, Y+7	; 0x07
    17f0:	22 36       	cpi	r18, 0x62	; 98
    17f2:	31 05       	cpc	r19, r1
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <F91_void_Initpin+0x6e>
    17f6:	3f c0       	rjmp	.+126    	; 0x1876 <F91_void_Initpin+0xec>
    17f8:	8e 81       	ldd	r24, Y+6	; 0x06
    17fa:	9f 81       	ldd	r25, Y+7	; 0x07
    17fc:	83 36       	cpi	r24, 0x63	; 99
    17fe:	91 05       	cpc	r25, r1
    1800:	34 f4       	brge	.+12     	; 0x180e <F91_void_Initpin+0x84>
    1802:	2e 81       	ldd	r18, Y+6	; 0x06
    1804:	3f 81       	ldd	r19, Y+7	; 0x07
    1806:	21 36       	cpi	r18, 0x61	; 97
    1808:	31 05       	cpc	r19, r1
    180a:	71 f0       	breq	.+28     	; 0x1828 <F91_void_Initpin+0x9e>
    180c:	a8 c0       	rjmp	.+336    	; 0x195e <F91_void_Initpin+0x1d4>
    180e:	8e 81       	ldd	r24, Y+6	; 0x06
    1810:	9f 81       	ldd	r25, Y+7	; 0x07
    1812:	83 36       	cpi	r24, 0x63	; 99
    1814:	91 05       	cpc	r25, r1
    1816:	09 f4       	brne	.+2      	; 0x181a <F91_void_Initpin+0x90>
    1818:	7c c0       	rjmp	.+248    	; 0x1912 <F91_void_Initpin+0x188>
    181a:	2e 81       	ldd	r18, Y+6	; 0x06
    181c:	3f 81       	ldd	r19, Y+7	; 0x07
    181e:	24 36       	cpi	r18, 0x64	; 100
    1820:	31 05       	cpc	r19, r1
    1822:	09 f4       	brne	.+2      	; 0x1826 <F91_void_Initpin+0x9c>
    1824:	4f c0       	rjmp	.+158    	; 0x18c4 <F91_void_Initpin+0x13a>
    1826:	9b c0       	rjmp	.+310    	; 0x195e <F91_void_Initpin+0x1d4>
	{
	case 'A':
	case 'a':
		if(Dir)
    1828:	8c 81       	ldd	r24, Y+4	; 0x04
    182a:	9d 81       	ldd	r25, Y+5	; 0x05
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	89 f0       	breq	.+34     	; 0x1852 <F91_void_Initpin+0xc8>
		{
			F91_SETBIT(DDRA , number);
    1830:	aa e3       	ldi	r26, 0x3A	; 58
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	ea e3       	ldi	r30, 0x3A	; 58
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	28 2f       	mov	r18, r24
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0a 80       	ldd	r0, Y+2	; 0x02
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <F91_void_Initpin+0xbe>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <F91_void_Initpin+0xba>
    184c:	82 2b       	or	r24, r18
    184e:	8c 93       	st	X, r24
    1850:	86 c0       	rjmp	.+268    	; 0x195e <F91_void_Initpin+0x1d4>
		}else
		{
			F91_CLEARBIT(DDRA , number);
    1852:	aa e3       	ldi	r26, 0x3A	; 58
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	ea e3       	ldi	r30, 0x3A	; 58
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	28 2f       	mov	r18, r24
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0a 80       	ldd	r0, Y+2	; 0x02
    1864:	02 c0       	rjmp	.+4      	; 0x186a <F91_void_Initpin+0xe0>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	0a 94       	dec	r0
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <F91_void_Initpin+0xdc>
    186e:	80 95       	com	r24
    1870:	82 23       	and	r24, r18
    1872:	8c 93       	st	X, r24
    1874:	74 c0       	rjmp	.+232    	; 0x195e <F91_void_Initpin+0x1d4>
		}
		break;
	case 'B':
	case 'b':
		if(Dir)
    1876:	8c 81       	ldd	r24, Y+4	; 0x04
    1878:	9d 81       	ldd	r25, Y+5	; 0x05
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	89 f0       	breq	.+34     	; 0x18a0 <F91_void_Initpin+0x116>
		{
			F91_SETBIT(DDRB , number);
    187e:	a7 e3       	ldi	r26, 0x37	; 55
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e7 e3       	ldi	r30, 0x37	; 55
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	28 2f       	mov	r18, r24
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0a 80       	ldd	r0, Y+2	; 0x02
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <F91_void_Initpin+0x10c>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <F91_void_Initpin+0x108>
    189a:	82 2b       	or	r24, r18
    189c:	8c 93       	st	X, r24
    189e:	5f c0       	rjmp	.+190    	; 0x195e <F91_void_Initpin+0x1d4>
		}else
		{
			F91_CLEARBIT(DDRB , number);
    18a0:	a7 e3       	ldi	r26, 0x37	; 55
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e7 e3       	ldi	r30, 0x37	; 55
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	28 2f       	mov	r18, r24
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0a 80       	ldd	r0, Y+2	; 0x02
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <F91_void_Initpin+0x12e>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <F91_void_Initpin+0x12a>
    18bc:	80 95       	com	r24
    18be:	82 23       	and	r24, r18
    18c0:	8c 93       	st	X, r24
    18c2:	4d c0       	rjmp	.+154    	; 0x195e <F91_void_Initpin+0x1d4>
		}
		break;
	case 'D':
	case 'd':
		if(Dir)
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	9d 81       	ldd	r25, Y+5	; 0x05
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	89 f0       	breq	.+34     	; 0x18ee <F91_void_Initpin+0x164>
		{
			F91_SETBIT(DDRD , number);
    18cc:	a1 e3       	ldi	r26, 0x31	; 49
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e1 e3       	ldi	r30, 0x31	; 49
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	28 2f       	mov	r18, r24
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0a 80       	ldd	r0, Y+2	; 0x02
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <F91_void_Initpin+0x15a>
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	0a 94       	dec	r0
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <F91_void_Initpin+0x156>
    18e8:	82 2b       	or	r24, r18
    18ea:	8c 93       	st	X, r24
    18ec:	38 c0       	rjmp	.+112    	; 0x195e <F91_void_Initpin+0x1d4>
		}else
		{
			F91_CLEARBIT(DDRD , number);
    18ee:	a1 e3       	ldi	r26, 0x31	; 49
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e1 e3       	ldi	r30, 0x31	; 49
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	28 2f       	mov	r18, r24
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0a 80       	ldd	r0, Y+2	; 0x02
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <F91_void_Initpin+0x17c>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <F91_void_Initpin+0x178>
    190a:	80 95       	com	r24
    190c:	82 23       	and	r24, r18
    190e:	8c 93       	st	X, r24
    1910:	26 c0       	rjmp	.+76     	; 0x195e <F91_void_Initpin+0x1d4>
		}
		break;
	case 'C':
	case 'c':
		if(Dir)
    1912:	8c 81       	ldd	r24, Y+4	; 0x04
    1914:	9d 81       	ldd	r25, Y+5	; 0x05
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	89 f0       	breq	.+34     	; 0x193c <F91_void_Initpin+0x1b2>
		{
			F91_SETBIT(DDRC , number);
    191a:	a4 e3       	ldi	r26, 0x34	; 52
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e4 e3       	ldi	r30, 0x34	; 52
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	28 2f       	mov	r18, r24
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0a 80       	ldd	r0, Y+2	; 0x02
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <F91_void_Initpin+0x1a8>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <F91_void_Initpin+0x1a4>
    1936:	82 2b       	or	r24, r18
    1938:	8c 93       	st	X, r24
    193a:	11 c0       	rjmp	.+34     	; 0x195e <F91_void_Initpin+0x1d4>
		}else
		{
			F91_CLEARBIT(DDRC , number);
    193c:	a4 e3       	ldi	r26, 0x34	; 52
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e4 e3       	ldi	r30, 0x34	; 52
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	28 2f       	mov	r18, r24
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0a 80       	ldd	r0, Y+2	; 0x02
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <F91_void_Initpin+0x1ca>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	0a 94       	dec	r0
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <F91_void_Initpin+0x1c6>
    1958:	80 95       	com	r24
    195a:	82 23       	and	r24, r18
    195c:	8c 93       	st	X, r24
		}
		break;

	}
}
    195e:	27 96       	adiw	r28, 0x07	; 7
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <F91_void_Writpin>:

void F91_void_Writpin(char port ,int number , int Dir)
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	27 97       	sbiw	r28, 0x07	; 7
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	7b 83       	std	Y+3, r23	; 0x03
    1988:	6a 83       	std	Y+2, r22	; 0x02
    198a:	5d 83       	std	Y+5, r21	; 0x05
    198c:	4c 83       	std	Y+4, r20	; 0x04

	switch(port)
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	3f 83       	std	Y+7, r19	; 0x07
    1996:	2e 83       	std	Y+6, r18	; 0x06
    1998:	8e 81       	ldd	r24, Y+6	; 0x06
    199a:	9f 81       	ldd	r25, Y+7	; 0x07
    199c:	84 34       	cpi	r24, 0x44	; 68
    199e:	91 05       	cpc	r25, r1
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <F91_void_Writpin+0x34>
    19a2:	83 c0       	rjmp	.+262    	; 0x1aaa <F91_void_Writpin+0x13a>
    19a4:	2e 81       	ldd	r18, Y+6	; 0x06
    19a6:	3f 81       	ldd	r19, Y+7	; 0x07
    19a8:	25 34       	cpi	r18, 0x45	; 69
    19aa:	31 05       	cpc	r19, r1
    19ac:	94 f4       	brge	.+36     	; 0x19d2 <F91_void_Writpin+0x62>
    19ae:	8e 81       	ldd	r24, Y+6	; 0x06
    19b0:	9f 81       	ldd	r25, Y+7	; 0x07
    19b2:	82 34       	cpi	r24, 0x42	; 66
    19b4:	91 05       	cpc	r25, r1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <F91_void_Writpin+0x4a>
    19b8:	51 c0       	rjmp	.+162    	; 0x1a5c <F91_void_Writpin+0xec>
    19ba:	2e 81       	ldd	r18, Y+6	; 0x06
    19bc:	3f 81       	ldd	r19, Y+7	; 0x07
    19be:	23 34       	cpi	r18, 0x43	; 67
    19c0:	31 05       	cpc	r19, r1
    19c2:	0c f0       	brlt	.+2      	; 0x19c6 <F91_void_Writpin+0x56>
    19c4:	99 c0       	rjmp	.+306    	; 0x1af8 <F91_void_Writpin+0x188>
    19c6:	8e 81       	ldd	r24, Y+6	; 0x06
    19c8:	9f 81       	ldd	r25, Y+7	; 0x07
    19ca:	81 34       	cpi	r24, 0x41	; 65
    19cc:	91 05       	cpc	r25, r1
    19ce:	f9 f0       	breq	.+62     	; 0x1a0e <F91_void_Writpin+0x9e>
    19d0:	b9 c0       	rjmp	.+370    	; 0x1b44 <F91_void_Writpin+0x1d4>
    19d2:	2e 81       	ldd	r18, Y+6	; 0x06
    19d4:	3f 81       	ldd	r19, Y+7	; 0x07
    19d6:	22 36       	cpi	r18, 0x62	; 98
    19d8:	31 05       	cpc	r19, r1
    19da:	09 f4       	brne	.+2      	; 0x19de <F91_void_Writpin+0x6e>
    19dc:	3f c0       	rjmp	.+126    	; 0x1a5c <F91_void_Writpin+0xec>
    19de:	8e 81       	ldd	r24, Y+6	; 0x06
    19e0:	9f 81       	ldd	r25, Y+7	; 0x07
    19e2:	83 36       	cpi	r24, 0x63	; 99
    19e4:	91 05       	cpc	r25, r1
    19e6:	34 f4       	brge	.+12     	; 0x19f4 <F91_void_Writpin+0x84>
    19e8:	2e 81       	ldd	r18, Y+6	; 0x06
    19ea:	3f 81       	ldd	r19, Y+7	; 0x07
    19ec:	21 36       	cpi	r18, 0x61	; 97
    19ee:	31 05       	cpc	r19, r1
    19f0:	71 f0       	breq	.+28     	; 0x1a0e <F91_void_Writpin+0x9e>
    19f2:	a8 c0       	rjmp	.+336    	; 0x1b44 <F91_void_Writpin+0x1d4>
    19f4:	8e 81       	ldd	r24, Y+6	; 0x06
    19f6:	9f 81       	ldd	r25, Y+7	; 0x07
    19f8:	83 36       	cpi	r24, 0x63	; 99
    19fa:	91 05       	cpc	r25, r1
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <F91_void_Writpin+0x90>
    19fe:	7c c0       	rjmp	.+248    	; 0x1af8 <F91_void_Writpin+0x188>
    1a00:	2e 81       	ldd	r18, Y+6	; 0x06
    1a02:	3f 81       	ldd	r19, Y+7	; 0x07
    1a04:	24 36       	cpi	r18, 0x64	; 100
    1a06:	31 05       	cpc	r19, r1
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <F91_void_Writpin+0x9c>
    1a0a:	4f c0       	rjmp	.+158    	; 0x1aaa <F91_void_Writpin+0x13a>
    1a0c:	9b c0       	rjmp	.+310    	; 0x1b44 <F91_void_Writpin+0x1d4>
	{
	case 'A':
	case 'a':
		if(Dir)
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	9d 81       	ldd	r25, Y+5	; 0x05
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	89 f0       	breq	.+34     	; 0x1a38 <F91_void_Writpin+0xc8>
		{
			F91_SETBIT(PORTA , number);
    1a16:	ab e3       	ldi	r26, 0x3B	; 59
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	eb e3       	ldi	r30, 0x3B	; 59
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	28 2f       	mov	r18, r24
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0a 80       	ldd	r0, Y+2	; 0x02
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <F91_void_Writpin+0xbe>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <F91_void_Writpin+0xba>
    1a32:	82 2b       	or	r24, r18
    1a34:	8c 93       	st	X, r24
    1a36:	86 c0       	rjmp	.+268    	; 0x1b44 <F91_void_Writpin+0x1d4>
		}else
		{
			F91_CLEARBIT(PORTA , number);
    1a38:	ab e3       	ldi	r26, 0x3B	; 59
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	eb e3       	ldi	r30, 0x3B	; 59
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	28 2f       	mov	r18, r24
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	0a 80       	ldd	r0, Y+2	; 0x02
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <F91_void_Writpin+0xe0>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <F91_void_Writpin+0xdc>
    1a54:	80 95       	com	r24
    1a56:	82 23       	and	r24, r18
    1a58:	8c 93       	st	X, r24
    1a5a:	74 c0       	rjmp	.+232    	; 0x1b44 <F91_void_Writpin+0x1d4>
		}
		break;
	case 'B':
	case 'b':
		if(Dir)
    1a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	89 f0       	breq	.+34     	; 0x1a86 <F91_void_Writpin+0x116>
		{
			F91_SETBIT(PORTB , number);
    1a64:	a8 e3       	ldi	r26, 0x38	; 56
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e8 e3       	ldi	r30, 0x38	; 56
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	28 2f       	mov	r18, r24
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0a 80       	ldd	r0, Y+2	; 0x02
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <F91_void_Writpin+0x10c>
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	0a 94       	dec	r0
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <F91_void_Writpin+0x108>
    1a80:	82 2b       	or	r24, r18
    1a82:	8c 93       	st	X, r24
    1a84:	5f c0       	rjmp	.+190    	; 0x1b44 <F91_void_Writpin+0x1d4>
		}else
		{
			F91_CLEARBIT(PORTB , number);
    1a86:	a8 e3       	ldi	r26, 0x38	; 56
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e8 e3       	ldi	r30, 0x38	; 56
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	28 2f       	mov	r18, r24
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0a 80       	ldd	r0, Y+2	; 0x02
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <F91_void_Writpin+0x12e>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <F91_void_Writpin+0x12a>
    1aa2:	80 95       	com	r24
    1aa4:	82 23       	and	r24, r18
    1aa6:	8c 93       	st	X, r24
    1aa8:	4d c0       	rjmp	.+154    	; 0x1b44 <F91_void_Writpin+0x1d4>
		}
		break;
	case 'D':
	case 'd':
		if(Dir)
    1aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1aac:	9d 81       	ldd	r25, Y+5	; 0x05
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	89 f0       	breq	.+34     	; 0x1ad4 <F91_void_Writpin+0x164>
		{
			F91_SETBIT(PORTD , number);
    1ab2:	a2 e3       	ldi	r26, 0x32	; 50
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e2 e3       	ldi	r30, 0x32	; 50
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	28 2f       	mov	r18, r24
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0a 80       	ldd	r0, Y+2	; 0x02
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <F91_void_Writpin+0x15a>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <F91_void_Writpin+0x156>
    1ace:	82 2b       	or	r24, r18
    1ad0:	8c 93       	st	X, r24
    1ad2:	38 c0       	rjmp	.+112    	; 0x1b44 <F91_void_Writpin+0x1d4>
		}else
		{
			F91_CLEARBIT(PORTD , number);
    1ad4:	a2 e3       	ldi	r26, 0x32	; 50
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e2 e3       	ldi	r30, 0x32	; 50
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	28 2f       	mov	r18, r24
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0a 80       	ldd	r0, Y+2	; 0x02
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <F91_void_Writpin+0x17c>
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	0a 94       	dec	r0
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <F91_void_Writpin+0x178>
    1af0:	80 95       	com	r24
    1af2:	82 23       	and	r24, r18
    1af4:	8c 93       	st	X, r24
    1af6:	26 c0       	rjmp	.+76     	; 0x1b44 <F91_void_Writpin+0x1d4>
		}
		break;
	case 'C':
	case 'c':
		if(Dir)
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	9d 81       	ldd	r25, Y+5	; 0x05
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	89 f0       	breq	.+34     	; 0x1b22 <F91_void_Writpin+0x1b2>
		{
			F91_SETBIT(PORTC , number);
    1b00:	a5 e3       	ldi	r26, 0x35	; 53
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e5 e3       	ldi	r30, 0x35	; 53
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0a 80       	ldd	r0, Y+2	; 0x02
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <F91_void_Writpin+0x1a8>
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <F91_void_Writpin+0x1a4>
    1b1c:	82 2b       	or	r24, r18
    1b1e:	8c 93       	st	X, r24
    1b20:	11 c0       	rjmp	.+34     	; 0x1b44 <F91_void_Writpin+0x1d4>
		}else
		{
			F91_CLEARBIT(PORTC , number);
    1b22:	a5 e3       	ldi	r26, 0x35	; 53
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e5 e3       	ldi	r30, 0x35	; 53
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0a 80       	ldd	r0, Y+2	; 0x02
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <F91_void_Writpin+0x1ca>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <F91_void_Writpin+0x1c6>
    1b3e:	80 95       	com	r24
    1b40:	82 23       	and	r24, r18
    1b42:	8c 93       	st	X, r24
		}
		break;

	}
}
    1b44:	27 96       	adiw	r28, 0x07	; 7
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <F91_void_InitPort>:


void F91_void_InitPort(unsigned char port , char value)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <F91_void_InitPort+0x6>
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <F91_void_InitPort+0x8>
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	6a 83       	std	Y+2, r22	; 0x02

	switch(port)
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	3c 83       	std	Y+4, r19	; 0x04
    1b6e:	2b 83       	std	Y+3, r18	; 0x03
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	9c 81       	ldd	r25, Y+4	; 0x04
    1b74:	84 34       	cpi	r24, 0x44	; 68
    1b76:	91 05       	cpc	r25, r1
    1b78:	d1 f1       	breq	.+116    	; 0x1bee <F91_void_InitPort+0x98>
    1b7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7e:	25 34       	cpi	r18, 0x45	; 69
    1b80:	31 05       	cpc	r19, r1
    1b82:	84 f4       	brge	.+32     	; 0x1ba4 <F91_void_InitPort+0x4e>
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	82 34       	cpi	r24, 0x42	; 66
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	59 f1       	breq	.+86     	; 0x1be4 <F91_void_InitPort+0x8e>
    1b8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b90:	3c 81       	ldd	r19, Y+4	; 0x04
    1b92:	23 34       	cpi	r18, 0x43	; 67
    1b94:	31 05       	cpc	r19, r1
    1b96:	84 f5       	brge	.+96     	; 0x1bf8 <F91_void_InitPort+0xa2>
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	81 34       	cpi	r24, 0x41	; 65
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	e1 f0       	breq	.+56     	; 0x1bda <F91_void_InitPort+0x84>
    1ba2:	2e c0       	rjmp	.+92     	; 0x1c00 <F91_void_InitPort+0xaa>
    1ba4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba8:	22 36       	cpi	r18, 0x62	; 98
    1baa:	31 05       	cpc	r19, r1
    1bac:	d9 f0       	breq	.+54     	; 0x1be4 <F91_void_InitPort+0x8e>
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb2:	83 36       	cpi	r24, 0x63	; 99
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	34 f4       	brge	.+12     	; 0x1bc4 <F91_void_InitPort+0x6e>
    1bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bba:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbc:	21 36       	cpi	r18, 0x61	; 97
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	61 f0       	breq	.+24     	; 0x1bda <F91_void_InitPort+0x84>
    1bc2:	1e c0       	rjmp	.+60     	; 0x1c00 <F91_void_InitPort+0xaa>
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	83 36       	cpi	r24, 0x63	; 99
    1bca:	91 05       	cpc	r25, r1
    1bcc:	a9 f0       	breq	.+42     	; 0x1bf8 <F91_void_InitPort+0xa2>
    1bce:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd2:	24 36       	cpi	r18, 0x64	; 100
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	59 f0       	breq	.+22     	; 0x1bee <F91_void_InitPort+0x98>
    1bd8:	13 c0       	rjmp	.+38     	; 0x1c00 <F91_void_InitPort+0xaa>
	{
	case 'A':
	case 'a':
		DDRA = value;
    1bda:	ea e3       	ldi	r30, 0x3A	; 58
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	80 83       	st	Z, r24
    1be2:	0e c0       	rjmp	.+28     	; 0x1c00 <F91_void_InitPort+0xaa>
		break;
	case 'B':
	case 'b':
		DDRB = value;
    1be4:	e7 e3       	ldi	r30, 0x37	; 55
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	80 83       	st	Z, r24
    1bec:	09 c0       	rjmp	.+18     	; 0x1c00 <F91_void_InitPort+0xaa>
		break;
	case 'D':
	case 'd':
		DDRD = value;
    1bee:	e1 e3       	ldi	r30, 0x31	; 49
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	80 83       	st	Z, r24
    1bf6:	04 c0       	rjmp	.+8      	; 0x1c00 <F91_void_InitPort+0xaa>

		break;
	case 'C':
	case 'c':
		DDRC = value;
    1bf8:	e4 e3       	ldi	r30, 0x34	; 52
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	80 83       	st	Z, r24

		break;

	}
}
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <F91_void_WritePort>:
void F91_void_WritePort(unsigned char port , char value)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <F91_void_WritePort+0x6>
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <F91_void_WritePort+0x8>
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	6a 83       	std	Y+2, r22	; 0x02

	switch(port)
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	3c 83       	std	Y+4, r19	; 0x04
    1c26:	2b 83       	std	Y+3, r18	; 0x03
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	84 34       	cpi	r24, 0x44	; 68
    1c2e:	91 05       	cpc	r25, r1
    1c30:	d1 f1       	breq	.+116    	; 0x1ca6 <F91_void_WritePort+0x98>
    1c32:	2b 81       	ldd	r18, Y+3	; 0x03
    1c34:	3c 81       	ldd	r19, Y+4	; 0x04
    1c36:	25 34       	cpi	r18, 0x45	; 69
    1c38:	31 05       	cpc	r19, r1
    1c3a:	84 f4       	brge	.+32     	; 0x1c5c <F91_void_WritePort+0x4e>
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	82 34       	cpi	r24, 0x42	; 66
    1c42:	91 05       	cpc	r25, r1
    1c44:	59 f1       	breq	.+86     	; 0x1c9c <F91_void_WritePort+0x8e>
    1c46:	2b 81       	ldd	r18, Y+3	; 0x03
    1c48:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4a:	23 34       	cpi	r18, 0x43	; 67
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	84 f5       	brge	.+96     	; 0x1cb0 <F91_void_WritePort+0xa2>
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	81 34       	cpi	r24, 0x41	; 65
    1c56:	91 05       	cpc	r25, r1
    1c58:	e1 f0       	breq	.+56     	; 0x1c92 <F91_void_WritePort+0x84>
    1c5a:	2e c0       	rjmp	.+92     	; 0x1cb8 <F91_void_WritePort+0xaa>
    1c5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c60:	22 36       	cpi	r18, 0x62	; 98
    1c62:	31 05       	cpc	r19, r1
    1c64:	d9 f0       	breq	.+54     	; 0x1c9c <F91_void_WritePort+0x8e>
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	83 36       	cpi	r24, 0x63	; 99
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	34 f4       	brge	.+12     	; 0x1c7c <F91_void_WritePort+0x6e>
    1c70:	2b 81       	ldd	r18, Y+3	; 0x03
    1c72:	3c 81       	ldd	r19, Y+4	; 0x04
    1c74:	21 36       	cpi	r18, 0x61	; 97
    1c76:	31 05       	cpc	r19, r1
    1c78:	61 f0       	breq	.+24     	; 0x1c92 <F91_void_WritePort+0x84>
    1c7a:	1e c0       	rjmp	.+60     	; 0x1cb8 <F91_void_WritePort+0xaa>
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	83 36       	cpi	r24, 0x63	; 99
    1c82:	91 05       	cpc	r25, r1
    1c84:	a9 f0       	breq	.+42     	; 0x1cb0 <F91_void_WritePort+0xa2>
    1c86:	2b 81       	ldd	r18, Y+3	; 0x03
    1c88:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8a:	24 36       	cpi	r18, 0x64	; 100
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	59 f0       	breq	.+22     	; 0x1ca6 <F91_void_WritePort+0x98>
    1c90:	13 c0       	rjmp	.+38     	; 0x1cb8 <F91_void_WritePort+0xaa>
	{
	case 'A':
	case 'a':
		PORTA = value;
    1c92:	eb e3       	ldi	r30, 0x3B	; 59
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	80 83       	st	Z, r24
    1c9a:	0e c0       	rjmp	.+28     	; 0x1cb8 <F91_void_WritePort+0xaa>
		break;
	case 'B':
	case 'b':
		PORTB = value;
    1c9c:	e8 e3       	ldi	r30, 0x38	; 56
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	80 83       	st	Z, r24
    1ca4:	09 c0       	rjmp	.+18     	; 0x1cb8 <F91_void_WritePort+0xaa>
		break;
	case 'D':
	case 'd':
		PORTD = value;
    1ca6:	e2 e3       	ldi	r30, 0x32	; 50
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	80 83       	st	Z, r24
    1cae:	04 c0       	rjmp	.+8      	; 0x1cb8 <F91_void_WritePort+0xaa>

		break;
	case 'C':
	case 'c':
		PORTC = value;
    1cb0:	e5 e3       	ldi	r30, 0x35	; 53
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	80 83       	st	Z, r24

		break;

	}
}
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <F91_char_Readpin>:

char F91_char_Readpin(char port , char number)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <F91_char_Readpin+0x6>
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <F91_char_Readpin+0x8>
    1cce:	0f 92       	push	r0
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	3d 83       	std	Y+5, r19	; 0x05
    1ce0:	2c 83       	std	Y+4, r18	; 0x04
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce6:	84 34       	cpi	r24, 0x44	; 68
    1ce8:	91 05       	cpc	r25, r1
    1cea:	09 f4       	brne	.+2      	; 0x1cee <F91_char_Readpin+0x28>
    1cec:	55 c0       	rjmp	.+170    	; 0x1d98 <F91_char_Readpin+0xd2>
    1cee:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf2:	25 34       	cpi	r18, 0x45	; 69
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	8c f4       	brge	.+34     	; 0x1d1a <F91_char_Readpin+0x54>
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfc:	82 34       	cpi	r24, 0x42	; 66
    1cfe:	91 05       	cpc	r25, r1
    1d00:	c9 f1       	breq	.+114    	; 0x1d74 <F91_char_Readpin+0xae>
    1d02:	2c 81       	ldd	r18, Y+4	; 0x04
    1d04:	3d 81       	ldd	r19, Y+5	; 0x05
    1d06:	23 34       	cpi	r18, 0x43	; 67
    1d08:	31 05       	cpc	r19, r1
    1d0a:	0c f0       	brlt	.+2      	; 0x1d0e <F91_char_Readpin+0x48>
    1d0c:	57 c0       	rjmp	.+174    	; 0x1dbc <F91_char_Readpin+0xf6>
    1d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d10:	9d 81       	ldd	r25, Y+5	; 0x05
    1d12:	81 34       	cpi	r24, 0x41	; 65
    1d14:	91 05       	cpc	r25, r1
    1d16:	e1 f0       	breq	.+56     	; 0x1d50 <F91_char_Readpin+0x8a>
    1d18:	63 c0       	rjmp	.+198    	; 0x1de0 <F91_char_Readpin+0x11a>
    1d1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d1e:	22 36       	cpi	r18, 0x62	; 98
    1d20:	31 05       	cpc	r19, r1
    1d22:	41 f1       	breq	.+80     	; 0x1d74 <F91_char_Readpin+0xae>
    1d24:	8c 81       	ldd	r24, Y+4	; 0x04
    1d26:	9d 81       	ldd	r25, Y+5	; 0x05
    1d28:	83 36       	cpi	r24, 0x63	; 99
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	34 f4       	brge	.+12     	; 0x1d3a <F91_char_Readpin+0x74>
    1d2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d30:	3d 81       	ldd	r19, Y+5	; 0x05
    1d32:	21 36       	cpi	r18, 0x61	; 97
    1d34:	31 05       	cpc	r19, r1
    1d36:	61 f0       	breq	.+24     	; 0x1d50 <F91_char_Readpin+0x8a>
    1d38:	53 c0       	rjmp	.+166    	; 0x1de0 <F91_char_Readpin+0x11a>
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3e:	83 36       	cpi	r24, 0x63	; 99
    1d40:	91 05       	cpc	r25, r1
    1d42:	e1 f1       	breq	.+120    	; 0x1dbc <F91_char_Readpin+0xf6>
    1d44:	2c 81       	ldd	r18, Y+4	; 0x04
    1d46:	3d 81       	ldd	r19, Y+5	; 0x05
    1d48:	24 36       	cpi	r18, 0x64	; 100
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	29 f1       	breq	.+74     	; 0x1d98 <F91_char_Readpin+0xd2>
    1d4e:	48 c0       	rjmp	.+144    	; 0x1de0 <F91_char_Readpin+0x11a>
	{
	case 'A':
	case 'a':
		return F91_READBIT(PINA , number);
    1d50:	e9 e3       	ldi	r30, 0x39	; 57
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	48 2f       	mov	r20, r24
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	02 2e       	mov	r0, r18
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <F91_char_Readpin+0xa4>
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	0a 94       	dec	r0
    1d6c:	e2 f7       	brpl	.-8      	; 0x1d66 <F91_char_Readpin+0xa0>
    1d6e:	84 23       	and	r24, r20
    1d70:	8b 83       	std	Y+3, r24	; 0x03
    1d72:	37 c0       	rjmp	.+110    	; 0x1de2 <F91_char_Readpin+0x11c>
		break;
	case 'B':
	case 'b':
		return F91_READBIT(PINB , number);
    1d74:	e6 e3       	ldi	r30, 0x36	; 54
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	48 2f       	mov	r20, r24
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	02 2e       	mov	r0, r18
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <F91_char_Readpin+0xc8>
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	0a 94       	dec	r0
    1d90:	e2 f7       	brpl	.-8      	; 0x1d8a <F91_char_Readpin+0xc4>
    1d92:	84 23       	and	r24, r20
    1d94:	8b 83       	std	Y+3, r24	; 0x03
    1d96:	25 c0       	rjmp	.+74     	; 0x1de2 <F91_char_Readpin+0x11c>
		break;
	case 'D':
	case 'd':
		return F91_READBIT(PIND , number);
    1d98:	e0 e3       	ldi	r30, 0x30	; 48
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	48 2f       	mov	r20, r24
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	02 2e       	mov	r0, r18
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <F91_char_Readpin+0xec>
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	0a 94       	dec	r0
    1db4:	e2 f7       	brpl	.-8      	; 0x1dae <F91_char_Readpin+0xe8>
    1db6:	84 23       	and	r24, r20
    1db8:	8b 83       	std	Y+3, r24	; 0x03
    1dba:	13 c0       	rjmp	.+38     	; 0x1de2 <F91_char_Readpin+0x11c>
		break;
	case 'C':
	case 'c':
		return F91_READBIT(PINC , number);
    1dbc:	e3 e3       	ldi	r30, 0x33	; 51
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 2e       	mov	r0, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <F91_char_Readpin+0x110>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	0a 94       	dec	r0
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <F91_char_Readpin+0x10c>
    1dda:	84 23       	and	r24, r20
    1ddc:	8b 83       	std	Y+3, r24	; 0x03
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <F91_char_Readpin+0x11c>
		break;

	}
	return 0;
    1de0:	1b 82       	std	Y+3, r1	; 0x03
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <F90_void_I2C_init>:
#endif

#ifdef generic

void F90_void_I2C_init(unsigned int bitrate,unsigned char prescaler)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <F90_void_I2C_init+0x6>
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <F90_void_I2C_init+0x8>
    1dfc:	0f 92       	push	r0
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	6b 83       	std	Y+3, r22	; 0x03
	TWBR = bitrate;
    1e08:	e0 e2       	ldi	r30, 0x20	; 32
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	80 83       	st	Z, r24
	switch(prescaler)
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	3d 83       	std	Y+5, r19	; 0x05
    1e18:	2c 83       	std	Y+4, r18	; 0x04
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1e:	84 30       	cpi	r24, 0x04	; 4
    1e20:	91 05       	cpc	r25, r1
    1e22:	29 f1       	breq	.+74     	; 0x1e6e <F90_void_I2C_init+0x7a>
    1e24:	2c 81       	ldd	r18, Y+4	; 0x04
    1e26:	3d 81       	ldd	r19, Y+5	; 0x05
    1e28:	25 30       	cpi	r18, 0x05	; 5
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	34 f4       	brge	.+12     	; 0x1e3a <F90_void_I2C_init+0x46>
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	9d 81       	ldd	r25, Y+5	; 0x05
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	91 05       	cpc	r25, r1
    1e36:	61 f0       	breq	.+24     	; 0x1e50 <F90_void_I2C_init+0x5c>
    1e38:	46 c0       	rjmp	.+140    	; 0x1ec6 <F90_void_I2C_init+0xd2>
    1e3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e3e:	20 31       	cpi	r18, 0x10	; 16
    1e40:	31 05       	cpc	r19, r1
    1e42:	21 f1       	breq	.+72     	; 0x1e8c <F90_void_I2C_init+0x98>
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	9d 81       	ldd	r25, Y+5	; 0x05
    1e48:	80 34       	cpi	r24, 0x40	; 64
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	71 f1       	breq	.+92     	; 0x1eaa <F90_void_I2C_init+0xb6>
    1e4e:	3b c0       	rjmp	.+118    	; 0x1ec6 <F90_void_I2C_init+0xd2>
	{
	case 1:

	CLEAR_BIT(TWSR,TWPS0);
    1e50:	a1 e2       	ldi	r26, 0x21	; 33
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e1 e2       	ldi	r30, 0x21	; 33
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	8e 7f       	andi	r24, 0xFE	; 254
    1e5c:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR,TWPS1);
    1e5e:	a1 e2       	ldi	r26, 0x21	; 33
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e1 e2       	ldi	r30, 0x21	; 33
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	8d 7f       	andi	r24, 0xFD	; 253
    1e6a:	8c 93       	st	X, r24
    1e6c:	2c c0       	rjmp	.+88     	; 0x1ec6 <F90_void_I2C_init+0xd2>
	break;
	case 4:

	SET_BIT(TWSR,TWPS0);
    1e6e:	a1 e2       	ldi	r26, 0x21	; 33
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e1 e2       	ldi	r30, 0x21	; 33
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	81 60       	ori	r24, 0x01	; 1
    1e7a:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR,TWPS1);
    1e7c:	a1 e2       	ldi	r26, 0x21	; 33
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e1 e2       	ldi	r30, 0x21	; 33
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	8d 7f       	andi	r24, 0xFD	; 253
    1e88:	8c 93       	st	X, r24
    1e8a:	1d c0       	rjmp	.+58     	; 0x1ec6 <F90_void_I2C_init+0xd2>
	break;
	case 16:

	CLEAR_BIT(TWSR,TWPS0);
    1e8c:	a1 e2       	ldi	r26, 0x21	; 33
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e1 e2       	ldi	r30, 0x21	; 33
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	8e 7f       	andi	r24, 0xFE	; 254
    1e98:	8c 93       	st	X, r24
	SET_BIT(TWSR,TWPS1);
    1e9a:	a1 e2       	ldi	r26, 0x21	; 33
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e1 e2       	ldi	r30, 0x21	; 33
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	82 60       	ori	r24, 0x02	; 2
    1ea6:	8c 93       	st	X, r24
    1ea8:	0e c0       	rjmp	.+28     	; 0x1ec6 <F90_void_I2C_init+0xd2>
	break;
	case 64:

	SET_BIT(TWSR,TWPS0);
    1eaa:	a1 e2       	ldi	r26, 0x21	; 33
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e1 e2       	ldi	r30, 0x21	; 33
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	81 60       	ori	r24, 0x01	; 1
    1eb6:	8c 93       	st	X, r24
	SET_BIT(TWSR,TWPS1);
    1eb8:	a1 e2       	ldi	r26, 0x21	; 33
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e1 e2       	ldi	r30, 0x21	; 33
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	82 60       	ori	r24, 0x02	; 2
    1ec4:	8c 93       	st	X, r24
	break;

	}
	TWCR = (1 << TWEN);
    1ec6:	e6 e5       	ldi	r30, 0x56	; 86
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	84 e0       	ldi	r24, 0x04	; 4
    1ecc:	80 83       	st	Z, r24
}
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <F90_void_I2C_Start>:


#endif

void F90_void_I2C_Start()
{
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1 << TWINT) | (1 << TWSTA) | (1<<TWEN);
    1ee6:	e6 e5       	ldi	r30, 0x56	; 86
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	84 ea       	ldi	r24, 0xA4	; 164
    1eec:	80 83       	st	Z, r24

	while(!(TWCR & (1 << TWINT)));
    1eee:	e6 e5       	ldi	r30, 0x56	; 86
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	88 23       	and	r24, r24
    1ef6:	dc f7       	brge	.-10     	; 0x1eee <F90_void_I2C_Start+0x10>

}
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <F90_void_I2C_Stop>:

void F90_void_I2C_Stop()
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1<<TWEN);
    1f06:	e6 e5       	ldi	r30, 0x56	; 86
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	84 e9       	ldi	r24, 0x94	; 148
    1f0c:	80 83       	st	Z, r24
}
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <F90_void_I2C_Write>:


void F90_void_I2C_Write(char data)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	0f 92       	push	r0
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data ;
    1f20:	e3 e2       	ldi	r30, 0x23	; 35
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f28:	e6 e5       	ldi	r30, 0x56	; 86
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	84 e8       	ldi	r24, 0x84	; 132
    1f2e:	80 83       	st	Z, r24
	while(!(TWCR & (1 << TWINT)));
    1f30:	e6 e5       	ldi	r30, 0x56	; 86
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	88 23       	and	r24, r24
    1f38:	dc f7       	brge	.-10     	; 0x1f30 <F90_void_I2C_Write+0x1c>
}
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <F90_char_I2C_Read>:




char F90_char_I2C_Read(char ack)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	0f 92       	push	r0
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	89 83       	std	Y+1, r24	; 0x01
	if(ack)
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	88 23       	and	r24, r24
    1f52:	29 f0       	breq	.+10     	; 0x1f5e <F90_char_I2C_Read+0x1c>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1 << TWEA);
    1f54:	e6 e5       	ldi	r30, 0x56	; 86
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	84 ec       	ldi	r24, 0xC4	; 196
    1f5a:	80 83       	st	Z, r24
    1f5c:	04 c0       	rjmp	.+8      	; 0x1f66 <F90_char_I2C_Read+0x24>

	}
	else
	{
		TWCR = (1<<TWINT) | (1<<TWEN);
    1f5e:	e6 e5       	ldi	r30, 0x56	; 86
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	84 e8       	ldi	r24, 0x84	; 132
    1f64:	80 83       	st	Z, r24

	}
	while(!(TWCR & (1 << TWINT)));
    1f66:	e6 e5       	ldi	r30, 0x56	; 86
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 23       	and	r24, r24
    1f6e:	dc f7       	brge	.-10     	; 0x1f66 <F90_char_I2C_Read+0x24>
	return TWDR;
    1f70:	e3 e2       	ldi	r30, 0x23	; 35
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
}
    1f76:	0f 90       	pop	r0
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <PWM_INIT>:
#include "../MCAL/F90_PWM.h"
#include "../MCAL/F90_DIO.h"
#include <avr/io.h>

void PWM_INIT (pwm_t *pwm)
{
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	28 97       	sbiw	r28, 0x08	; 8
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(DDRB,PB3);
    1f96:	a7 e3       	ldi	r26, 0x37	; 55
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e7 e3       	ldi	r30, 0x37	; 55
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	88 60       	ori	r24, 0x08	; 8
    1fa2:	8c 93       	st	X, r24
	switch (pwm->type)
    1fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa8:	80 81       	ld	r24, Z
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	38 87       	std	Y+8, r19	; 0x08
    1fb0:	2f 83       	std	Y+7, r18	; 0x07
    1fb2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb4:	98 85       	ldd	r25, Y+8	; 0x08
    1fb6:	84 30       	cpi	r24, 0x04	; 4
    1fb8:	91 05       	cpc	r25, r1
    1fba:	54 f4       	brge	.+20     	; 0x1fd0 <PWM_INIT+0x52>
    1fbc:	2f 81       	ldd	r18, Y+7	; 0x07
    1fbe:	38 85       	ldd	r19, Y+8	; 0x08
    1fc0:	22 30       	cpi	r18, 0x02	; 2
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	d4 f4       	brge	.+52     	; 0x1ffa <PWM_INIT+0x7c>
    1fc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc8:	98 85       	ldd	r25, Y+8	; 0x08
    1fca:	99 23       	and	r25, r25
    1fcc:	9c f1       	brlt	.+102    	; 0x2034 <PWM_INIT+0xb6>
    1fce:	06 c0       	rjmp	.+12     	; 0x1fdc <PWM_INIT+0x5e>
    1fd0:	2f 81       	ldd	r18, Y+7	; 0x07
    1fd2:	38 85       	ldd	r19, Y+8	; 0x08
    1fd4:	26 30       	cpi	r18, 0x06	; 6
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	6c f5       	brge	.+90     	; 0x2034 <PWM_INIT+0xb6>
    1fda:	1e c0       	rjmp	.+60     	; 0x2018 <PWM_INIT+0x9a>
	{
	case PhaseCorrect:
	case phasecorrect:
		SET_BIT(TCCR0,WGM00);
    1fdc:	a3 e5       	ldi	r26, 0x53	; 83
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e3 e5       	ldi	r30, 0x53	; 83
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	80 64       	ori	r24, 0x40	; 64
    1fe8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
    1fea:	a3 e5       	ldi	r26, 0x53	; 83
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e3 e5       	ldi	r30, 0x53	; 83
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	87 7f       	andi	r24, 0xF7	; 247
    1ff6:	8c 93       	st	X, r24
    1ff8:	1d c0       	rjmp	.+58     	; 0x2034 <PWM_INIT+0xb6>
		break;
	case CTC:
	case ctc:
		CLEAR_BIT(TCCR0,WGM00);
    1ffa:	a3 e5       	ldi	r26, 0x53	; 83
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e3 e5       	ldi	r30, 0x53	; 83
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	8f 7b       	andi	r24, 0xBF	; 191
    2006:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    2008:	a3 e5       	ldi	r26, 0x53	; 83
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e3 e5       	ldi	r30, 0x53	; 83
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	88 60       	ori	r24, 0x08	; 8
    2014:	8c 93       	st	X, r24
    2016:	0e c0       	rjmp	.+28     	; 0x2034 <PWM_INIT+0xb6>
		break;
	case FastPwm:
	case fastpwm:
		SET_BIT(TCCR0,WGM00);
    2018:	a3 e5       	ldi	r26, 0x53	; 83
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e3 e5       	ldi	r30, 0x53	; 83
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 64       	ori	r24, 0x40	; 64
    2024:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    2026:	a3 e5       	ldi	r26, 0x53	; 83
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e3 e5       	ldi	r30, 0x53	; 83
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	88 60       	ori	r24, 0x08	; 8
    2032:	8c 93       	st	X, r24
		break;
	}
	switch (pwm->inverse)
    2034:	e9 81       	ldd	r30, Y+1	; 0x01
    2036:	fa 81       	ldd	r31, Y+2	; 0x02
    2038:	81 81       	ldd	r24, Z+1	; 0x01
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	3e 83       	std	Y+6, r19	; 0x06
    2040:	2d 83       	std	Y+5, r18	; 0x05
    2042:	8d 81       	ldd	r24, Y+5	; 0x05
    2044:	9e 81       	ldd	r25, Y+6	; 0x06
    2046:	86 30       	cpi	r24, 0x06	; 6
    2048:	91 05       	cpc	r25, r1
    204a:	31 f0       	breq	.+12     	; 0x2058 <PWM_INIT+0xda>
    204c:	2d 81       	ldd	r18, Y+5	; 0x05
    204e:	3e 81       	ldd	r19, Y+6	; 0x06
    2050:	27 30       	cpi	r18, 0x07	; 7
    2052:	31 05       	cpc	r19, r1
    2054:	81 f0       	breq	.+32     	; 0x2076 <PWM_INIT+0xf8>
    2056:	1d c0       	rjmp	.+58     	; 0x2092 <PWM_INIT+0x114>
	{
	case True:
		SET_BIT(TCCR0,COM00);
    2058:	a3 e5       	ldi	r26, 0x53	; 83
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e3 e5       	ldi	r30, 0x53	; 83
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	80 61       	ori	r24, 0x10	; 16
    2064:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    2066:	a3 e5       	ldi	r26, 0x53	; 83
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e3 e5       	ldi	r30, 0x53	; 83
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	80 62       	ori	r24, 0x20	; 32
    2072:	8c 93       	st	X, r24
    2074:	0e c0       	rjmp	.+28     	; 0x2092 <PWM_INIT+0x114>
		break;
	case False:
		CLEAR_BIT(TCCR0,COM00);
    2076:	a3 e5       	ldi	r26, 0x53	; 83
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e3 e5       	ldi	r30, 0x53	; 83
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	8f 7e       	andi	r24, 0xEF	; 239
    2082:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    2084:	a3 e5       	ldi	r26, 0x53	; 83
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e3 e5       	ldi	r30, 0x53	; 83
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	80 62       	ori	r24, 0x20	; 32
    2090:	8c 93       	st	X, r24
		break;
	}
	switch (pwm->clock)
    2092:	e9 81       	ldd	r30, Y+1	; 0x01
    2094:	fa 81       	ldd	r31, Y+2	; 0x02
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	9c 83       	std	Y+4, r25	; 0x04
    209c:	8b 83       	std	Y+3, r24	; 0x03
    209e:	2b 81       	ldd	r18, Y+3	; 0x03
    20a0:	3c 81       	ldd	r19, Y+4	; 0x04
    20a2:	28 30       	cpi	r18, 0x08	; 8
    20a4:	31 05       	cpc	r19, r1
    20a6:	09 f4       	brne	.+2      	; 0x20aa <PWM_INIT+0x12c>
    20a8:	41 c0       	rjmp	.+130    	; 0x212c <PWM_INIT+0x1ae>
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	89 30       	cpi	r24, 0x09	; 9
    20b0:	91 05       	cpc	r25, r1
    20b2:	90 f4       	brcc	.+36     	; 0x20d8 <PWM_INIT+0x15a>
    20b4:	2b 81       	ldd	r18, Y+3	; 0x03
    20b6:	3c 81       	ldd	r19, Y+4	; 0x04
    20b8:	21 30       	cpi	r18, 0x01	; 1
    20ba:	31 05       	cpc	r19, r1
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <PWM_INIT+0x142>
    20be:	8e c0       	rjmp	.+284    	; 0x21dc <PWM_INIT+0x25e>
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	91 05       	cpc	r25, r1
    20c8:	d8 f0       	brcs	.+54     	; 0x2100 <PWM_INIT+0x182>
    20ca:	2b 81       	ldd	r18, Y+3	; 0x03
    20cc:	3c 81       	ldd	r19, Y+4	; 0x04
    20ce:	22 30       	cpi	r18, 0x02	; 2
    20d0:	31 05       	cpc	r19, r1
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <PWM_INIT+0x158>
    20d4:	99 c0       	rjmp	.+306    	; 0x2208 <PWM_INIT+0x28a>
    20d6:	ad c0       	rjmp	.+346    	; 0x2232 <PWM_INIT+0x2b4>
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	21 e0       	ldi	r18, 0x01	; 1
    20de:	80 30       	cpi	r24, 0x00	; 0
    20e0:	92 07       	cpc	r25, r18
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <PWM_INIT+0x168>
    20e4:	4f c0       	rjmp	.+158    	; 0x2184 <PWM_INIT+0x206>
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	24 e0       	ldi	r18, 0x04	; 4
    20ec:	80 30       	cpi	r24, 0x00	; 0
    20ee:	92 07       	cpc	r25, r18
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <PWM_INIT+0x176>
    20f2:	5e c0       	rjmp	.+188    	; 0x21b0 <PWM_INIT+0x232>
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	80 34       	cpi	r24, 0x40	; 64
    20fa:	91 05       	cpc	r25, r1
    20fc:	69 f1       	breq	.+90     	; 0x2158 <PWM_INIT+0x1da>
    20fe:	99 c0       	rjmp	.+306    	; 0x2232 <PWM_INIT+0x2b4>
	{
	case NO:
	SET_BIT(TCCR0,CS00);
    2100:	a3 e5       	ldi	r26, 0x53	; 83
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e3 e5       	ldi	r30, 0x53	; 83
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	81 60       	ori	r24, 0x01	; 1
    210c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01);
    210e:	a3 e5       	ldi	r26, 0x53	; 83
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e3 e5       	ldi	r30, 0x53	; 83
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	8d 7f       	andi	r24, 0xFD	; 253
    211a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    211c:	a3 e5       	ldi	r26, 0x53	; 83
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e3 e5       	ldi	r30, 0x53	; 83
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	8b 7f       	andi	r24, 0xFB	; 251
    2128:	8c 93       	st	X, r24
    212a:	83 c0       	rjmp	.+262    	; 0x2232 <PWM_INIT+0x2b4>
	break;
	case 8:
	CLEAR_BIT(TCCR0,CS00);
    212c:	a3 e5       	ldi	r26, 0x53	; 83
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e3 e5       	ldi	r30, 0x53	; 83
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	8e 7f       	andi	r24, 0xFE	; 254
    2138:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    213a:	a3 e5       	ldi	r26, 0x53	; 83
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e3 e5       	ldi	r30, 0x53	; 83
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	82 60       	ori	r24, 0x02	; 2
    2146:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    2148:	a3 e5       	ldi	r26, 0x53	; 83
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e3 e5       	ldi	r30, 0x53	; 83
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	8b 7f       	andi	r24, 0xFB	; 251
    2154:	8c 93       	st	X, r24
    2156:	6d c0       	rjmp	.+218    	; 0x2232 <PWM_INIT+0x2b4>
	break;
	case 64:
	SET_BIT(TCCR0,CS00);
    2158:	a3 e5       	ldi	r26, 0x53	; 83
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e3 e5       	ldi	r30, 0x53	; 83
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	81 60       	ori	r24, 0x01	; 1
    2164:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    2166:	a3 e5       	ldi	r26, 0x53	; 83
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e3 e5       	ldi	r30, 0x53	; 83
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	82 60       	ori	r24, 0x02	; 2
    2172:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    2174:	a3 e5       	ldi	r26, 0x53	; 83
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e3 e5       	ldi	r30, 0x53	; 83
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	8b 7f       	andi	r24, 0xFB	; 251
    2180:	8c 93       	st	X, r24
    2182:	57 c0       	rjmp	.+174    	; 0x2232 <PWM_INIT+0x2b4>
	break;
	case 256:
	CLEAR_BIT(TCCR0,CS00);
    2184:	a3 e5       	ldi	r26, 0x53	; 83
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e3 e5       	ldi	r30, 0x53	; 83
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	8e 7f       	andi	r24, 0xFE	; 254
    2190:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01);
    2192:	a3 e5       	ldi	r26, 0x53	; 83
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e3 e5       	ldi	r30, 0x53	; 83
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	8d 7f       	andi	r24, 0xFD	; 253
    219e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    21a0:	a3 e5       	ldi	r26, 0x53	; 83
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e3 e5       	ldi	r30, 0x53	; 83
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	84 60       	ori	r24, 0x04	; 4
    21ac:	8c 93       	st	X, r24
    21ae:	41 c0       	rjmp	.+130    	; 0x2232 <PWM_INIT+0x2b4>
	break;
	case 1024:
	SET_BIT(TCCR0,CS00);
    21b0:	a3 e5       	ldi	r26, 0x53	; 83
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e3 e5       	ldi	r30, 0x53	; 83
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	81 60       	ori	r24, 0x01	; 1
    21bc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01);
    21be:	a3 e5       	ldi	r26, 0x53	; 83
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e3 e5       	ldi	r30, 0x53	; 83
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	8d 7f       	andi	r24, 0xFD	; 253
    21ca:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    21cc:	a3 e5       	ldi	r26, 0x53	; 83
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e3 e5       	ldi	r30, 0x53	; 83
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	84 60       	ori	r24, 0x04	; 4
    21d8:	8c 93       	st	X, r24
    21da:	2b c0       	rjmp	.+86     	; 0x2232 <PWM_INIT+0x2b4>
	break;
	case falling_edge:
	CLEAR_BIT(TCCR0,CS00);
    21dc:	a3 e5       	ldi	r26, 0x53	; 83
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e3 e5       	ldi	r30, 0x53	; 83
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	8e 7f       	andi	r24, 0xFE	; 254
    21e8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    21ea:	a3 e5       	ldi	r26, 0x53	; 83
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e3 e5       	ldi	r30, 0x53	; 83
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	82 60       	ori	r24, 0x02	; 2
    21f6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    21f8:	a3 e5       	ldi	r26, 0x53	; 83
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e3 e5       	ldi	r30, 0x53	; 83
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	84 60       	ori	r24, 0x04	; 4
    2204:	8c 93       	st	X, r24
    2206:	15 c0       	rjmp	.+42     	; 0x2232 <PWM_INIT+0x2b4>
	break;
	case rising_edge:
	SET_BIT(TCCR0,CS00);
    2208:	a3 e5       	ldi	r26, 0x53	; 83
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e3 e5       	ldi	r30, 0x53	; 83
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	81 60       	ori	r24, 0x01	; 1
    2214:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    2216:	a3 e5       	ldi	r26, 0x53	; 83
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e3 e5       	ldi	r30, 0x53	; 83
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	82 60       	ori	r24, 0x02	; 2
    2222:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    2224:	a3 e5       	ldi	r26, 0x53	; 83
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e3 e5       	ldi	r30, 0x53	; 83
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	84 60       	ori	r24, 0x04	; 4
    2230:	8c 93       	st	X, r24
	break;

	}


}
    2232:	28 96       	adiw	r28, 0x08	; 8
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <PWM_SET>:

void PWM_SET( float dutysycle)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	00 d0       	rcall	.+0      	; 0x224a <PWM_SET+0x6>
    224a:	00 d0       	rcall	.+0      	; 0x224c <PWM_SET+0x8>
    224c:	00 d0       	rcall	.+0      	; 0x224e <PWM_SET+0xa>
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	6b 83       	std	Y+3, r22	; 0x03
    2254:	7c 83       	std	Y+4, r23	; 0x04
    2256:	8d 83       	std	Y+5, r24	; 0x05
    2258:	9e 83       	std	Y+6, r25	; 0x06
	unsigned int PulseWidth=(dutysycle*255);
    225a:	6b 81       	ldd	r22, Y+3	; 0x03
    225c:	7c 81       	ldd	r23, Y+4	; 0x04
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	4f e7       	ldi	r20, 0x7F	; 127
    2268:	53 e4       	ldi	r21, 0x43	; 67
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9a 83       	std	Y+2, r25	; 0x02
    2280:	89 83       	std	Y+1, r24	; 0x01
	OCR0=PulseWidth;
    2282:	ec e5       	ldi	r30, 0x5C	; 92
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	80 83       	st	Z, r24




}
    228a:	26 96       	adiw	r28, 0x06	; 6
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <SPI_INIT>:
	char bit3 : 1;

};
 */
void SPI_INIT(unsigned char Interrupt ,unsigned char M_S,unsigned char plo,unsigned char plo2,char frq)
{
    229c:	0f 93       	push	r16
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	2d 97       	sbiw	r28, 0x0d	; 13
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	6a 83       	std	Y+2, r22	; 0x02
    22b6:	4b 83       	std	Y+3, r20	; 0x03
    22b8:	2c 83       	std	Y+4, r18	; 0x04
    22ba:	0d 83       	std	Y+5, r16	; 0x05
	if (Interrupt)
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	88 23       	and	r24, r24
    22c0:	41 f0       	breq	.+16     	; 0x22d2 <SPI_INIT+0x36>
		SET_BIT(SPCR,SPIE);
    22c2:	ad e2       	ldi	r26, 0x2D	; 45
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	ed e2       	ldi	r30, 0x2D	; 45
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	80 68       	ori	r24, 0x80	; 128
    22ce:	8c 93       	st	X, r24
    22d0:	07 c0       	rjmp	.+14     	; 0x22e0 <SPI_INIT+0x44>
	else
		CLEAR_BIT(SPCR,SPIE);
    22d2:	ad e2       	ldi	r26, 0x2D	; 45
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	ed e2       	ldi	r30, 0x2D	; 45
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	8f 77       	andi	r24, 0x7F	; 127
    22de:	8c 93       	st	X, r24

	SET_BIT(SPCR,SPE);
    22e0:	ad e2       	ldi	r26, 0x2D	; 45
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	ed e2       	ldi	r30, 0x2D	; 45
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	80 64       	ori	r24, 0x40	; 64
    22ec:	8c 93       	st	X, r24

	switch(M_S)
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	3d 87       	std	Y+13, r19	; 0x0d
    22f6:	2c 87       	std	Y+12, r18	; 0x0c
    22f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    22fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	39 f0       	breq	.+14     	; 0x230e <SPI_INIT+0x72>
    2300:	2c 85       	ldd	r18, Y+12	; 0x0c
    2302:	3d 85       	ldd	r19, Y+13	; 0x0d
    2304:	21 30       	cpi	r18, 0x01	; 1
    2306:	31 05       	cpc	r19, r1
    2308:	09 f4       	brne	.+2      	; 0x230c <SPI_INIT+0x70>
    230a:	c2 c0       	rjmp	.+388    	; 0x2490 <SPI_INIT+0x1f4>
    230c:	eb c0       	rjmp	.+470    	; 0x24e4 <SPI_INIT+0x248>
	{
	case MASTER:
		SET_BIT(DDRB,PB4);
    230e:	a7 e3       	ldi	r26, 0x37	; 55
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	e7 e3       	ldi	r30, 0x37	; 55
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	80 61       	ori	r24, 0x10	; 16
    231a:	8c 93       	st	X, r24
		SET_BIT(DDRB,PB3);
    231c:	a7 e3       	ldi	r26, 0x37	; 55
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e7 e3       	ldi	r30, 0x37	; 55
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	88 60       	ori	r24, 0x08	; 8
    2328:	8c 93       	st	X, r24

		SET_BIT(DDRB,PB5);
    232a:	a7 e3       	ldi	r26, 0x37	; 55
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e7 e3       	ldi	r30, 0x37	; 55
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	80 62       	ori	r24, 0x20	; 32
    2336:	8c 93       	st	X, r24
		SET_BIT(DDRB,PB7);
    2338:	a7 e3       	ldi	r26, 0x37	; 55
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e7 e3       	ldi	r30, 0x37	; 55
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	80 68       	ori	r24, 0x80	; 128
    2344:	8c 93       	st	X, r24
		CLEAR_BIT(DDRB,PB6);
    2346:	a7 e3       	ldi	r26, 0x37	; 55
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e7 e3       	ldi	r30, 0x37	; 55
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8f 7b       	andi	r24, 0xBF	; 191
    2352:	8c 93       	st	X, r24
		SET_BIT(SPCR,MSTR);
    2354:	ad e2       	ldi	r26, 0x2D	; 45
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	ed e2       	ldi	r30, 0x2D	; 45
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	80 61       	ori	r24, 0x10	; 16
    2360:	8c 93       	st	X, r24
		switch(plo)
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	3b 87       	std	Y+11, r19	; 0x0b
    236a:	2a 87       	std	Y+10, r18	; 0x0a
    236c:	8a 85       	ldd	r24, Y+10	; 0x0a
    236e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	31 f0       	breq	.+12     	; 0x2380 <SPI_INIT+0xe4>
    2374:	2a 85       	ldd	r18, Y+10	; 0x0a
    2376:	3b 85       	ldd	r19, Y+11	; 0x0b
    2378:	21 30       	cpi	r18, 0x01	; 1
    237a:	31 05       	cpc	r19, r1
    237c:	49 f0       	breq	.+18     	; 0x2390 <SPI_INIT+0xf4>
    237e:	0f c0       	rjmp	.+30     	; 0x239e <SPI_INIT+0x102>
		{
		case RISING:
			SET_BIT(SPCR,CPOL);
    2380:	ad e2       	ldi	r26, 0x2D	; 45
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	ed e2       	ldi	r30, 0x2D	; 45
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	88 60       	ori	r24, 0x08	; 8
    238c:	8c 93       	st	X, r24
    238e:	07 c0       	rjmp	.+14     	; 0x239e <SPI_INIT+0x102>
			break;
		case FALLING :
			CLEAR_BIT(SPCR,CPOL);
    2390:	ad e2       	ldi	r26, 0x2D	; 45
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	ed e2       	ldi	r30, 0x2D	; 45
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	87 7f       	andi	r24, 0xF7	; 247
    239c:	8c 93       	st	X, r24
			break;
		}
		switch(plo2)
    239e:	8c 81       	ldd	r24, Y+4	; 0x04
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	39 87       	std	Y+9, r19	; 0x09
    23a6:	28 87       	std	Y+8, r18	; 0x08
    23a8:	88 85       	ldd	r24, Y+8	; 0x08
    23aa:	99 85       	ldd	r25, Y+9	; 0x09
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f0       	breq	.+26     	; 0x23ca <SPI_INIT+0x12e>
    23b0:	28 85       	ldd	r18, Y+8	; 0x08
    23b2:	39 85       	ldd	r19, Y+9	; 0x09
    23b4:	21 30       	cpi	r18, 0x01	; 1
    23b6:	31 05       	cpc	r19, r1
    23b8:	79 f4       	brne	.+30     	; 0x23d8 <SPI_INIT+0x13c>
		{
		case 1:
			SET_BIT(SPCR,CPHA);
    23ba:	ad e2       	ldi	r26, 0x2D	; 45
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	ed e2       	ldi	r30, 0x2D	; 45
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	84 60       	ori	r24, 0x04	; 4
    23c6:	8c 93       	st	X, r24
    23c8:	07 c0       	rjmp	.+14     	; 0x23d8 <SPI_INIT+0x13c>
			break;
		case 0 :
			CLEAR_BIT(SPCR,CPHA);
    23ca:	ad e2       	ldi	r26, 0x2D	; 45
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	ed e2       	ldi	r30, 0x2D	; 45
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	8b 7f       	andi	r24, 0xFB	; 251
    23d6:	8c 93       	st	X, r24
			break;
		}

		switch (frq)
    23d8:	8d 81       	ldd	r24, Y+5	; 0x05
    23da:	28 2f       	mov	r18, r24
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	3f 83       	std	Y+7, r19	; 0x07
    23e0:	2e 83       	std	Y+6, r18	; 0x06
    23e2:	8e 81       	ldd	r24, Y+6	; 0x06
    23e4:	9f 81       	ldd	r25, Y+7	; 0x07
    23e6:	80 31       	cpi	r24, 0x10	; 16
    23e8:	91 05       	cpc	r25, r1
    23ea:	29 f1       	breq	.+74     	; 0x2436 <SPI_INIT+0x19a>
    23ec:	2e 81       	ldd	r18, Y+6	; 0x06
    23ee:	3f 81       	ldd	r19, Y+7	; 0x07
    23f0:	21 31       	cpi	r18, 0x11	; 17
    23f2:	31 05       	cpc	r19, r1
    23f4:	34 f4       	brge	.+12     	; 0x2402 <SPI_INIT+0x166>
    23f6:	8e 81       	ldd	r24, Y+6	; 0x06
    23f8:	9f 81       	ldd	r25, Y+7	; 0x07
    23fa:	84 30       	cpi	r24, 0x04	; 4
    23fc:	91 05       	cpc	r25, r1
    23fe:	61 f0       	breq	.+24     	; 0x2418 <SPI_INIT+0x17c>
    2400:	71 c0       	rjmp	.+226    	; 0x24e4 <SPI_INIT+0x248>
    2402:	2e 81       	ldd	r18, Y+6	; 0x06
    2404:	3f 81       	ldd	r19, Y+7	; 0x07
    2406:	20 34       	cpi	r18, 0x40	; 64
    2408:	31 05       	cpc	r19, r1
    240a:	21 f1       	breq	.+72     	; 0x2454 <SPI_INIT+0x1b8>
    240c:	8e 81       	ldd	r24, Y+6	; 0x06
    240e:	9f 81       	ldd	r25, Y+7	; 0x07
    2410:	80 38       	cpi	r24, 0x80	; 128
    2412:	91 05       	cpc	r25, r1
    2414:	71 f1       	breq	.+92     	; 0x2472 <SPI_INIT+0x1d6>
    2416:	66 c0       	rjmp	.+204    	; 0x24e4 <SPI_INIT+0x248>
		{
		case 4:
			CLEAR_BIT(SPCR,SPR0);
    2418:	ad e2       	ldi	r26, 0x2D	; 45
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	ed e2       	ldi	r30, 0x2D	; 45
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	8e 7f       	andi	r24, 0xFE	; 254
    2424:	8c 93       	st	X, r24
			CLEAR_BIT(SPCR,SPR1);
    2426:	ad e2       	ldi	r26, 0x2D	; 45
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	ed e2       	ldi	r30, 0x2D	; 45
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	8d 7f       	andi	r24, 0xFD	; 253
    2432:	8c 93       	st	X, r24
    2434:	57 c0       	rjmp	.+174    	; 0x24e4 <SPI_INIT+0x248>
			break;
		case 16:
			SET_BIT(SPCR,SPR0);
    2436:	ad e2       	ldi	r26, 0x2D	; 45
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	ed e2       	ldi	r30, 0x2D	; 45
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	81 60       	ori	r24, 0x01	; 1
    2442:	8c 93       	st	X, r24
			CLEAR_BIT(SPCR,SPR1);
    2444:	ad e2       	ldi	r26, 0x2D	; 45
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	ed e2       	ldi	r30, 0x2D	; 45
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	8d 7f       	andi	r24, 0xFD	; 253
    2450:	8c 93       	st	X, r24
    2452:	48 c0       	rjmp	.+144    	; 0x24e4 <SPI_INIT+0x248>
			break;
		case 64:
			CLEAR_BIT(SPCR,SPR0);
    2454:	ad e2       	ldi	r26, 0x2D	; 45
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	ed e2       	ldi	r30, 0x2D	; 45
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	8e 7f       	andi	r24, 0xFE	; 254
    2460:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    2462:	ad e2       	ldi	r26, 0x2D	; 45
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	ed e2       	ldi	r30, 0x2D	; 45
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	82 60       	ori	r24, 0x02	; 2
    246e:	8c 93       	st	X, r24
    2470:	39 c0       	rjmp	.+114    	; 0x24e4 <SPI_INIT+0x248>
			break;
		case 128:
			SET_BIT(SPCR,SPR0);
    2472:	ad e2       	ldi	r26, 0x2D	; 45
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	ed e2       	ldi	r30, 0x2D	; 45
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	81 60       	ori	r24, 0x01	; 1
    247e:	8c 93       	st	X, r24
			SET_BIT(SPCR,SPR1);
    2480:	ad e2       	ldi	r26, 0x2D	; 45
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	ed e2       	ldi	r30, 0x2D	; 45
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	82 60       	ori	r24, 0x02	; 2
    248c:	8c 93       	st	X, r24
    248e:	2a c0       	rjmp	.+84     	; 0x24e4 <SPI_INIT+0x248>
			break;

		}
		break;
	case SLAVE :
		CLEAR_BIT(DDRB,PB4);
    2490:	a7 e3       	ldi	r26, 0x37	; 55
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e7 e3       	ldi	r30, 0x37	; 55
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	8f 7e       	andi	r24, 0xEF	; 239
    249c:	8c 93       	st	X, r24
		CLEAR_BIT(DDRB,PB3);
    249e:	a7 e3       	ldi	r26, 0x37	; 55
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e7 e3       	ldi	r30, 0x37	; 55
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	87 7f       	andi	r24, 0xF7	; 247
    24aa:	8c 93       	st	X, r24
		CLEAR_BIT(DDRB,PB5);
    24ac:	a7 e3       	ldi	r26, 0x37	; 55
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e7 e3       	ldi	r30, 0x37	; 55
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	8f 7d       	andi	r24, 0xDF	; 223
    24b8:	8c 93       	st	X, r24
		CLEAR_BIT(DDRB,PB7);
    24ba:	a7 e3       	ldi	r26, 0x37	; 55
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e7 e3       	ldi	r30, 0x37	; 55
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	8f 77       	andi	r24, 0x7F	; 127
    24c6:	8c 93       	st	X, r24
		SET_BIT(DDRB,PB6);
    24c8:	a7 e3       	ldi	r26, 0x37	; 55
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e7 e3       	ldi	r30, 0x37	; 55
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	80 64       	ori	r24, 0x40	; 64
    24d4:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR,MSTR);
    24d6:	ad e2       	ldi	r26, 0x2D	; 45
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	ed e2       	ldi	r30, 0x2D	; 45
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8f 7e       	andi	r24, 0xEF	; 239
    24e2:	8c 93       	st	X, r24
		break;
	}

}
    24e4:	2d 96       	adiw	r28, 0x0d	; 13
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	0f 91       	pop	r16
    24f6:	08 95       	ret

000024f8 <SPI_TARNSIT>:


void SPI_TARNSIT(char data,char num)
{
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <SPI_TARNSIT+0x6>
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	6a 83       	std	Y+2, r22	; 0x02
	if (num==1)
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	81 30       	cpi	r24, 0x01	; 1
    250a:	71 f4       	brne	.+28     	; 0x2528 <SPI_TARNSIT+0x30>
	{
		SET_BIT(PORTB,PB3);
    250c:	a8 e3       	ldi	r26, 0x38	; 56
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	e8 e3       	ldi	r30, 0x38	; 56
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	88 60       	ori	r24, 0x08	; 8
    2518:	8c 93       	st	X, r24
		CLEAR_BIT(PORTB,PB4);
    251a:	a8 e3       	ldi	r26, 0x38	; 56
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	e8 e3       	ldi	r30, 0x38	; 56
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	8f 7e       	andi	r24, 0xEF	; 239
    2526:	8c 93       	st	X, r24
	}
	if (num==2)
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	82 30       	cpi	r24, 0x02	; 2
    252c:	71 f4       	brne	.+28     	; 0x254a <SPI_TARNSIT+0x52>
	{
		SET_BIT(PORTB,PB4);
    252e:	a8 e3       	ldi	r26, 0x38	; 56
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	e8 e3       	ldi	r30, 0x38	; 56
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	80 61       	ori	r24, 0x10	; 16
    253a:	8c 93       	st	X, r24
		CLEAR_BIT(PORTB,PB3);
    253c:	a8 e3       	ldi	r26, 0x38	; 56
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e8 e3       	ldi	r30, 0x38	; 56
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	87 7f       	andi	r24, 0xF7	; 247
    2548:	8c 93       	st	X, r24

	}
	SPDR=data;
    254a:	ef e2       	ldi	r30, 0x2F	; 47
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	80 83       	st	Z, r24
	while(! READ_BIT(SPSR,SPIF));
    2552:	ee e2       	ldi	r30, 0x2E	; 46
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	88 23       	and	r24, r24
    255a:	dc f7       	brge	.-10     	; 0x2552 <SPI_TARNSIT+0x5a>
}
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <SPI_receive>:

char SPI_receive(void)
{
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62

	while(! READ_BIT(SPSR,SPIF));
    256e:	ee e2       	ldi	r30, 0x2E	; 46
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	88 23       	and	r24, r24
    2576:	dc f7       	brge	.-10     	; 0x256e <SPI_receive+0x8>
	return SPDR;
    2578:	ef e2       	ldi	r30, 0x2F	; 47
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
}
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <F90_Void_Timer0_init>:

volatile unsigned long Timer0_counter=0; // as this variable is operated on only using hardware we prevent optomization on it
char reg ;

void F90_Void_Timer0_init(unsigned int clk,unsigned char overflowOrCompare )
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	00 d0       	rcall	.+0      	; 0x258a <F90_Void_Timer0_init+0x6>
    258a:	00 d0       	rcall	.+0      	; 0x258c <F90_Void_Timer0_init+0x8>
    258c:	0f 92       	push	r0
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	9a 83       	std	Y+2, r25	; 0x02
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	6b 83       	std	Y+3, r22	; 0x03
	switch(clk)
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	9d 83       	std	Y+5, r25	; 0x05
    259e:	8c 83       	std	Y+4, r24	; 0x04
    25a0:	8c 81       	ldd	r24, Y+4	; 0x04
    25a2:	9d 81       	ldd	r25, Y+5	; 0x05
    25a4:	21 e0       	ldi	r18, 0x01	; 1
    25a6:	89 30       	cpi	r24, 0x09	; 9
    25a8:	92 07       	cpc	r25, r18
    25aa:	09 f4       	brne	.+2      	; 0x25ae <F90_Void_Timer0_init+0x2a>
    25ac:	a3 c0       	rjmp	.+326    	; 0x26f4 <F90_Void_Timer0_init+0x170>
    25ae:	8c 81       	ldd	r24, Y+4	; 0x04
    25b0:	9d 81       	ldd	r25, Y+5	; 0x05
    25b2:	21 e0       	ldi	r18, 0x01	; 1
    25b4:	8a 30       	cpi	r24, 0x0A	; 10
    25b6:	92 07       	cpc	r25, r18
    25b8:	f0 f4       	brcc	.+60     	; 0x25f6 <F90_Void_Timer0_init+0x72>
    25ba:	8c 81       	ldd	r24, Y+4	; 0x04
    25bc:	9d 81       	ldd	r25, Y+5	; 0x05
    25be:	81 33       	cpi	r24, 0x31	; 49
    25c0:	91 05       	cpc	r25, r1
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <F90_Void_Timer0_init+0x42>
    25c4:	52 c0       	rjmp	.+164    	; 0x266a <F90_Void_Timer0_init+0xe6>
    25c6:	8c 81       	ldd	r24, Y+4	; 0x04
    25c8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ca:	82 33       	cpi	r24, 0x32	; 50
    25cc:	91 05       	cpc	r25, r1
    25ce:	30 f4       	brcc	.+12     	; 0x25dc <F90_Void_Timer0_init+0x58>
    25d0:	8c 81       	ldd	r24, Y+4	; 0x04
    25d2:	9d 81       	ldd	r25, Y+5	; 0x05
    25d4:	80 33       	cpi	r24, 0x30	; 48
    25d6:	91 05       	cpc	r25, r1
    25d8:	89 f1       	breq	.+98     	; 0x263c <F90_Void_Timer0_init+0xb8>
    25da:	e7 c0       	rjmp	.+462    	; 0x27aa <F90_Void_Timer0_init+0x226>
    25dc:	8c 81       	ldd	r24, Y+4	; 0x04
    25de:	9d 81       	ldd	r25, Y+5	; 0x05
    25e0:	88 33       	cpi	r24, 0x38	; 56
    25e2:	91 05       	cpc	r25, r1
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <F90_Void_Timer0_init+0x64>
    25e6:	58 c0       	rjmp	.+176    	; 0x2698 <F90_Void_Timer0_init+0x114>
    25e8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ea:	9d 81       	ldd	r25, Y+5	; 0x05
    25ec:	80 34       	cpi	r24, 0x40	; 64
    25ee:	91 05       	cpc	r25, r1
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <F90_Void_Timer0_init+0x70>
    25f2:	69 c0       	rjmp	.+210    	; 0x26c6 <F90_Void_Timer0_init+0x142>
    25f4:	da c0       	rjmp	.+436    	; 0x27aa <F90_Void_Timer0_init+0x226>
    25f6:	8c 81       	ldd	r24, Y+4	; 0x04
    25f8:	9d 81       	ldd	r25, Y+5	; 0x05
    25fa:	2f e5       	ldi	r18, 0x5F	; 95
    25fc:	86 34       	cpi	r24, 0x46	; 70
    25fe:	92 07       	cpc	r25, r18
    2600:	09 f4       	brne	.+2      	; 0x2604 <F90_Void_Timer0_init+0x80>
    2602:	a6 c0       	rjmp	.+332    	; 0x2750 <F90_Void_Timer0_init+0x1cc>
    2604:	8c 81       	ldd	r24, Y+4	; 0x04
    2606:	9d 81       	ldd	r25, Y+5	; 0x05
    2608:	2f e5       	ldi	r18, 0x5F	; 95
    260a:	87 34       	cpi	r24, 0x47	; 71
    260c:	92 07       	cpc	r25, r18
    260e:	40 f4       	brcc	.+16     	; 0x2620 <F90_Void_Timer0_init+0x9c>
    2610:	8c 81       	ldd	r24, Y+4	; 0x04
    2612:	9d 81       	ldd	r25, Y+5	; 0x05
    2614:	24 e0       	ldi	r18, 0x04	; 4
    2616:	80 30       	cpi	r24, 0x00	; 0
    2618:	92 07       	cpc	r25, r18
    261a:	09 f4       	brne	.+2      	; 0x261e <F90_Void_Timer0_init+0x9a>
    261c:	82 c0       	rjmp	.+260    	; 0x2722 <F90_Void_Timer0_init+0x19e>
    261e:	c5 c0       	rjmp	.+394    	; 0x27aa <F90_Void_Timer0_init+0x226>
    2620:	8c 81       	ldd	r24, Y+4	; 0x04
    2622:	9d 81       	ldd	r25, Y+5	; 0x05
    2624:	2f e5       	ldi	r18, 0x5F	; 95
    2626:	82 35       	cpi	r24, 0x52	; 82
    2628:	92 07       	cpc	r25, r18
    262a:	09 f4       	brne	.+2      	; 0x262e <F90_Void_Timer0_init+0xaa>
    262c:	a8 c0       	rjmp	.+336    	; 0x277e <F90_Void_Timer0_init+0x1fa>
    262e:	8c 81       	ldd	r24, Y+4	; 0x04
    2630:	9d 81       	ldd	r25, Y+5	; 0x05
    2632:	2e e6       	ldi	r18, 0x6E	; 110
    2634:	8f 36       	cpi	r24, 0x6F	; 111
    2636:	92 07       	cpc	r25, r18
    2638:	09 f0       	breq	.+2      	; 0x263c <F90_Void_Timer0_init+0xb8>
    263a:	b7 c0       	rjmp	.+366    	; 0x27aa <F90_Void_Timer0_init+0x226>
	{
	case '0':
	case 'no':

		CLEAR_BIT(reg,CS01);
    263c:	80 91 b4 01 	lds	r24, 0x01B4
    2640:	8d 7f       	andi	r24, 0xFD	; 253
    2642:	80 93 b4 01 	sts	0x01B4, r24
		CLEAR_BIT(reg,CS00);
    2646:	80 91 b4 01 	lds	r24, 0x01B4
    264a:	8e 7f       	andi	r24, 0xFE	; 254
    264c:	80 93 b4 01 	sts	0x01B4, r24
		CLEAR_BIT(reg,CS02);
    2650:	80 91 b4 01 	lds	r24, 0x01B4
    2654:	8b 7f       	andi	r24, 0xFB	; 251
    2656:	80 93 b4 01 	sts	0x01B4, r24
		TIMER0_COMTROL_REG=reg;
    265a:	e3 e5       	ldi	r30, 0x53	; 83
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 91 b4 01 	lds	r24, 0x01B4
    2662:	80 83       	st	Z, r24
		reg=0;
    2664:	10 92 b4 01 	sts	0x01B4, r1
    2668:	a0 c0       	rjmp	.+320    	; 0x27aa <F90_Void_Timer0_init+0x226>
		break;
	case '1':
		CLEAR_BIT(reg,CS01);
    266a:	80 91 b4 01 	lds	r24, 0x01B4
    266e:	8d 7f       	andi	r24, 0xFD	; 253
    2670:	80 93 b4 01 	sts	0x01B4, r24
		SET_BIT(reg,CS00);
    2674:	80 91 b4 01 	lds	r24, 0x01B4
    2678:	81 60       	ori	r24, 0x01	; 1
    267a:	80 93 b4 01 	sts	0x01B4, r24
		CLEAR_BIT(reg,CS02);
    267e:	80 91 b4 01 	lds	r24, 0x01B4
    2682:	8b 7f       	andi	r24, 0xFB	; 251
    2684:	80 93 b4 01 	sts	0x01B4, r24
		TIMER0_COMTROL_REG=reg;
    2688:	e3 e5       	ldi	r30, 0x53	; 83
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 91 b4 01 	lds	r24, 0x01B4
    2690:	80 83       	st	Z, r24
		reg=0;
    2692:	10 92 b4 01 	sts	0x01B4, r1
    2696:	89 c0       	rjmp	.+274    	; 0x27aa <F90_Void_Timer0_init+0x226>
		break;
	case '8':
		SET_BIT(reg,CS01);
    2698:	80 91 b4 01 	lds	r24, 0x01B4
    269c:	82 60       	ori	r24, 0x02	; 2
    269e:	80 93 b4 01 	sts	0x01B4, r24
		CLEAR_BIT(reg,CS00);
    26a2:	80 91 b4 01 	lds	r24, 0x01B4
    26a6:	8e 7f       	andi	r24, 0xFE	; 254
    26a8:	80 93 b4 01 	sts	0x01B4, r24
		CLEAR_BIT(reg,CS02);
    26ac:	80 91 b4 01 	lds	r24, 0x01B4
    26b0:	8b 7f       	andi	r24, 0xFB	; 251
    26b2:	80 93 b4 01 	sts	0x01B4, r24
		TIMER0_COMTROL_REG=reg;
    26b6:	e3 e5       	ldi	r30, 0x53	; 83
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 91 b4 01 	lds	r24, 0x01B4
    26be:	80 83       	st	Z, r24
		reg=0;
    26c0:	10 92 b4 01 	sts	0x01B4, r1
    26c4:	72 c0       	rjmp	.+228    	; 0x27aa <F90_Void_Timer0_init+0x226>
		break;
	case 64:
		SET_BIT(reg,CS01);
    26c6:	80 91 b4 01 	lds	r24, 0x01B4
    26ca:	82 60       	ori	r24, 0x02	; 2
    26cc:	80 93 b4 01 	sts	0x01B4, r24
		SET_BIT(reg,CS00);
    26d0:	80 91 b4 01 	lds	r24, 0x01B4
    26d4:	81 60       	ori	r24, 0x01	; 1
    26d6:	80 93 b4 01 	sts	0x01B4, r24
		CLEAR_BIT(reg,CS02);
    26da:	80 91 b4 01 	lds	r24, 0x01B4
    26de:	8b 7f       	andi	r24, 0xFB	; 251
    26e0:	80 93 b4 01 	sts	0x01B4, r24
		TIMER0_COMTROL_REG=reg;
    26e4:	e3 e5       	ldi	r30, 0x53	; 83
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 91 b4 01 	lds	r24, 0x01B4
    26ec:	80 83       	st	Z, r24
		reg=0;
    26ee:	10 92 b4 01 	sts	0x01B4, r1
    26f2:	5b c0       	rjmp	.+182    	; 0x27aa <F90_Void_Timer0_init+0x226>
		break;
	case 265:
		CLEAR_BIT(reg,CS01);
    26f4:	80 91 b4 01 	lds	r24, 0x01B4
    26f8:	8d 7f       	andi	r24, 0xFD	; 253
    26fa:	80 93 b4 01 	sts	0x01B4, r24
		CLEAR_BIT(reg,CS00);
    26fe:	80 91 b4 01 	lds	r24, 0x01B4
    2702:	8e 7f       	andi	r24, 0xFE	; 254
    2704:	80 93 b4 01 	sts	0x01B4, r24
		SET_BIT(reg,CS02);
    2708:	80 91 b4 01 	lds	r24, 0x01B4
    270c:	84 60       	ori	r24, 0x04	; 4
    270e:	80 93 b4 01 	sts	0x01B4, r24
		TIMER0_COMTROL_REG=reg;
    2712:	e3 e5       	ldi	r30, 0x53	; 83
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 91 b4 01 	lds	r24, 0x01B4
    271a:	80 83       	st	Z, r24
		reg=0;
    271c:	10 92 b4 01 	sts	0x01B4, r1
    2720:	44 c0       	rjmp	.+136    	; 0x27aa <F90_Void_Timer0_init+0x226>
		break;
	case 1024:
		CLEAR_BIT(reg,CS01);
    2722:	80 91 b4 01 	lds	r24, 0x01B4
    2726:	8d 7f       	andi	r24, 0xFD	; 253
    2728:	80 93 b4 01 	sts	0x01B4, r24
		CLEAR_BIT(reg,CS00);
    272c:	80 91 b4 01 	lds	r24, 0x01B4
    2730:	8e 7f       	andi	r24, 0xFE	; 254
    2732:	80 93 b4 01 	sts	0x01B4, r24
		CLEAR_BIT(reg,CS02);
    2736:	80 91 b4 01 	lds	r24, 0x01B4
    273a:	8b 7f       	andi	r24, 0xFB	; 251
    273c:	80 93 b4 01 	sts	0x01B4, r24
		TIMER0_COMTROL_REG=reg;
    2740:	e3 e5       	ldi	r30, 0x53	; 83
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 91 b4 01 	lds	r24, 0x01B4
    2748:	80 83       	st	Z, r24
		reg=0;
    274a:	10 92 b4 01 	sts	0x01B4, r1
    274e:	2d c0       	rjmp	.+90     	; 0x27aa <F90_Void_Timer0_init+0x226>
		break;
	case 'E_F':
		SET_BIT(reg,CS01);
    2750:	80 91 b4 01 	lds	r24, 0x01B4
    2754:	82 60       	ori	r24, 0x02	; 2
    2756:	80 93 b4 01 	sts	0x01B4, r24
		CLEAR_BIT(reg,CS00);
    275a:	80 91 b4 01 	lds	r24, 0x01B4
    275e:	8e 7f       	andi	r24, 0xFE	; 254
    2760:	80 93 b4 01 	sts	0x01B4, r24
		SET_BIT(reg,CS02);
    2764:	80 91 b4 01 	lds	r24, 0x01B4
    2768:	84 60       	ori	r24, 0x04	; 4
    276a:	80 93 b4 01 	sts	0x01B4, r24
		TIMER0_COMTROL_REG=reg;
    276e:	e3 e5       	ldi	r30, 0x53	; 83
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 91 b4 01 	lds	r24, 0x01B4
    2776:	80 83       	st	Z, r24
		reg=0;
    2778:	10 92 b4 01 	sts	0x01B4, r1
    277c:	16 c0       	rjmp	.+44     	; 0x27aa <F90_Void_Timer0_init+0x226>
		break;
	case 'E_R':
		SET_BIT(reg,CS01);
    277e:	80 91 b4 01 	lds	r24, 0x01B4
    2782:	82 60       	ori	r24, 0x02	; 2
    2784:	80 93 b4 01 	sts	0x01B4, r24
		SET_BIT(reg,CS00);
    2788:	80 91 b4 01 	lds	r24, 0x01B4
    278c:	81 60       	ori	r24, 0x01	; 1
    278e:	80 93 b4 01 	sts	0x01B4, r24
		SET_BIT(reg,CS02);
    2792:	80 91 b4 01 	lds	r24, 0x01B4
    2796:	84 60       	ori	r24, 0x04	; 4
    2798:	80 93 b4 01 	sts	0x01B4, r24
		TIMER0_COMTROL_REG=reg;
    279c:	e3 e5       	ldi	r30, 0x53	; 83
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 91 b4 01 	lds	r24, 0x01B4
    27a4:	80 83       	st	Z, r24
		reg=0;
    27a6:	10 92 b4 01 	sts	0x01B4, r1
		break;
	}
	if (overflowOrCompare)
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	88 23       	and	r24, r24
    27ae:	79 f0       	breq	.+30     	; 0x27ce <F90_Void_Timer0_init+0x24a>
	{
	SET_BIT(TIMER0_INT_REG     ,  TOIE0);
    27b0:	a9 e5       	ldi	r26, 0x59	; 89
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e9 e5       	ldi	r30, 0x59	; 89
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	81 60       	ori	r24, 0x01	; 1
    27bc:	8c 93       	st	X, r24
	CLEAR_BIT(TIMER0_INT_REG     ,  OCIE0);
    27be:	a9 e5       	ldi	r26, 0x59	; 89
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e9 e5       	ldi	r30, 0x59	; 89
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	8d 7f       	andi	r24, 0xFD	; 253
    27ca:	8c 93       	st	X, r24
    27cc:	07 c0       	rjmp	.+14     	; 0x27dc <F90_Void_Timer0_init+0x258>
	}
	else
	SET_BIT(TIMER0_INT_REG     ,  OCIE0);
    27ce:	a9 e5       	ldi	r26, 0x59	; 89
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	e9 e5       	ldi	r30, 0x59	; 89
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	82 60       	ori	r24, 0x02	; 2
    27da:	8c 93       	st	X, r24
	CLEAR_BIT(TIMER0_INT_REG     ,  TOIE0);
    27dc:	a9 e5       	ldi	r26, 0x59	; 89
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	e9 e5       	ldi	r30, 0x59	; 89
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	8e 7f       	andi	r24, 0xFE	; 254
    27e8:	8c 93       	st	X, r24

	sei();                                    //enable global service interrupt
    27ea:	78 94       	sei


}
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <F90_Void_Timer0_init_normal>:


void F90_Void_Timer0_init_normal(unsigned char com01 ,unsigned char com00)
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	00 d0       	rcall	.+0      	; 0x2802 <F90_Void_Timer0_init_normal+0x6>
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
    2806:	89 83       	std	Y+1, r24	; 0x01
    2808:	6a 83       	std	Y+2, r22	; 0x02
	CLEAR_BIT(TIMER0_COMTROL_REG,WGM00) ;
    280a:	a3 e5       	ldi	r26, 0x53	; 83
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	e3 e5       	ldi	r30, 0x53	; 83
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	8f 7b       	andi	r24, 0xBF	; 191
    2816:	8c 93       	st	X, r24
	CLEAR_BIT(TIMER0_COMTROL_REG,WGM01) ;
    2818:	a3 e5       	ldi	r26, 0x53	; 83
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e3 e5       	ldi	r30, 0x53	; 83
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	87 7f       	andi	r24, 0xF7	; 247
    2824:	8c 93       	st	X, r24
if ((com01=0)&&(com00=0))
    2826:	19 82       	std	Y+1, r1	; 0x01
{
	CLEAR_BIT(TIMER0_COMTROL_REG,COM00) ;
	CLEAR_BIT(TIMER0_COMTROL_REG,COM01) ;

}
else if ((com01=0)&&(com00=1))
    2828:	19 82       	std	Y+1, r1	; 0x01
{
	SET_BIT(TIMER0_COMTROL_REG,COM00) ;
	CLEAR_BIT(TIMER0_COMTROL_REG,COM01) ;
}

else if ((com01=1)&&(com00=0))
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	1a 82       	std	Y+2, r1	; 0x02
	CLEAR_BIT(TIMER0_COMTROL_REG,COM00) ;
	SET_BIT(TIMER0_COMTROL_REG,COM01) ;
}
else
{
	SET_BIT(TIMER0_COMTROL_REG,COM00) ;
    2830:	a3 e5       	ldi	r26, 0x53	; 83
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	e3 e5       	ldi	r30, 0x53	; 83
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	80 61       	ori	r24, 0x10	; 16
    283c:	8c 93       	st	X, r24
	SET_BIT(TIMER0_COMTROL_REG,COM01) ;
    283e:	a3 e5       	ldi	r26, 0x53	; 83
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	e3 e5       	ldi	r30, 0x53	; 83
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	80 62       	ori	r24, 0x20	; 32
    284a:	8c 93       	st	X, r24
}

}
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <F90_Void_Timer0_init_pwm>:

void F90_Void_Timer0_init_pwm(unsigned char com01 ,unsigned char com00)
{
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	00 d0       	rcall	.+0      	; 0x285c <F90_Void_Timer0_init_pwm+0x6>
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	6a 83       	std	Y+2, r22	; 0x02

	SET_BIT(TIMER0_COMTROL_REG , WGM00); //MAKING 64 PRESCALLER
    2864:	a3 e5       	ldi	r26, 0x53	; 83
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e3 e5       	ldi	r30, 0x53	; 83
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	80 64       	ori	r24, 0x40	; 64
    2870:	8c 93       	st	X, r24
	CLEAR_BIT(TIMER0_INT_REG     ,  WGM01);
    2872:	a9 e5       	ldi	r26, 0x59	; 89
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	e9 e5       	ldi	r30, 0x59	; 89
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	87 7f       	andi	r24, 0xF7	; 247
    287e:	8c 93       	st	X, r24

	if ((com01=0)&&(com00=0))
    2880:	19 82       	std	Y+1, r1	; 0x01
	{
		CLEAR_BIT(TIMER0_COMTROL_REG,COM00) ;
		CLEAR_BIT(TIMER0_COMTROL_REG,COM01) ;

	}
	else if ((com01=0)&&(com00=1))
    2882:	19 82       	std	Y+1, r1	; 0x01
	{
		SET_BIT(TIMER0_COMTROL_REG,COM00) ;
		CLEAR_BIT(TIMER0_COMTROL_REG,COM01) ;
	}

	else if ((com01=1)&&(com00=0))
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	1a 82       	std	Y+2, r1	; 0x02
		CLEAR_BIT(TIMER0_COMTROL_REG,COM00) ;
		SET_BIT(TIMER0_COMTROL_REG,COM01) ;
	}
	else
	{
		SET_BIT(TIMER0_COMTROL_REG,COM00) ;
    288a:	a3 e5       	ldi	r26, 0x53	; 83
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e3 e5       	ldi	r30, 0x53	; 83
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	80 61       	ori	r24, 0x10	; 16
    2896:	8c 93       	st	X, r24
		SET_BIT(TIMER0_COMTROL_REG,COM01) ;
    2898:	a3 e5       	ldi	r26, 0x53	; 83
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	e3 e5       	ldi	r30, 0x53	; 83
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	80 62       	ori	r24, 0x20	; 32
    28a4:	8c 93       	st	X, r24
	}

}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	08 95       	ret

000028b0 <F90_Void_Timer0_init_FastPwm>:
void F90_Void_Timer0_init_FastPwm(unsigned char com01 ,unsigned char com00)
{
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	00 d0       	rcall	.+0      	; 0x28b6 <F90_Void_Timer0_init_FastPwm+0x6>
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	6a 83       	std	Y+2, r22	; 0x02

	SET_BIT(TIMER0_COMTROL_REG , WGM00); //MAKING 64 PRESCALLER
    28be:	a3 e5       	ldi	r26, 0x53	; 83
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e3 e5       	ldi	r30, 0x53	; 83
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	80 64       	ori	r24, 0x40	; 64
    28ca:	8c 93       	st	X, r24
	SET_BIT(TIMER0_INT_REG     ,  WGM01);
    28cc:	a9 e5       	ldi	r26, 0x59	; 89
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	e9 e5       	ldi	r30, 0x59	; 89
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	88 60       	ori	r24, 0x08	; 8
    28d8:	8c 93       	st	X, r24
	if ((com01=0)&&(com00=0))
    28da:	19 82       	std	Y+1, r1	; 0x01
	{
		CLEAR_BIT(TIMER0_COMTROL_REG,COM00) ;
		CLEAR_BIT(TIMER0_COMTROL_REG,COM01) ;

	}
	else if ((com01=0)&&(com00=1))
    28dc:	19 82       	std	Y+1, r1	; 0x01
	{
		SET_BIT(TIMER0_COMTROL_REG,COM00) ;
		CLEAR_BIT(TIMER0_COMTROL_REG,COM01) ;
	}

	else if ((com01=1)&&(com00=0))
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	89 83       	std	Y+1, r24	; 0x01
    28e2:	1a 82       	std	Y+2, r1	; 0x02
		CLEAR_BIT(TIMER0_COMTROL_REG,COM00) ;
		SET_BIT(TIMER0_COMTROL_REG,COM01) ;
	}
	else
	{
		SET_BIT(TIMER0_COMTROL_REG,COM00) ;
    28e4:	a3 e5       	ldi	r26, 0x53	; 83
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e3 e5       	ldi	r30, 0x53	; 83
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	80 61       	ori	r24, 0x10	; 16
    28f0:	8c 93       	st	X, r24
		SET_BIT(TIMER0_COMTROL_REG,COM01) ;
    28f2:	a3 e5       	ldi	r26, 0x53	; 83
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	e3 e5       	ldi	r30, 0x53	; 83
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	80 62       	ori	r24, 0x20	; 32
    28fe:	8c 93       	st	X, r24
	}


}
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <F90_Void_Timer0_init_ctc>:


void F90_Void_Timer0_init_ctc()
{
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT(TIMER0_COMTROL_REG , WGM00); //MAKING 64 PRESCALLER
    2912:	a3 e5       	ldi	r26, 0x53	; 83
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	e3 e5       	ldi	r30, 0x53	; 83
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	8f 7b       	andi	r24, 0xBF	; 191
    291e:	8c 93       	st	X, r24
	SET_BIT(TIMER0_INT_REG     ,  WGM01);
    2920:	a9 e5       	ldi	r26, 0x59	; 89
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e9 e5       	ldi	r30, 0x59	; 89
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	88 60       	ori	r24, 0x08	; 8
    292c:	8c 93       	st	X, r24


}
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <F90_VOID_INIT>:
#include "../MCAL/F90_UART.h"
#include <avr/io.h>
unsigned char i;
unsigned char reg;
void F90_VOID_INIT(unsigned long baud)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	28 97       	sbiw	r28, 0x08	; 8
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	6d 83       	std	Y+5, r22	; 0x05
    294a:	7e 83       	std	Y+6, r23	; 0x06
    294c:	8f 83       	std	Y+7, r24	; 0x07
    294e:	98 87       	std	Y+8, r25	; 0x08

	unsigned long baudrate =(F_CPU/(16*baud) )-1;
    2950:	8d 81       	ldd	r24, Y+5	; 0x05
    2952:	9e 81       	ldd	r25, Y+6	; 0x06
    2954:	af 81       	ldd	r26, Y+7	; 0x07
    2956:	b8 85       	ldd	r27, Y+8	; 0x08
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	aa 1f       	adc	r26, r26
    295e:	bb 1f       	adc	r27, r27
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	aa 1f       	adc	r26, r26
    2966:	bb 1f       	adc	r27, r27
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	aa 1f       	adc	r26, r26
    296e:	bb 1f       	adc	r27, r27
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	aa 1f       	adc	r26, r26
    2976:	bb 1f       	adc	r27, r27
    2978:	9c 01       	movw	r18, r24
    297a:	ad 01       	movw	r20, r26
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	92 e1       	ldi	r25, 0x12	; 18
    2980:	aa e7       	ldi	r26, 0x7A	; 122
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <__udivmodsi4>
    298c:	da 01       	movw	r26, r20
    298e:	c9 01       	movw	r24, r18
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	a1 09       	sbc	r26, r1
    2994:	b1 09       	sbc	r27, r1
    2996:	89 83       	std	Y+1, r24	; 0x01
    2998:	9a 83       	std	Y+2, r25	; 0x02
    299a:	ab 83       	std	Y+3, r26	; 0x03
    299c:	bc 83       	std	Y+4, r27	; 0x04
	UCSRC&=~(1<<URSEL);
    299e:	a0 e4       	ldi	r26, 0x40	; 64
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e0 e4       	ldi	r30, 0x40	; 64
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	8f 77       	andi	r24, 0x7F	; 127
    29aa:	8c 93       	st	X, r24
	UBRRL=(unsigned char)baudrate;
    29ac:	e9 e2       	ldi	r30, 0x29	; 41
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	80 83       	st	Z, r24
	UBRRH=(unsigned char)(baudrate>>8);
    29b4:	e0 e4       	ldi	r30, 0x40	; 64
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	9a 81       	ldd	r25, Y+2	; 0x02
    29bc:	ab 81       	ldd	r26, Y+3	; 0x03
    29be:	bc 81       	ldd	r27, Y+4	; 0x04
    29c0:	89 2f       	mov	r24, r25
    29c2:	9a 2f       	mov	r25, r26
    29c4:	ab 2f       	mov	r26, r27
    29c6:	bb 27       	eor	r27, r27
    29c8:	80 83       	st	Z, r24

	reg=0;
    29ca:	10 92 b4 01 	sts	0x01B4, r1
	SET_BIT(reg,TXEN);
    29ce:	80 91 b4 01 	lds	r24, 0x01B4
    29d2:	88 60       	ori	r24, 0x08	; 8
    29d4:	80 93 b4 01 	sts	0x01B4, r24
	SET_BIT(reg,RXEN);
    29d8:	80 91 b4 01 	lds	r24, 0x01B4
    29dc:	80 61       	ori	r24, 0x10	; 16
    29de:	80 93 b4 01 	sts	0x01B4, r24
	UCSRB=reg;
    29e2:	ea e2       	ldi	r30, 0x2A	; 42
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 91 b4 01 	lds	r24, 0x01B4
    29ea:	80 83       	st	Z, r24

	reg=0;
    29ec:	10 92 b4 01 	sts	0x01B4, r1
	SET_BIT(reg,URSEL);
    29f0:	80 91 b4 01 	lds	r24, 0x01B4
    29f4:	80 68       	ori	r24, 0x80	; 128
    29f6:	80 93 b4 01 	sts	0x01B4, r24
	SET_BIT(reg,UCSZ1);
    29fa:	80 91 b4 01 	lds	r24, 0x01B4
    29fe:	84 60       	ori	r24, 0x04	; 4
    2a00:	80 93 b4 01 	sts	0x01B4, r24
	SET_BIT(reg,UCSZ0);
    2a04:	80 91 b4 01 	lds	r24, 0x01B4
    2a08:	82 60       	ori	r24, 0x02	; 2
    2a0a:	80 93 b4 01 	sts	0x01B4, r24

	UCSRC=reg;
    2a0e:	e0 e4       	ldi	r30, 0x40	; 64
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 91 b4 01 	lds	r24, 0x01B4
    2a16:	80 83       	st	Z, r24
	// SETTING 8BIT MODE
	//	CLEAR_BIT(UCSRC,URSEL);



}
    2a18:	28 96       	adiw	r28, 0x08	; 8
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <F90_VOID_WRITE>:

void F90_VOID_WRITE(unsigned char c)
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	0f 92       	push	r0
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	89 83       	std	Y+1, r24	; 0x01
	while(!(READ_BIT(UCSRA,UDRE)));//TRUE WHEN UDRE==0
    2a36:	eb e2       	ldi	r30, 0x2B	; 43
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	88 2f       	mov	r24, r24
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	80 72       	andi	r24, 0x20	; 32
    2a42:	90 70       	andi	r25, 0x00	; 0
    2a44:	00 97       	sbiw	r24, 0x00	; 0
    2a46:	b9 f3       	breq	.-18     	; 0x2a36 <F90_VOID_WRITE+0xc>
	//CONTINUEE WHEN UDRE==1



	UDR=c;
    2a48:	ec e2       	ldi	r30, 0x2C	; 44
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	80 83       	st	Z, r24




}
    2a50:	0f 90       	pop	r0
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <F90_VOID_WRITE_string>:
void F90_VOID_WRITE_string( char *string)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <F90_VOID_WRITE_string+0x6>
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	9a 83       	std	Y+2, r25	; 0x02
    2a64:	89 83       	std	Y+1, r24	; 0x01
	//while(READ_BIT(UCSRB,UDRIE));
	i=0;
    2a66:	10 92 b5 01 	sts	0x01B5, r1
    2a6a:	11 c0       	rjmp	.+34     	; 0x2a8e <F90_VOID_WRITE_string+0x36>
	while (!(*(string+i) ==0))
	{
	//i=0;

	//UDR=*string;
	F90_VOID_WRITE (string[i]);
    2a6c:	80 91 b5 01 	lds	r24, 0x01B5
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	9a 81       	ldd	r25, Y+2	; 0x02
    2a78:	fc 01       	movw	r30, r24
    2a7a:	e2 0f       	add	r30, r18
    2a7c:	f3 1f       	adc	r31, r19
    2a7e:	80 81       	ld	r24, Z
    2a80:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <F90_VOID_WRITE>
	i++;
    2a84:	80 91 b5 01 	lds	r24, 0x01B5
    2a88:	8f 5f       	subi	r24, 0xFF	; 255
    2a8a:	80 93 b5 01 	sts	0x01B5, r24
}
void F90_VOID_WRITE_string( char *string)
{
	//while(READ_BIT(UCSRB,UDRIE));
	i=0;
	while (!(*(string+i) ==0))
    2a8e:	80 91 b5 01 	lds	r24, 0x01B5
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	e2 0f       	add	r30, r18
    2a9e:	f3 1f       	adc	r31, r19
    2aa0:	80 81       	ld	r24, Z
    2aa2:	88 23       	and	r24, r24
    2aa4:	19 f7       	brne	.-58     	; 0x2a6c <F90_VOID_WRITE_string+0x14>



	}

}
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <F90_VOID_READ>:
char F90_VOID_READ()
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
	while(!(READ_BIT(UCSRA,RXC)));
    2ab8:	eb e2       	ldi	r30, 0x2B	; 43
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	88 23       	and	r24, r24
    2ac0:	dc f7       	brge	.-10     	; 0x2ab8 <F90_VOID_READ+0x8>


	return UDR;
    2ac2:	ec e2       	ldi	r30, 0x2C	; 44
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z




}
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <F90_DecToBcdConvert>:
 */
#include "../MCAL/F90_I2C.h"
#include "F90_RTC.h"

static unsigned char F90_DecToBcdConvert(unsigned char  val)
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	0f 92       	push	r0
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	89 83       	std	Y+1, r24	; 0x01
	return val + 6 * (val / 10);
    2ada:	89 81       	ldd	r24, Y+1	; 0x01
    2adc:	9a e0       	ldi	r25, 0x0A	; 10
    2ade:	69 2f       	mov	r22, r25
    2ae0:	0e 94 92 27 	call	0x4f24	; 0x4f24 <__udivmodqi4>
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	c9 01       	movw	r24, r18
    2aea:	88 0f       	add	r24, r24
    2aec:	99 1f       	adc	r25, r25
    2aee:	82 0f       	add	r24, r18
    2af0:	93 1f       	adc	r25, r19
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	98 2f       	mov	r25, r24
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	89 0f       	add	r24, r25
}
    2afc:	0f 90       	pop	r0
    2afe:	cf 91       	pop	r28
    2b00:	df 91       	pop	r29
    2b02:	08 95       	ret

00002b04 <F90_BcdToDecConvert>:

static unsigned char F90_BcdToDecConvert(unsigned char  val)
{
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	0f 92       	push	r0
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	89 83       	std	Y+1, r24	; 0x01
	return val - 6 * (val >> 4);
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	82 95       	swap	r24
    2b14:	8f 70       	andi	r24, 0x0F	; 15
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	c9 01       	movw	r24, r18
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	82 0f       	add	r24, r18
    2b22:	93 1f       	adc	r25, r19
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	90 95       	com	r25
    2b2a:	81 95       	neg	r24
    2b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2e:	98 2f       	mov	r25, r24
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	89 0f       	add	r24, r25
}
    2b34:	0f 90       	pop	r0
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <F90_void_RTC_init>:

void F90_void_RTC_init()
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
	//F90_void_I2C_init();

	 F90_void_I2C_init(0x47,1);
    2b44:	87 e4       	ldi	r24, 0x47	; 71
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	61 e0       	ldi	r22, 0x01	; 1
    2b4a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <F90_void_I2C_init>

}
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <F90_void_RTC_Settime>:

void F90_void_RTC_Settime(unsigned char HH ,unsigned char MM ,unsigned char SS  )
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <F90_void_RTC_Settime+0x6>
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <F90_void_RTC_Settime+0x8>
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <F90_void_RTC_Settime+0xa>
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	8c 83       	std	Y+4, r24	; 0x04
    2b64:	6d 83       	std	Y+5, r22	; 0x05
    2b66:	4e 83       	std	Y+6, r20	; 0x06
	F90_void_I2C_Start();
    2b68:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <F90_void_I2C_Start>
	F90_void_I2C_Write(ADDR_WITH_WRITE);
    2b6c:	80 ed       	ldi	r24, 0xD0	; 208
    2b6e:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <F90_void_I2C_Write>
	F90_void_I2C_Write(CONTROL_REG);
    2b72:	87 e0       	ldi	r24, 0x07	; 7
    2b74:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <F90_void_I2C_Write>
	F90_void_I2C_Write(0x00);
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <F90_void_I2C_Write>
	F90_void_I2C_Stop();
    2b7e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <F90_void_I2C_Stop>

	unsigned char Hours = F90_DecToBcdConvert(HH);
    2b82:	8c 81       	ldd	r24, Y+4	; 0x04
    2b84:	0e 94 67 15 	call	0x2ace	; 0x2ace <F90_DecToBcdConvert>
    2b88:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char Minute = F90_DecToBcdConvert(MM);
    2b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8c:	0e 94 67 15 	call	0x2ace	; 0x2ace <F90_DecToBcdConvert>
    2b90:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char Second = F90_DecToBcdConvert(SS);
    2b92:	8e 81       	ldd	r24, Y+6	; 0x06
    2b94:	0e 94 67 15 	call	0x2ace	; 0x2ace <F90_DecToBcdConvert>
    2b98:	89 83       	std	Y+1, r24	; 0x01


	F90_void_I2C_Start();
    2b9a:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <F90_void_I2C_Start>
	F90_void_I2C_Write(ADDR_WITH_WRITE);
    2b9e:	80 ed       	ldi	r24, 0xD0	; 208
    2ba0:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <F90_void_I2C_Write>
	F90_void_I2C_Write(SECOND_REG);
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <F90_void_I2C_Write>
	F90_void_I2C_Write(Second);
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <F90_void_I2C_Write>
	F90_void_I2C_Write(Minute);
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <F90_void_I2C_Write>
	F90_void_I2C_Write(Hours);
    2bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb8:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <F90_void_I2C_Write>
	F90_void_I2C_Stop();
    2bbc:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <F90_void_I2C_Stop>
}
    2bc0:	26 96       	adiw	r28, 0x06	; 6
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	cd bf       	out	0x3d, r28	; 61
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <F90_void_RTC_Gettime>:

void F90_void_RTC_Gettime(unsigned char *HH ,unsigned char *MM ,unsigned char *SS  )
{
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	29 97       	sbiw	r28, 0x09	; 9
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	0f be       	out	0x3f, r0	; 63
    2be4:	cd bf       	out	0x3d, r28	; 61
    2be6:	9d 83       	std	Y+5, r25	; 0x05
    2be8:	8c 83       	std	Y+4, r24	; 0x04
    2bea:	7f 83       	std	Y+7, r23	; 0x07
    2bec:	6e 83       	std	Y+6, r22	; 0x06
    2bee:	59 87       	std	Y+9, r21	; 0x09
    2bf0:	48 87       	std	Y+8, r20	; 0x08
	unsigned char Hours = 0;
    2bf2:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char Minute = 0;
    2bf4:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char Second = 0;
    2bf6:	19 82       	std	Y+1, r1	; 0x01

	F90_void_I2C_Start();
    2bf8:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <F90_void_I2C_Start>
	F90_void_I2C_Write(ADDR_WITH_WRITE);
    2bfc:	80 ed       	ldi	r24, 0xD0	; 208
    2bfe:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <F90_void_I2C_Write>
	F90_void_I2C_Write(SECOND_REG);
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <F90_void_I2C_Write>
	F90_void_I2C_Stop();
    2c08:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <F90_void_I2C_Stop>
	F90_void_I2C_Start();
    2c0c:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <F90_void_I2C_Start>
	F90_void_I2C_Write(ADDR_WITH_READ);
    2c10:	81 ed       	ldi	r24, 0xD1	; 209
    2c12:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <F90_void_I2C_Write>
	Second = F90_char_I2C_Read(1);
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <F90_char_I2C_Read>
    2c1c:	89 83       	std	Y+1, r24	; 0x01
	Minute = F90_char_I2C_Read(1);
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <F90_char_I2C_Read>
    2c24:	8a 83       	std	Y+2, r24	; 0x02
	Hours = F90_char_I2C_Read(0);
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <F90_char_I2C_Read>
    2c2c:	8b 83       	std	Y+3, r24	; 0x03
	F90_void_I2C_Stop();
    2c2e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <F90_void_I2C_Stop>


	*HH = F90_BcdToDecConvert(Hours);
    2c32:	8b 81       	ldd	r24, Y+3	; 0x03
    2c34:	0e 94 82 15 	call	0x2b04	; 0x2b04 <F90_BcdToDecConvert>
    2c38:	ec 81       	ldd	r30, Y+4	; 0x04
    2c3a:	fd 81       	ldd	r31, Y+5	; 0x05
    2c3c:	80 83       	st	Z, r24
	*MM = F90_BcdToDecConvert(Minute);
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	0e 94 82 15 	call	0x2b04	; 0x2b04 <F90_BcdToDecConvert>
    2c44:	ee 81       	ldd	r30, Y+6	; 0x06
    2c46:	ff 81       	ldd	r31, Y+7	; 0x07
    2c48:	80 83       	st	Z, r24
	*SS = F90_BcdToDecConvert(Second);
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	0e 94 82 15 	call	0x2b04	; 0x2b04 <F90_BcdToDecConvert>
    2c50:	e8 85       	ldd	r30, Y+8	; 0x08
    2c52:	f9 85       	ldd	r31, Y+9	; 0x09
    2c54:	80 83       	st	Z, r24


}
    2c56:	29 96       	adiw	r28, 0x09	; 9
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <F91_void_LCD_Send_Data>:
#include "F91_LCD.h"
#include "util/delay.h"
#include "../Services_layers/Services_layers.h"

void F91_void_LCD_Send_Data(unsigned char data)
{
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	e9 97       	sbiw	r28, 0x39	; 57
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	de bf       	out	0x3e, r29	; 62
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	cd bf       	out	0x3d, r28	; 61
    2c7c:	89 af       	std	Y+57, r24	; 0x39
	F91_void_Writpin(LCD_RS_PORT , LCD_RS_PIN , HIGH);
    2c7e:	81 e4       	ldi	r24, 0x41	; 65
    2c80:	63 e0       	ldi	r22, 0x03	; 3
    2c82:	70 e0       	ldi	r23, 0x00	; 0
    2c84:	41 e0       	ldi	r20, 0x01	; 1
    2c86:	50 e0       	ldi	r21, 0x00	; 0
    2c88:	0e 94 b8 0c 	call	0x1970	; 0x1970 <F91_void_Writpin>


	F91_void_WritePort(LCD_DATA_PORT, WRITE_MOST(data));
    2c8c:	89 ad       	ldd	r24, Y+57	; 0x39
    2c8e:	98 2f       	mov	r25, r24
    2c90:	92 95       	swap	r25
    2c92:	9f 70       	andi	r25, 0x0F	; 15
    2c94:	82 e4       	ldi	r24, 0x42	; 66
    2c96:	69 2f       	mov	r22, r25
    2c98:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <F91_void_WritePort>
	F91_void_Writpin(LCD_EN_PORT , LCD_EN_PIN , HIGH);
    2c9c:	84 e4       	ldi	r24, 0x44	; 68
    2c9e:	66 e0       	ldi	r22, 0x06	; 6
    2ca0:	70 e0       	ldi	r23, 0x00	; 0
    2ca2:	41 e0       	ldi	r20, 0x01	; 1
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <F91_void_Writpin>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	a0 e8       	ldi	r26, 0x80	; 128
    2cb0:	bf e3       	ldi	r27, 0x3F	; 63
    2cb2:	8d ab       	std	Y+53, r24	; 0x35
    2cb4:	9e ab       	std	Y+54, r25	; 0x36
    2cb6:	af ab       	std	Y+55, r26	; 0x37
    2cb8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cba:	6d a9       	ldd	r22, Y+53	; 0x35
    2cbc:	7e a9       	ldd	r23, Y+54	; 0x36
    2cbe:	8f a9       	ldd	r24, Y+55	; 0x37
    2cc0:	98 ad       	ldd	r25, Y+56	; 0x38
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	4a ef       	ldi	r20, 0xFA	; 250
    2cc8:	54 e4       	ldi	r21, 0x44	; 68
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	89 ab       	std	Y+49, r24	; 0x31
    2cd4:	9a ab       	std	Y+50, r25	; 0x32
    2cd6:	ab ab       	std	Y+51, r26	; 0x33
    2cd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cda:	69 a9       	ldd	r22, Y+49	; 0x31
    2cdc:	7a a9       	ldd	r23, Y+50	; 0x32
    2cde:	8b a9       	ldd	r24, Y+51	; 0x33
    2ce0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e8       	ldi	r20, 0x80	; 128
    2ce8:	5f e3       	ldi	r21, 0x3F	; 63
    2cea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cee:	88 23       	and	r24, r24
    2cf0:	2c f4       	brge	.+10     	; 0x2cfc <F91_void_LCD_Send_Data+0x94>
		__ticks = 1;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	98 ab       	std	Y+48, r25	; 0x30
    2cf8:	8f a7       	std	Y+47, r24	; 0x2f
    2cfa:	3f c0       	rjmp	.+126    	; 0x2d7a <F91_void_LCD_Send_Data+0x112>
	else if (__tmp > 65535)
    2cfc:	69 a9       	ldd	r22, Y+49	; 0x31
    2cfe:	7a a9       	ldd	r23, Y+50	; 0x32
    2d00:	8b a9       	ldd	r24, Y+51	; 0x33
    2d02:	9c a9       	ldd	r25, Y+52	; 0x34
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	3f ef       	ldi	r19, 0xFF	; 255
    2d08:	4f e7       	ldi	r20, 0x7F	; 127
    2d0a:	57 e4       	ldi	r21, 0x47	; 71
    2d0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d10:	18 16       	cp	r1, r24
    2d12:	4c f5       	brge	.+82     	; 0x2d66 <F91_void_LCD_Send_Data+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d14:	6d a9       	ldd	r22, Y+53	; 0x35
    2d16:	7e a9       	ldd	r23, Y+54	; 0x36
    2d18:	8f a9       	ldd	r24, Y+55	; 0x37
    2d1a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e2       	ldi	r20, 0x20	; 32
    2d22:	51 e4       	ldi	r21, 0x41	; 65
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	98 ab       	std	Y+48, r25	; 0x30
    2d3a:	8f a7       	std	Y+47, r24	; 0x2f
    2d3c:	0f c0       	rjmp	.+30     	; 0x2d5c <F91_void_LCD_Send_Data+0xf4>
    2d3e:	88 ec       	ldi	r24, 0xC8	; 200
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	9e a7       	std	Y+46, r25	; 0x2e
    2d44:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d46:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d48:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <F91_void_LCD_Send_Data+0xe2>
    2d4e:	9e a7       	std	Y+46, r25	; 0x2e
    2d50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d52:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d54:	98 a9       	ldd	r25, Y+48	; 0x30
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	98 ab       	std	Y+48, r25	; 0x30
    2d5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d5e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	69 f7       	brne	.-38     	; 0x2d3e <F91_void_LCD_Send_Data+0xd6>
    2d64:	14 c0       	rjmp	.+40     	; 0x2d8e <F91_void_LCD_Send_Data+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d66:	69 a9       	ldd	r22, Y+49	; 0x31
    2d68:	7a a9       	ldd	r23, Y+50	; 0x32
    2d6a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d6c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	98 ab       	std	Y+48, r25	; 0x30
    2d78:	8f a7       	std	Y+47, r24	; 0x2f
    2d7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d7c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d7e:	9c a7       	std	Y+44, r25	; 0x2c
    2d80:	8b a7       	std	Y+43, r24	; 0x2b
    2d82:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d84:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <F91_void_LCD_Send_Data+0x11e>
    2d8a:	9c a7       	std	Y+44, r25	; 0x2c
    2d8c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	F91_void_Writpin(LCD_EN_PORT , LCD_EN_PIN , LOW);
    2d8e:	84 e4       	ldi	r24, 0x44	; 68
    2d90:	66 e0       	ldi	r22, 0x06	; 6
    2d92:	70 e0       	ldi	r23, 0x00	; 0
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	50 e0       	ldi	r21, 0x00	; 0
    2d98:	0e 94 b8 0c 	call	0x1970	; 0x1970 <F91_void_Writpin>
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	a0 e8       	ldi	r26, 0x80	; 128
    2da2:	bf e3       	ldi	r27, 0x3F	; 63
    2da4:	8f a3       	std	Y+39, r24	; 0x27
    2da6:	98 a7       	std	Y+40, r25	; 0x28
    2da8:	a9 a7       	std	Y+41, r26	; 0x29
    2daa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dac:	6f a1       	ldd	r22, Y+39	; 0x27
    2dae:	78 a5       	ldd	r23, Y+40	; 0x28
    2db0:	89 a5       	ldd	r24, Y+41	; 0x29
    2db2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	4a ef       	ldi	r20, 0xFA	; 250
    2dba:	54 e4       	ldi	r21, 0x44	; 68
    2dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	8b a3       	std	Y+35, r24	; 0x23
    2dc6:	9c a3       	std	Y+36, r25	; 0x24
    2dc8:	ad a3       	std	Y+37, r26	; 0x25
    2dca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2dcc:	6b a1       	ldd	r22, Y+35	; 0x23
    2dce:	7c a1       	ldd	r23, Y+36	; 0x24
    2dd0:	8d a1       	ldd	r24, Y+37	; 0x25
    2dd2:	9e a1       	ldd	r25, Y+38	; 0x26
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e8       	ldi	r20, 0x80	; 128
    2dda:	5f e3       	ldi	r21, 0x3F	; 63
    2ddc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de0:	88 23       	and	r24, r24
    2de2:	2c f4       	brge	.+10     	; 0x2dee <F91_void_LCD_Send_Data+0x186>
		__ticks = 1;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	9a a3       	std	Y+34, r25	; 0x22
    2dea:	89 a3       	std	Y+33, r24	; 0x21
    2dec:	3f c0       	rjmp	.+126    	; 0x2e6c <F91_void_LCD_Send_Data+0x204>
	else if (__tmp > 65535)
    2dee:	6b a1       	ldd	r22, Y+35	; 0x23
    2df0:	7c a1       	ldd	r23, Y+36	; 0x24
    2df2:	8d a1       	ldd	r24, Y+37	; 0x25
    2df4:	9e a1       	ldd	r25, Y+38	; 0x26
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	3f ef       	ldi	r19, 0xFF	; 255
    2dfa:	4f e7       	ldi	r20, 0x7F	; 127
    2dfc:	57 e4       	ldi	r21, 0x47	; 71
    2dfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e02:	18 16       	cp	r1, r24
    2e04:	4c f5       	brge	.+82     	; 0x2e58 <F91_void_LCD_Send_Data+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e06:	6f a1       	ldd	r22, Y+39	; 0x27
    2e08:	78 a5       	ldd	r23, Y+40	; 0x28
    2e0a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e2       	ldi	r20, 0x20	; 32
    2e14:	51 e4       	ldi	r21, 0x41	; 65
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9a a3       	std	Y+34, r25	; 0x22
    2e2c:	89 a3       	std	Y+33, r24	; 0x21
    2e2e:	0f c0       	rjmp	.+30     	; 0x2e4e <F91_void_LCD_Send_Data+0x1e6>
    2e30:	88 ec       	ldi	r24, 0xC8	; 200
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	98 a3       	std	Y+32, r25	; 0x20
    2e36:	8f 8f       	std	Y+31, r24	; 0x1f
    2e38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e3a:	98 a1       	ldd	r25, Y+32	; 0x20
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <F91_void_LCD_Send_Data+0x1d4>
    2e40:	98 a3       	std	Y+32, r25	; 0x20
    2e42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e44:	89 a1       	ldd	r24, Y+33	; 0x21
    2e46:	9a a1       	ldd	r25, Y+34	; 0x22
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	9a a3       	std	Y+34, r25	; 0x22
    2e4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e50:	9a a1       	ldd	r25, Y+34	; 0x22
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	69 f7       	brne	.-38     	; 0x2e30 <F91_void_LCD_Send_Data+0x1c8>
    2e56:	14 c0       	rjmp	.+40     	; 0x2e80 <F91_void_LCD_Send_Data+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e58:	6b a1       	ldd	r22, Y+35	; 0x23
    2e5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	9a a3       	std	Y+34, r25	; 0x22
    2e6a:	89 a3       	std	Y+33, r24	; 0x21
    2e6c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e6e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e70:	9e 8f       	std	Y+30, r25	; 0x1e
    2e72:	8d 8f       	std	Y+29, r24	; 0x1d
    2e74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <F91_void_LCD_Send_Data+0x210>
    2e7c:	9e 8f       	std	Y+30, r25	; 0x1e
    2e7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	F91_void_WritePort(LCD_DATA_PORT, WRITE_LEST(data));
    2e80:	89 ad       	ldd	r24, Y+57	; 0x39
    2e82:	98 2f       	mov	r25, r24
    2e84:	9f 70       	andi	r25, 0x0F	; 15
    2e86:	82 e4       	ldi	r24, 0x42	; 66
    2e88:	69 2f       	mov	r22, r25
    2e8a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <F91_void_WritePort>
	F91_void_Writpin(LCD_EN_PORT , LCD_EN_PIN , HIGH);
    2e8e:	84 e4       	ldi	r24, 0x44	; 68
    2e90:	66 e0       	ldi	r22, 0x06	; 6
    2e92:	70 e0       	ldi	r23, 0x00	; 0
    2e94:	41 e0       	ldi	r20, 0x01	; 1
    2e96:	50 e0       	ldi	r21, 0x00	; 0
    2e98:	0e 94 b8 0c 	call	0x1970	; 0x1970 <F91_void_Writpin>
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	a0 e8       	ldi	r26, 0x80	; 128
    2ea2:	bf e3       	ldi	r27, 0x3F	; 63
    2ea4:	89 8f       	std	Y+25, r24	; 0x19
    2ea6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ea8:	ab 8f       	std	Y+27, r26	; 0x1b
    2eaa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eac:	69 8d       	ldd	r22, Y+25	; 0x19
    2eae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	4a ef       	ldi	r20, 0xFA	; 250
    2eba:	54 e4       	ldi	r21, 0x44	; 68
    2ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	8d 8b       	std	Y+21, r24	; 0x15
    2ec6:	9e 8b       	std	Y+22, r25	; 0x16
    2ec8:	af 8b       	std	Y+23, r26	; 0x17
    2eca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ecc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ece:	7e 89       	ldd	r23, Y+22	; 0x16
    2ed0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	40 e8       	ldi	r20, 0x80	; 128
    2eda:	5f e3       	ldi	r21, 0x3F	; 63
    2edc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ee0:	88 23       	and	r24, r24
    2ee2:	2c f4       	brge	.+10     	; 0x2eee <F91_void_LCD_Send_Data+0x286>
		__ticks = 1;
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	9c 8b       	std	Y+20, r25	; 0x14
    2eea:	8b 8b       	std	Y+19, r24	; 0x13
    2eec:	3f c0       	rjmp	.+126    	; 0x2f6c <F91_void_LCD_Send_Data+0x304>
	else if (__tmp > 65535)
    2eee:	6d 89       	ldd	r22, Y+21	; 0x15
    2ef0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ef2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	3f ef       	ldi	r19, 0xFF	; 255
    2efa:	4f e7       	ldi	r20, 0x7F	; 127
    2efc:	57 e4       	ldi	r21, 0x47	; 71
    2efe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f02:	18 16       	cp	r1, r24
    2f04:	4c f5       	brge	.+82     	; 0x2f58 <F91_void_LCD_Send_Data+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f06:	69 8d       	ldd	r22, Y+25	; 0x19
    2f08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	40 e2       	ldi	r20, 0x20	; 32
    2f14:	51 e4       	ldi	r21, 0x41	; 65
    2f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	9c 8b       	std	Y+20, r25	; 0x14
    2f2c:	8b 8b       	std	Y+19, r24	; 0x13
    2f2e:	0f c0       	rjmp	.+30     	; 0x2f4e <F91_void_LCD_Send_Data+0x2e6>
    2f30:	88 ec       	ldi	r24, 0xC8	; 200
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	9a 8b       	std	Y+18, r25	; 0x12
    2f36:	89 8b       	std	Y+17, r24	; 0x11
    2f38:	89 89       	ldd	r24, Y+17	; 0x11
    2f3a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	f1 f7       	brne	.-4      	; 0x2f3c <F91_void_LCD_Send_Data+0x2d4>
    2f40:	9a 8b       	std	Y+18, r25	; 0x12
    2f42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f44:	8b 89       	ldd	r24, Y+19	; 0x13
    2f46:	9c 89       	ldd	r25, Y+20	; 0x14
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	9c 8b       	std	Y+20, r25	; 0x14
    2f4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f50:	9c 89       	ldd	r25, Y+20	; 0x14
    2f52:	00 97       	sbiw	r24, 0x00	; 0
    2f54:	69 f7       	brne	.-38     	; 0x2f30 <F91_void_LCD_Send_Data+0x2c8>
    2f56:	14 c0       	rjmp	.+40     	; 0x2f80 <F91_void_LCD_Send_Data+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f58:	6d 89       	ldd	r22, Y+21	; 0x15
    2f5a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	9c 8b       	std	Y+20, r25	; 0x14
    2f6a:	8b 8b       	std	Y+19, r24	; 0x13
    2f6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f70:	98 8b       	std	Y+16, r25	; 0x10
    2f72:	8f 87       	std	Y+15, r24	; 0x0f
    2f74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f76:	98 89       	ldd	r25, Y+16	; 0x10
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <F91_void_LCD_Send_Data+0x310>
    2f7c:	98 8b       	std	Y+16, r25	; 0x10
    2f7e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	F91_void_Writpin(LCD_EN_PORT , LCD_EN_PIN , LOW);
    2f80:	84 e4       	ldi	r24, 0x44	; 68
    2f82:	66 e0       	ldi	r22, 0x06	; 6
    2f84:	70 e0       	ldi	r23, 0x00	; 0
    2f86:	40 e0       	ldi	r20, 0x00	; 0
    2f88:	50 e0       	ldi	r21, 0x00	; 0
    2f8a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <F91_void_Writpin>
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	a0 e8       	ldi	r26, 0x80	; 128
    2f94:	bf e3       	ldi	r27, 0x3F	; 63
    2f96:	8b 87       	std	Y+11, r24	; 0x0b
    2f98:	9c 87       	std	Y+12, r25	; 0x0c
    2f9a:	ad 87       	std	Y+13, r26	; 0x0d
    2f9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	4a ef       	ldi	r20, 0xFA	; 250
    2fac:	54 e4       	ldi	r21, 0x44	; 68
    2fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	8f 83       	std	Y+7, r24	; 0x07
    2fb8:	98 87       	std	Y+8, r25	; 0x08
    2fba:	a9 87       	std	Y+9, r26	; 0x09
    2fbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc0:	78 85       	ldd	r23, Y+8	; 0x08
    2fc2:	89 85       	ldd	r24, Y+9	; 0x09
    2fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e8       	ldi	r20, 0x80	; 128
    2fcc:	5f e3       	ldi	r21, 0x3F	; 63
    2fce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fd2:	88 23       	and	r24, r24
    2fd4:	2c f4       	brge	.+10     	; 0x2fe0 <F91_void_LCD_Send_Data+0x378>
		__ticks = 1;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
    2fde:	3f c0       	rjmp	.+126    	; 0x305e <F91_void_LCD_Send_Data+0x3f6>
	else if (__tmp > 65535)
    2fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe2:	78 85       	ldd	r23, Y+8	; 0x08
    2fe4:	89 85       	ldd	r24, Y+9	; 0x09
    2fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	3f ef       	ldi	r19, 0xFF	; 255
    2fec:	4f e7       	ldi	r20, 0x7F	; 127
    2fee:	57 e4       	ldi	r21, 0x47	; 71
    2ff0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ff4:	18 16       	cp	r1, r24
    2ff6:	4c f5       	brge	.+82     	; 0x304a <F91_void_LCD_Send_Data+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	40 e2       	ldi	r20, 0x20	; 32
    3006:	51 e4       	ldi	r21, 0x41	; 65
    3008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	9e 83       	std	Y+6, r25	; 0x06
    301e:	8d 83       	std	Y+5, r24	; 0x05
    3020:	0f c0       	rjmp	.+30     	; 0x3040 <F91_void_LCD_Send_Data+0x3d8>
    3022:	88 ec       	ldi	r24, 0xC8	; 200
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	9c 83       	std	Y+4, r25	; 0x04
    3028:	8b 83       	std	Y+3, r24	; 0x03
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	9c 81       	ldd	r25, Y+4	; 0x04
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <F91_void_LCD_Send_Data+0x3c6>
    3032:	9c 83       	std	Y+4, r25	; 0x04
    3034:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3036:	8d 81       	ldd	r24, Y+5	; 0x05
    3038:	9e 81       	ldd	r25, Y+6	; 0x06
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	9e 83       	std	Y+6, r25	; 0x06
    303e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3040:	8d 81       	ldd	r24, Y+5	; 0x05
    3042:	9e 81       	ldd	r25, Y+6	; 0x06
    3044:	00 97       	sbiw	r24, 0x00	; 0
    3046:	69 f7       	brne	.-38     	; 0x3022 <F91_void_LCD_Send_Data+0x3ba>
    3048:	14 c0       	rjmp	.+40     	; 0x3072 <F91_void_LCD_Send_Data+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    304a:	6f 81       	ldd	r22, Y+7	; 0x07
    304c:	78 85       	ldd	r23, Y+8	; 0x08
    304e:	89 85       	ldd	r24, Y+9	; 0x09
    3050:	9a 85       	ldd	r25, Y+10	; 0x0a
    3052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	9e 83       	std	Y+6, r25	; 0x06
    305c:	8d 83       	std	Y+5, r24	; 0x05
    305e:	8d 81       	ldd	r24, Y+5	; 0x05
    3060:	9e 81       	ldd	r25, Y+6	; 0x06
    3062:	9a 83       	std	Y+2, r25	; 0x02
    3064:	89 83       	std	Y+1, r24	; 0x01
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	9a 81       	ldd	r25, Y+2	; 0x02
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	f1 f7       	brne	.-4      	; 0x306a <F91_void_LCD_Send_Data+0x402>
    306e:	9a 83       	std	Y+2, r25	; 0x02
    3070:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3072:	e9 96       	adiw	r28, 0x39	; 57
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	de bf       	out	0x3e, r29	; 62
    307a:	0f be       	out	0x3f, r0	; 63
    307c:	cd bf       	out	0x3d, r28	; 61
    307e:	cf 91       	pop	r28
    3080:	df 91       	pop	r29
    3082:	08 95       	ret

00003084 <F91_void_LCD_Send_Command>:

void F91_void_LCD_Send_Command(unsigned char command)
{
    3084:	df 93       	push	r29
    3086:	cf 93       	push	r28
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62
    308c:	e9 97       	sbiw	r28, 0x39	; 57
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	de bf       	out	0x3e, r29	; 62
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	cd bf       	out	0x3d, r28	; 61
    3098:	89 af       	std	Y+57, r24	; 0x39
	F91_void_Writpin(LCD_RS_PORT , LCD_RS_PIN , LOW);
    309a:	81 e4       	ldi	r24, 0x41	; 65
    309c:	63 e0       	ldi	r22, 0x03	; 3
    309e:	70 e0       	ldi	r23, 0x00	; 0
    30a0:	40 e0       	ldi	r20, 0x00	; 0
    30a2:	50 e0       	ldi	r21, 0x00	; 0
    30a4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <F91_void_Writpin>

	F91_void_WritePort(LCD_DATA_PORT, WRITE_MOST(command));
    30a8:	89 ad       	ldd	r24, Y+57	; 0x39
    30aa:	98 2f       	mov	r25, r24
    30ac:	92 95       	swap	r25
    30ae:	9f 70       	andi	r25, 0x0F	; 15
    30b0:	82 e4       	ldi	r24, 0x42	; 66
    30b2:	69 2f       	mov	r22, r25
    30b4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <F91_void_WritePort>
	F91_void_Writpin(LCD_EN_PORT , LCD_EN_PIN , HIGH);
    30b8:	84 e4       	ldi	r24, 0x44	; 68
    30ba:	66 e0       	ldi	r22, 0x06	; 6
    30bc:	70 e0       	ldi	r23, 0x00	; 0
    30be:	41 e0       	ldi	r20, 0x01	; 1
    30c0:	50 e0       	ldi	r21, 0x00	; 0
    30c2:	0e 94 b8 0c 	call	0x1970	; 0x1970 <F91_void_Writpin>
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	a0 e8       	ldi	r26, 0x80	; 128
    30cc:	bf e3       	ldi	r27, 0x3F	; 63
    30ce:	8d ab       	std	Y+53, r24	; 0x35
    30d0:	9e ab       	std	Y+54, r25	; 0x36
    30d2:	af ab       	std	Y+55, r26	; 0x37
    30d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d6:	6d a9       	ldd	r22, Y+53	; 0x35
    30d8:	7e a9       	ldd	r23, Y+54	; 0x36
    30da:	8f a9       	ldd	r24, Y+55	; 0x37
    30dc:	98 ad       	ldd	r25, Y+56	; 0x38
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	4a ef       	ldi	r20, 0xFA	; 250
    30e4:	54 e4       	ldi	r21, 0x44	; 68
    30e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	89 ab       	std	Y+49, r24	; 0x31
    30f0:	9a ab       	std	Y+50, r25	; 0x32
    30f2:	ab ab       	std	Y+51, r26	; 0x33
    30f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30f6:	69 a9       	ldd	r22, Y+49	; 0x31
    30f8:	7a a9       	ldd	r23, Y+50	; 0x32
    30fa:	8b a9       	ldd	r24, Y+51	; 0x33
    30fc:	9c a9       	ldd	r25, Y+52	; 0x34
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	40 e8       	ldi	r20, 0x80	; 128
    3104:	5f e3       	ldi	r21, 0x3F	; 63
    3106:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    310a:	88 23       	and	r24, r24
    310c:	2c f4       	brge	.+10     	; 0x3118 <F91_void_LCD_Send_Command+0x94>
		__ticks = 1;
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	98 ab       	std	Y+48, r25	; 0x30
    3114:	8f a7       	std	Y+47, r24	; 0x2f
    3116:	3f c0       	rjmp	.+126    	; 0x3196 <F91_void_LCD_Send_Command+0x112>
	else if (__tmp > 65535)
    3118:	69 a9       	ldd	r22, Y+49	; 0x31
    311a:	7a a9       	ldd	r23, Y+50	; 0x32
    311c:	8b a9       	ldd	r24, Y+51	; 0x33
    311e:	9c a9       	ldd	r25, Y+52	; 0x34
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	3f ef       	ldi	r19, 0xFF	; 255
    3124:	4f e7       	ldi	r20, 0x7F	; 127
    3126:	57 e4       	ldi	r21, 0x47	; 71
    3128:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    312c:	18 16       	cp	r1, r24
    312e:	4c f5       	brge	.+82     	; 0x3182 <F91_void_LCD_Send_Command+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3130:	6d a9       	ldd	r22, Y+53	; 0x35
    3132:	7e a9       	ldd	r23, Y+54	; 0x36
    3134:	8f a9       	ldd	r24, Y+55	; 0x37
    3136:	98 ad       	ldd	r25, Y+56	; 0x38
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	40 e2       	ldi	r20, 0x20	; 32
    313e:	51 e4       	ldi	r21, 0x41	; 65
    3140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	bc 01       	movw	r22, r24
    314a:	cd 01       	movw	r24, r26
    314c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	98 ab       	std	Y+48, r25	; 0x30
    3156:	8f a7       	std	Y+47, r24	; 0x2f
    3158:	0f c0       	rjmp	.+30     	; 0x3178 <F91_void_LCD_Send_Command+0xf4>
    315a:	88 ec       	ldi	r24, 0xC8	; 200
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	9e a7       	std	Y+46, r25	; 0x2e
    3160:	8d a7       	std	Y+45, r24	; 0x2d
    3162:	8d a5       	ldd	r24, Y+45	; 0x2d
    3164:	9e a5       	ldd	r25, Y+46	; 0x2e
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	f1 f7       	brne	.-4      	; 0x3166 <F91_void_LCD_Send_Command+0xe2>
    316a:	9e a7       	std	Y+46, r25	; 0x2e
    316c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3170:	98 a9       	ldd	r25, Y+48	; 0x30
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	98 ab       	std	Y+48, r25	; 0x30
    3176:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3178:	8f a5       	ldd	r24, Y+47	; 0x2f
    317a:	98 a9       	ldd	r25, Y+48	; 0x30
    317c:	00 97       	sbiw	r24, 0x00	; 0
    317e:	69 f7       	brne	.-38     	; 0x315a <F91_void_LCD_Send_Command+0xd6>
    3180:	14 c0       	rjmp	.+40     	; 0x31aa <F91_void_LCD_Send_Command+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3182:	69 a9       	ldd	r22, Y+49	; 0x31
    3184:	7a a9       	ldd	r23, Y+50	; 0x32
    3186:	8b a9       	ldd	r24, Y+51	; 0x33
    3188:	9c a9       	ldd	r25, Y+52	; 0x34
    318a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	98 ab       	std	Y+48, r25	; 0x30
    3194:	8f a7       	std	Y+47, r24	; 0x2f
    3196:	8f a5       	ldd	r24, Y+47	; 0x2f
    3198:	98 a9       	ldd	r25, Y+48	; 0x30
    319a:	9c a7       	std	Y+44, r25	; 0x2c
    319c:	8b a7       	std	Y+43, r24	; 0x2b
    319e:	8b a5       	ldd	r24, Y+43	; 0x2b
    31a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	f1 f7       	brne	.-4      	; 0x31a2 <F91_void_LCD_Send_Command+0x11e>
    31a6:	9c a7       	std	Y+44, r25	; 0x2c
    31a8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	F91_void_Writpin(LCD_EN_PORT , LCD_EN_PIN , LOW);
    31aa:	84 e4       	ldi	r24, 0x44	; 68
    31ac:	66 e0       	ldi	r22, 0x06	; 6
    31ae:	70 e0       	ldi	r23, 0x00	; 0
    31b0:	40 e0       	ldi	r20, 0x00	; 0
    31b2:	50 e0       	ldi	r21, 0x00	; 0
    31b4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <F91_void_Writpin>
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	a0 e8       	ldi	r26, 0x80	; 128
    31be:	bf e3       	ldi	r27, 0x3F	; 63
    31c0:	8f a3       	std	Y+39, r24	; 0x27
    31c2:	98 a7       	std	Y+40, r25	; 0x28
    31c4:	a9 a7       	std	Y+41, r26	; 0x29
    31c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c8:	6f a1       	ldd	r22, Y+39	; 0x27
    31ca:	78 a5       	ldd	r23, Y+40	; 0x28
    31cc:	89 a5       	ldd	r24, Y+41	; 0x29
    31ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	4a ef       	ldi	r20, 0xFA	; 250
    31d6:	54 e4       	ldi	r21, 0x44	; 68
    31d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	8b a3       	std	Y+35, r24	; 0x23
    31e2:	9c a3       	std	Y+36, r25	; 0x24
    31e4:	ad a3       	std	Y+37, r26	; 0x25
    31e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31e8:	6b a1       	ldd	r22, Y+35	; 0x23
    31ea:	7c a1       	ldd	r23, Y+36	; 0x24
    31ec:	8d a1       	ldd	r24, Y+37	; 0x25
    31ee:	9e a1       	ldd	r25, Y+38	; 0x26
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	40 e8       	ldi	r20, 0x80	; 128
    31f6:	5f e3       	ldi	r21, 0x3F	; 63
    31f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31fc:	88 23       	and	r24, r24
    31fe:	2c f4       	brge	.+10     	; 0x320a <F91_void_LCD_Send_Command+0x186>
		__ticks = 1;
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	9a a3       	std	Y+34, r25	; 0x22
    3206:	89 a3       	std	Y+33, r24	; 0x21
    3208:	3f c0       	rjmp	.+126    	; 0x3288 <F91_void_LCD_Send_Command+0x204>
	else if (__tmp > 65535)
    320a:	6b a1       	ldd	r22, Y+35	; 0x23
    320c:	7c a1       	ldd	r23, Y+36	; 0x24
    320e:	8d a1       	ldd	r24, Y+37	; 0x25
    3210:	9e a1       	ldd	r25, Y+38	; 0x26
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	3f ef       	ldi	r19, 0xFF	; 255
    3216:	4f e7       	ldi	r20, 0x7F	; 127
    3218:	57 e4       	ldi	r21, 0x47	; 71
    321a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    321e:	18 16       	cp	r1, r24
    3220:	4c f5       	brge	.+82     	; 0x3274 <F91_void_LCD_Send_Command+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3222:	6f a1       	ldd	r22, Y+39	; 0x27
    3224:	78 a5       	ldd	r23, Y+40	; 0x28
    3226:	89 a5       	ldd	r24, Y+41	; 0x29
    3228:	9a a5       	ldd	r25, Y+42	; 0x2a
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e2       	ldi	r20, 0x20	; 32
    3230:	51 e4       	ldi	r21, 0x41	; 65
    3232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	bc 01       	movw	r22, r24
    323c:	cd 01       	movw	r24, r26
    323e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	9a a3       	std	Y+34, r25	; 0x22
    3248:	89 a3       	std	Y+33, r24	; 0x21
    324a:	0f c0       	rjmp	.+30     	; 0x326a <F91_void_LCD_Send_Command+0x1e6>
    324c:	88 ec       	ldi	r24, 0xC8	; 200
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	98 a3       	std	Y+32, r25	; 0x20
    3252:	8f 8f       	std	Y+31, r24	; 0x1f
    3254:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3256:	98 a1       	ldd	r25, Y+32	; 0x20
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	f1 f7       	brne	.-4      	; 0x3258 <F91_void_LCD_Send_Command+0x1d4>
    325c:	98 a3       	std	Y+32, r25	; 0x20
    325e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3260:	89 a1       	ldd	r24, Y+33	; 0x21
    3262:	9a a1       	ldd	r25, Y+34	; 0x22
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	9a a3       	std	Y+34, r25	; 0x22
    3268:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326a:	89 a1       	ldd	r24, Y+33	; 0x21
    326c:	9a a1       	ldd	r25, Y+34	; 0x22
    326e:	00 97       	sbiw	r24, 0x00	; 0
    3270:	69 f7       	brne	.-38     	; 0x324c <F91_void_LCD_Send_Command+0x1c8>
    3272:	14 c0       	rjmp	.+40     	; 0x329c <F91_void_LCD_Send_Command+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3274:	6b a1       	ldd	r22, Y+35	; 0x23
    3276:	7c a1       	ldd	r23, Y+36	; 0x24
    3278:	8d a1       	ldd	r24, Y+37	; 0x25
    327a:	9e a1       	ldd	r25, Y+38	; 0x26
    327c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	9a a3       	std	Y+34, r25	; 0x22
    3286:	89 a3       	std	Y+33, r24	; 0x21
    3288:	89 a1       	ldd	r24, Y+33	; 0x21
    328a:	9a a1       	ldd	r25, Y+34	; 0x22
    328c:	9e 8f       	std	Y+30, r25	; 0x1e
    328e:	8d 8f       	std	Y+29, r24	; 0x1d
    3290:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3292:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <F91_void_LCD_Send_Command+0x210>
    3298:	9e 8f       	std	Y+30, r25	; 0x1e
    329a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	F91_void_WritePort(LCD_DATA_PORT, WRITE_LEST(command));
    329c:	89 ad       	ldd	r24, Y+57	; 0x39
    329e:	98 2f       	mov	r25, r24
    32a0:	9f 70       	andi	r25, 0x0F	; 15
    32a2:	82 e4       	ldi	r24, 0x42	; 66
    32a4:	69 2f       	mov	r22, r25
    32a6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <F91_void_WritePort>
	F91_void_Writpin(LCD_EN_PORT , LCD_EN_PIN , HIGH);
    32aa:	84 e4       	ldi	r24, 0x44	; 68
    32ac:	66 e0       	ldi	r22, 0x06	; 6
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	41 e0       	ldi	r20, 0x01	; 1
    32b2:	50 e0       	ldi	r21, 0x00	; 0
    32b4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <F91_void_Writpin>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	a0 e8       	ldi	r26, 0x80	; 128
    32be:	bf e3       	ldi	r27, 0x3F	; 63
    32c0:	89 8f       	std	Y+25, r24	; 0x19
    32c2:	9a 8f       	std	Y+26, r25	; 0x1a
    32c4:	ab 8f       	std	Y+27, r26	; 0x1b
    32c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c8:	69 8d       	ldd	r22, Y+25	; 0x19
    32ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	4a ef       	ldi	r20, 0xFA	; 250
    32d6:	54 e4       	ldi	r21, 0x44	; 68
    32d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	8d 8b       	std	Y+21, r24	; 0x15
    32e2:	9e 8b       	std	Y+22, r25	; 0x16
    32e4:	af 8b       	std	Y+23, r26	; 0x17
    32e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32e8:	6d 89       	ldd	r22, Y+21	; 0x15
    32ea:	7e 89       	ldd	r23, Y+22	; 0x16
    32ec:	8f 89       	ldd	r24, Y+23	; 0x17
    32ee:	98 8d       	ldd	r25, Y+24	; 0x18
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e8       	ldi	r20, 0x80	; 128
    32f6:	5f e3       	ldi	r21, 0x3F	; 63
    32f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32fc:	88 23       	and	r24, r24
    32fe:	2c f4       	brge	.+10     	; 0x330a <F91_void_LCD_Send_Command+0x286>
		__ticks = 1;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	9c 8b       	std	Y+20, r25	; 0x14
    3306:	8b 8b       	std	Y+19, r24	; 0x13
    3308:	3f c0       	rjmp	.+126    	; 0x3388 <F91_void_LCD_Send_Command+0x304>
	else if (__tmp > 65535)
    330a:	6d 89       	ldd	r22, Y+21	; 0x15
    330c:	7e 89       	ldd	r23, Y+22	; 0x16
    330e:	8f 89       	ldd	r24, Y+23	; 0x17
    3310:	98 8d       	ldd	r25, Y+24	; 0x18
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	3f ef       	ldi	r19, 0xFF	; 255
    3316:	4f e7       	ldi	r20, 0x7F	; 127
    3318:	57 e4       	ldi	r21, 0x47	; 71
    331a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331e:	18 16       	cp	r1, r24
    3320:	4c f5       	brge	.+82     	; 0x3374 <F91_void_LCD_Send_Command+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3322:	69 8d       	ldd	r22, Y+25	; 0x19
    3324:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e2       	ldi	r20, 0x20	; 32
    3330:	51 e4       	ldi	r21, 0x41	; 65
    3332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	bc 01       	movw	r22, r24
    333c:	cd 01       	movw	r24, r26
    333e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	9c 8b       	std	Y+20, r25	; 0x14
    3348:	8b 8b       	std	Y+19, r24	; 0x13
    334a:	0f c0       	rjmp	.+30     	; 0x336a <F91_void_LCD_Send_Command+0x2e6>
    334c:	88 ec       	ldi	r24, 0xC8	; 200
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	9a 8b       	std	Y+18, r25	; 0x12
    3352:	89 8b       	std	Y+17, r24	; 0x11
    3354:	89 89       	ldd	r24, Y+17	; 0x11
    3356:	9a 89       	ldd	r25, Y+18	; 0x12
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	f1 f7       	brne	.-4      	; 0x3358 <F91_void_LCD_Send_Command+0x2d4>
    335c:	9a 8b       	std	Y+18, r25	; 0x12
    335e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3360:	8b 89       	ldd	r24, Y+19	; 0x13
    3362:	9c 89       	ldd	r25, Y+20	; 0x14
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	9c 8b       	std	Y+20, r25	; 0x14
    3368:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    336a:	8b 89       	ldd	r24, Y+19	; 0x13
    336c:	9c 89       	ldd	r25, Y+20	; 0x14
    336e:	00 97       	sbiw	r24, 0x00	; 0
    3370:	69 f7       	brne	.-38     	; 0x334c <F91_void_LCD_Send_Command+0x2c8>
    3372:	14 c0       	rjmp	.+40     	; 0x339c <F91_void_LCD_Send_Command+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3374:	6d 89       	ldd	r22, Y+21	; 0x15
    3376:	7e 89       	ldd	r23, Y+22	; 0x16
    3378:	8f 89       	ldd	r24, Y+23	; 0x17
    337a:	98 8d       	ldd	r25, Y+24	; 0x18
    337c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	9c 8b       	std	Y+20, r25	; 0x14
    3386:	8b 8b       	std	Y+19, r24	; 0x13
    3388:	8b 89       	ldd	r24, Y+19	; 0x13
    338a:	9c 89       	ldd	r25, Y+20	; 0x14
    338c:	98 8b       	std	Y+16, r25	; 0x10
    338e:	8f 87       	std	Y+15, r24	; 0x0f
    3390:	8f 85       	ldd	r24, Y+15	; 0x0f
    3392:	98 89       	ldd	r25, Y+16	; 0x10
    3394:	01 97       	sbiw	r24, 0x01	; 1
    3396:	f1 f7       	brne	.-4      	; 0x3394 <F91_void_LCD_Send_Command+0x310>
    3398:	98 8b       	std	Y+16, r25	; 0x10
    339a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	F91_void_Writpin(LCD_EN_PORT , LCD_EN_PIN , LOW);
    339c:	84 e4       	ldi	r24, 0x44	; 68
    339e:	66 e0       	ldi	r22, 0x06	; 6
    33a0:	70 e0       	ldi	r23, 0x00	; 0
    33a2:	40 e0       	ldi	r20, 0x00	; 0
    33a4:	50 e0       	ldi	r21, 0x00	; 0
    33a6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <F91_void_Writpin>
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	a0 e8       	ldi	r26, 0x80	; 128
    33b0:	bf e3       	ldi	r27, 0x3F	; 63
    33b2:	8b 87       	std	Y+11, r24	; 0x0b
    33b4:	9c 87       	std	Y+12, r25	; 0x0c
    33b6:	ad 87       	std	Y+13, r26	; 0x0d
    33b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    33bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33be:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	4a ef       	ldi	r20, 0xFA	; 250
    33c8:	54 e4       	ldi	r21, 0x44	; 68
    33ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	8f 83       	std	Y+7, r24	; 0x07
    33d4:	98 87       	std	Y+8, r25	; 0x08
    33d6:	a9 87       	std	Y+9, r26	; 0x09
    33d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33da:	6f 81       	ldd	r22, Y+7	; 0x07
    33dc:	78 85       	ldd	r23, Y+8	; 0x08
    33de:	89 85       	ldd	r24, Y+9	; 0x09
    33e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	40 e8       	ldi	r20, 0x80	; 128
    33e8:	5f e3       	ldi	r21, 0x3F	; 63
    33ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ee:	88 23       	and	r24, r24
    33f0:	2c f4       	brge	.+10     	; 0x33fc <F91_void_LCD_Send_Command+0x378>
		__ticks = 1;
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	9e 83       	std	Y+6, r25	; 0x06
    33f8:	8d 83       	std	Y+5, r24	; 0x05
    33fa:	3f c0       	rjmp	.+126    	; 0x347a <F91_void_LCD_Send_Command+0x3f6>
	else if (__tmp > 65535)
    33fc:	6f 81       	ldd	r22, Y+7	; 0x07
    33fe:	78 85       	ldd	r23, Y+8	; 0x08
    3400:	89 85       	ldd	r24, Y+9	; 0x09
    3402:	9a 85       	ldd	r25, Y+10	; 0x0a
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	3f ef       	ldi	r19, 0xFF	; 255
    3408:	4f e7       	ldi	r20, 0x7F	; 127
    340a:	57 e4       	ldi	r21, 0x47	; 71
    340c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3410:	18 16       	cp	r1, r24
    3412:	4c f5       	brge	.+82     	; 0x3466 <F91_void_LCD_Send_Command+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3414:	6b 85       	ldd	r22, Y+11	; 0x0b
    3416:	7c 85       	ldd	r23, Y+12	; 0x0c
    3418:	8d 85       	ldd	r24, Y+13	; 0x0d
    341a:	9e 85       	ldd	r25, Y+14	; 0x0e
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	40 e2       	ldi	r20, 0x20	; 32
    3422:	51 e4       	ldi	r21, 0x41	; 65
    3424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	bc 01       	movw	r22, r24
    342e:	cd 01       	movw	r24, r26
    3430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	9e 83       	std	Y+6, r25	; 0x06
    343a:	8d 83       	std	Y+5, r24	; 0x05
    343c:	0f c0       	rjmp	.+30     	; 0x345c <F91_void_LCD_Send_Command+0x3d8>
    343e:	88 ec       	ldi	r24, 0xC8	; 200
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	9c 83       	std	Y+4, r25	; 0x04
    3444:	8b 83       	std	Y+3, r24	; 0x03
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	9c 81       	ldd	r25, Y+4	; 0x04
    344a:	01 97       	sbiw	r24, 0x01	; 1
    344c:	f1 f7       	brne	.-4      	; 0x344a <F91_void_LCD_Send_Command+0x3c6>
    344e:	9c 83       	std	Y+4, r25	; 0x04
    3450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3452:	8d 81       	ldd	r24, Y+5	; 0x05
    3454:	9e 81       	ldd	r25, Y+6	; 0x06
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	9e 83       	std	Y+6, r25	; 0x06
    345a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345c:	8d 81       	ldd	r24, Y+5	; 0x05
    345e:	9e 81       	ldd	r25, Y+6	; 0x06
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	69 f7       	brne	.-38     	; 0x343e <F91_void_LCD_Send_Command+0x3ba>
    3464:	14 c0       	rjmp	.+40     	; 0x348e <F91_void_LCD_Send_Command+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3466:	6f 81       	ldd	r22, Y+7	; 0x07
    3468:	78 85       	ldd	r23, Y+8	; 0x08
    346a:	89 85       	ldd	r24, Y+9	; 0x09
    346c:	9a 85       	ldd	r25, Y+10	; 0x0a
    346e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	9e 83       	std	Y+6, r25	; 0x06
    3478:	8d 83       	std	Y+5, r24	; 0x05
    347a:	8d 81       	ldd	r24, Y+5	; 0x05
    347c:	9e 81       	ldd	r25, Y+6	; 0x06
    347e:	9a 83       	std	Y+2, r25	; 0x02
    3480:	89 83       	std	Y+1, r24	; 0x01
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	9a 81       	ldd	r25, Y+2	; 0x02
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	f1 f7       	brne	.-4      	; 0x3486 <F91_void_LCD_Send_Command+0x402>
    348a:	9a 83       	std	Y+2, r25	; 0x02
    348c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    348e:	e9 96       	adiw	r28, 0x39	; 57
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	cf 91       	pop	r28
    349c:	df 91       	pop	r29
    349e:	08 95       	ret

000034a0 <F91_void_LCD_init_Command>:

void F91_void_LCD_init_Command(unsigned char command)
{
    34a0:	df 93       	push	r29
    34a2:	cf 93       	push	r28
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
    34a8:	6d 97       	sbiw	r28, 0x1d	; 29
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	cd bf       	out	0x3d, r28	; 61
    34b4:	8d 8f       	std	Y+29, r24	; 0x1d
	F91_void_Writpin(LCD_RS_PORT , LCD_RS_PIN , LOW);
    34b6:	81 e4       	ldi	r24, 0x41	; 65
    34b8:	63 e0       	ldi	r22, 0x03	; 3
    34ba:	70 e0       	ldi	r23, 0x00	; 0
    34bc:	40 e0       	ldi	r20, 0x00	; 0
    34be:	50 e0       	ldi	r21, 0x00	; 0
    34c0:	0e 94 b8 0c 	call	0x1970	; 0x1970 <F91_void_Writpin>


	F91_void_WritePort(LCD_DATA_PORT, WRITE_MOST(command));
    34c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34c6:	98 2f       	mov	r25, r24
    34c8:	92 95       	swap	r25
    34ca:	9f 70       	andi	r25, 0x0F	; 15
    34cc:	82 e4       	ldi	r24, 0x42	; 66
    34ce:	69 2f       	mov	r22, r25
    34d0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <F91_void_WritePort>
	F91_void_Writpin(LCD_EN_PORT , LCD_EN_PIN , HIGH);
    34d4:	84 e4       	ldi	r24, 0x44	; 68
    34d6:	66 e0       	ldi	r22, 0x06	; 6
    34d8:	70 e0       	ldi	r23, 0x00	; 0
    34da:	41 e0       	ldi	r20, 0x01	; 1
    34dc:	50 e0       	ldi	r21, 0x00	; 0
    34de:	0e 94 b8 0c 	call	0x1970	; 0x1970 <F91_void_Writpin>
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	a0 e8       	ldi	r26, 0x80	; 128
    34e8:	bf e3       	ldi	r27, 0x3F	; 63
    34ea:	89 8f       	std	Y+25, r24	; 0x19
    34ec:	9a 8f       	std	Y+26, r25	; 0x1a
    34ee:	ab 8f       	std	Y+27, r26	; 0x1b
    34f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f2:	69 8d       	ldd	r22, Y+25	; 0x19
    34f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	4a ef       	ldi	r20, 0xFA	; 250
    3500:	54 e4       	ldi	r21, 0x44	; 68
    3502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	8d 8b       	std	Y+21, r24	; 0x15
    350c:	9e 8b       	std	Y+22, r25	; 0x16
    350e:	af 8b       	std	Y+23, r26	; 0x17
    3510:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3512:	6d 89       	ldd	r22, Y+21	; 0x15
    3514:	7e 89       	ldd	r23, Y+22	; 0x16
    3516:	8f 89       	ldd	r24, Y+23	; 0x17
    3518:	98 8d       	ldd	r25, Y+24	; 0x18
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e8       	ldi	r20, 0x80	; 128
    3520:	5f e3       	ldi	r21, 0x3F	; 63
    3522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3526:	88 23       	and	r24, r24
    3528:	2c f4       	brge	.+10     	; 0x3534 <F91_void_LCD_init_Command+0x94>
		__ticks = 1;
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	9c 8b       	std	Y+20, r25	; 0x14
    3530:	8b 8b       	std	Y+19, r24	; 0x13
    3532:	3f c0       	rjmp	.+126    	; 0x35b2 <F91_void_LCD_init_Command+0x112>
	else if (__tmp > 65535)
    3534:	6d 89       	ldd	r22, Y+21	; 0x15
    3536:	7e 89       	ldd	r23, Y+22	; 0x16
    3538:	8f 89       	ldd	r24, Y+23	; 0x17
    353a:	98 8d       	ldd	r25, Y+24	; 0x18
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	3f ef       	ldi	r19, 0xFF	; 255
    3540:	4f e7       	ldi	r20, 0x7F	; 127
    3542:	57 e4       	ldi	r21, 0x47	; 71
    3544:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3548:	18 16       	cp	r1, r24
    354a:	4c f5       	brge	.+82     	; 0x359e <F91_void_LCD_init_Command+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354c:	69 8d       	ldd	r22, Y+25	; 0x19
    354e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3550:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3552:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	40 e2       	ldi	r20, 0x20	; 32
    355a:	51 e4       	ldi	r21, 0x41	; 65
    355c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	bc 01       	movw	r22, r24
    3566:	cd 01       	movw	r24, r26
    3568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	9c 8b       	std	Y+20, r25	; 0x14
    3572:	8b 8b       	std	Y+19, r24	; 0x13
    3574:	0f c0       	rjmp	.+30     	; 0x3594 <F91_void_LCD_init_Command+0xf4>
    3576:	88 ec       	ldi	r24, 0xC8	; 200
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	9a 8b       	std	Y+18, r25	; 0x12
    357c:	89 8b       	std	Y+17, r24	; 0x11
    357e:	89 89       	ldd	r24, Y+17	; 0x11
    3580:	9a 89       	ldd	r25, Y+18	; 0x12
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <F91_void_LCD_init_Command+0xe2>
    3586:	9a 8b       	std	Y+18, r25	; 0x12
    3588:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    358a:	8b 89       	ldd	r24, Y+19	; 0x13
    358c:	9c 89       	ldd	r25, Y+20	; 0x14
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	9c 8b       	std	Y+20, r25	; 0x14
    3592:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3594:	8b 89       	ldd	r24, Y+19	; 0x13
    3596:	9c 89       	ldd	r25, Y+20	; 0x14
    3598:	00 97       	sbiw	r24, 0x00	; 0
    359a:	69 f7       	brne	.-38     	; 0x3576 <F91_void_LCD_init_Command+0xd6>
    359c:	14 c0       	rjmp	.+40     	; 0x35c6 <F91_void_LCD_init_Command+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359e:	6d 89       	ldd	r22, Y+21	; 0x15
    35a0:	7e 89       	ldd	r23, Y+22	; 0x16
    35a2:	8f 89       	ldd	r24, Y+23	; 0x17
    35a4:	98 8d       	ldd	r25, Y+24	; 0x18
    35a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	9c 8b       	std	Y+20, r25	; 0x14
    35b0:	8b 8b       	std	Y+19, r24	; 0x13
    35b2:	8b 89       	ldd	r24, Y+19	; 0x13
    35b4:	9c 89       	ldd	r25, Y+20	; 0x14
    35b6:	98 8b       	std	Y+16, r25	; 0x10
    35b8:	8f 87       	std	Y+15, r24	; 0x0f
    35ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    35bc:	98 89       	ldd	r25, Y+16	; 0x10
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	f1 f7       	brne	.-4      	; 0x35be <F91_void_LCD_init_Command+0x11e>
    35c2:	98 8b       	std	Y+16, r25	; 0x10
    35c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	F91_void_Writpin(LCD_EN_PORT , LCD_EN_PIN , LOW);
    35c6:	84 e4       	ldi	r24, 0x44	; 68
    35c8:	66 e0       	ldi	r22, 0x06	; 6
    35ca:	70 e0       	ldi	r23, 0x00	; 0
    35cc:	40 e0       	ldi	r20, 0x00	; 0
    35ce:	50 e0       	ldi	r21, 0x00	; 0
    35d0:	0e 94 b8 0c 	call	0x1970	; 0x1970 <F91_void_Writpin>
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	a0 e8       	ldi	r26, 0x80	; 128
    35da:	bf e3       	ldi	r27, 0x3F	; 63
    35dc:	8b 87       	std	Y+11, r24	; 0x0b
    35de:	9c 87       	std	Y+12, r25	; 0x0c
    35e0:	ad 87       	std	Y+13, r26	; 0x0d
    35e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	4a ef       	ldi	r20, 0xFA	; 250
    35f2:	54 e4       	ldi	r21, 0x44	; 68
    35f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	8f 83       	std	Y+7, r24	; 0x07
    35fe:	98 87       	std	Y+8, r25	; 0x08
    3600:	a9 87       	std	Y+9, r26	; 0x09
    3602:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3604:	6f 81       	ldd	r22, Y+7	; 0x07
    3606:	78 85       	ldd	r23, Y+8	; 0x08
    3608:	89 85       	ldd	r24, Y+9	; 0x09
    360a:	9a 85       	ldd	r25, Y+10	; 0x0a
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e8       	ldi	r20, 0x80	; 128
    3612:	5f e3       	ldi	r21, 0x3F	; 63
    3614:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3618:	88 23       	and	r24, r24
    361a:	2c f4       	brge	.+10     	; 0x3626 <F91_void_LCD_init_Command+0x186>
		__ticks = 1;
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	9e 83       	std	Y+6, r25	; 0x06
    3622:	8d 83       	std	Y+5, r24	; 0x05
    3624:	3f c0       	rjmp	.+126    	; 0x36a4 <F91_void_LCD_init_Command+0x204>
	else if (__tmp > 65535)
    3626:	6f 81       	ldd	r22, Y+7	; 0x07
    3628:	78 85       	ldd	r23, Y+8	; 0x08
    362a:	89 85       	ldd	r24, Y+9	; 0x09
    362c:	9a 85       	ldd	r25, Y+10	; 0x0a
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	3f ef       	ldi	r19, 0xFF	; 255
    3632:	4f e7       	ldi	r20, 0x7F	; 127
    3634:	57 e4       	ldi	r21, 0x47	; 71
    3636:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    363a:	18 16       	cp	r1, r24
    363c:	4c f5       	brge	.+82     	; 0x3690 <F91_void_LCD_init_Command+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3640:	7c 85       	ldd	r23, Y+12	; 0x0c
    3642:	8d 85       	ldd	r24, Y+13	; 0x0d
    3644:	9e 85       	ldd	r25, Y+14	; 0x0e
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	40 e2       	ldi	r20, 0x20	; 32
    364c:	51 e4       	ldi	r21, 0x41	; 65
    364e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	9e 83       	std	Y+6, r25	; 0x06
    3664:	8d 83       	std	Y+5, r24	; 0x05
    3666:	0f c0       	rjmp	.+30     	; 0x3686 <F91_void_LCD_init_Command+0x1e6>
    3668:	88 ec       	ldi	r24, 0xC8	; 200
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	9c 83       	std	Y+4, r25	; 0x04
    366e:	8b 83       	std	Y+3, r24	; 0x03
    3670:	8b 81       	ldd	r24, Y+3	; 0x03
    3672:	9c 81       	ldd	r25, Y+4	; 0x04
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	f1 f7       	brne	.-4      	; 0x3674 <F91_void_LCD_init_Command+0x1d4>
    3678:	9c 83       	std	Y+4, r25	; 0x04
    367a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367c:	8d 81       	ldd	r24, Y+5	; 0x05
    367e:	9e 81       	ldd	r25, Y+6	; 0x06
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	9e 83       	std	Y+6, r25	; 0x06
    3684:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3686:	8d 81       	ldd	r24, Y+5	; 0x05
    3688:	9e 81       	ldd	r25, Y+6	; 0x06
    368a:	00 97       	sbiw	r24, 0x00	; 0
    368c:	69 f7       	brne	.-38     	; 0x3668 <F91_void_LCD_init_Command+0x1c8>
    368e:	14 c0       	rjmp	.+40     	; 0x36b8 <F91_void_LCD_init_Command+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3690:	6f 81       	ldd	r22, Y+7	; 0x07
    3692:	78 85       	ldd	r23, Y+8	; 0x08
    3694:	89 85       	ldd	r24, Y+9	; 0x09
    3696:	9a 85       	ldd	r25, Y+10	; 0x0a
    3698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	9e 83       	std	Y+6, r25	; 0x06
    36a2:	8d 83       	std	Y+5, r24	; 0x05
    36a4:	8d 81       	ldd	r24, Y+5	; 0x05
    36a6:	9e 81       	ldd	r25, Y+6	; 0x06
    36a8:	9a 83       	std	Y+2, r25	; 0x02
    36aa:	89 83       	std	Y+1, r24	; 0x01
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	9a 81       	ldd	r25, Y+2	; 0x02
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <F91_void_LCD_init_Command+0x210>
    36b4:	9a 83       	std	Y+2, r25	; 0x02
    36b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    36b8:	6d 96       	adiw	r28, 0x1d	; 29
    36ba:	0f b6       	in	r0, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	0f be       	out	0x3f, r0	; 63
    36c2:	cd bf       	out	0x3d, r28	; 61
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <F91_void_initLCD>:

void F91_void_initLCD()
{
    36ca:	0f 93       	push	r16
    36cc:	1f 93       	push	r17
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
    36d6:	c4 55       	subi	r28, 0x54	; 84
    36d8:	d0 40       	sbci	r29, 0x00	; 0
    36da:	0f b6       	in	r0, 0x3f	; 63
    36dc:	f8 94       	cli
    36de:	de bf       	out	0x3e, r29	; 62
    36e0:	0f be       	out	0x3f, r0	; 63
    36e2:	cd bf       	out	0x3d, r28	; 61

	F91_void_InitPort(LCD_DATA_PORT , 0x0F);
    36e4:	82 e4       	ldi	r24, 0x42	; 66
    36e6:	6f e0       	ldi	r22, 0x0F	; 15
    36e8:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <F91_void_InitPort>
	F91_void_Initpin(LCD_EN_PORT , LCD_EN_PIN , OUTPUT);
    36ec:	84 e4       	ldi	r24, 0x44	; 68
    36ee:	66 e0       	ldi	r22, 0x06	; 6
    36f0:	70 e0       	ldi	r23, 0x00	; 0
    36f2:	41 e0       	ldi	r20, 0x01	; 1
    36f4:	50 e0       	ldi	r21, 0x00	; 0
    36f6:	0e 94 c5 0b 	call	0x178a	; 0x178a <F91_void_Initpin>
	F91_void_Initpin(LCD_RS_PORT , LCD_RS_PIN , OUTPUT);
    36fa:	81 e4       	ldi	r24, 0x41	; 65
    36fc:	63 e0       	ldi	r22, 0x03	; 3
    36fe:	70 e0       	ldi	r23, 0x00	; 0
    3700:	41 e0       	ldi	r20, 0x01	; 1
    3702:	50 e0       	ldi	r21, 0x00	; 0
    3704:	0e 94 c5 0b 	call	0x178a	; 0x178a <F91_void_Initpin>
	/* after power up , delay 10ms should be existed */
	F91_void_LCD_init_Command(0x30);
    3708:	80 e3       	ldi	r24, 0x30	; 48
    370a:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <F91_void_LCD_init_Command>
    370e:	fe 01       	movw	r30, r28
    3710:	ef 5a       	subi	r30, 0xAF	; 175
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	a0 e2       	ldi	r26, 0x20	; 32
    371a:	b1 e4       	ldi	r27, 0x41	; 65
    371c:	80 83       	st	Z, r24
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	a2 83       	std	Z+2, r26	; 0x02
    3722:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3724:	8e 01       	movw	r16, r28
    3726:	03 5b       	subi	r16, 0xB3	; 179
    3728:	1f 4f       	sbci	r17, 0xFF	; 255
    372a:	fe 01       	movw	r30, r28
    372c:	ef 5a       	subi	r30, 0xAF	; 175
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	60 81       	ld	r22, Z
    3732:	71 81       	ldd	r23, Z+1	; 0x01
    3734:	82 81       	ldd	r24, Z+2	; 0x02
    3736:	93 81       	ldd	r25, Z+3	; 0x03
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	4a ef       	ldi	r20, 0xFA	; 250
    373e:	54 e4       	ldi	r21, 0x44	; 68
    3740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	f8 01       	movw	r30, r16
    374a:	80 83       	st	Z, r24
    374c:	91 83       	std	Z+1, r25	; 0x01
    374e:	a2 83       	std	Z+2, r26	; 0x02
    3750:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3752:	fe 01       	movw	r30, r28
    3754:	e3 5b       	subi	r30, 0xB3	; 179
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	60 81       	ld	r22, Z
    375a:	71 81       	ldd	r23, Z+1	; 0x01
    375c:	82 81       	ldd	r24, Z+2	; 0x02
    375e:	93 81       	ldd	r25, Z+3	; 0x03
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	40 e8       	ldi	r20, 0x80	; 128
    3766:	5f e3       	ldi	r21, 0x3F	; 63
    3768:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    376c:	88 23       	and	r24, r24
    376e:	44 f4       	brge	.+16     	; 0x3780 <F91_void_initLCD+0xb6>
		__ticks = 1;
    3770:	fe 01       	movw	r30, r28
    3772:	e5 5b       	subi	r30, 0xB5	; 181
    3774:	ff 4f       	sbci	r31, 0xFF	; 255
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	91 83       	std	Z+1, r25	; 0x01
    377c:	80 83       	st	Z, r24
    377e:	64 c0       	rjmp	.+200    	; 0x3848 <F91_void_initLCD+0x17e>
	else if (__tmp > 65535)
    3780:	fe 01       	movw	r30, r28
    3782:	e3 5b       	subi	r30, 0xB3	; 179
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	60 81       	ld	r22, Z
    3788:	71 81       	ldd	r23, Z+1	; 0x01
    378a:	82 81       	ldd	r24, Z+2	; 0x02
    378c:	93 81       	ldd	r25, Z+3	; 0x03
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	3f ef       	ldi	r19, 0xFF	; 255
    3792:	4f e7       	ldi	r20, 0x7F	; 127
    3794:	57 e4       	ldi	r21, 0x47	; 71
    3796:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    379a:	18 16       	cp	r1, r24
    379c:	0c f0       	brlt	.+2      	; 0x37a0 <F91_void_initLCD+0xd6>
    379e:	43 c0       	rjmp	.+134    	; 0x3826 <F91_void_initLCD+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37a0:	fe 01       	movw	r30, r28
    37a2:	ef 5a       	subi	r30, 0xAF	; 175
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	60 81       	ld	r22, Z
    37a8:	71 81       	ldd	r23, Z+1	; 0x01
    37aa:	82 81       	ldd	r24, Z+2	; 0x02
    37ac:	93 81       	ldd	r25, Z+3	; 0x03
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	40 e2       	ldi	r20, 0x20	; 32
    37b4:	51 e4       	ldi	r21, 0x41	; 65
    37b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	8e 01       	movw	r16, r28
    37c0:	05 5b       	subi	r16, 0xB5	; 181
    37c2:	1f 4f       	sbci	r17, 0xFF	; 255
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	f8 01       	movw	r30, r16
    37d2:	91 83       	std	Z+1, r25	; 0x01
    37d4:	80 83       	st	Z, r24
    37d6:	1f c0       	rjmp	.+62     	; 0x3816 <F91_void_initLCD+0x14c>
    37d8:	fe 01       	movw	r30, r28
    37da:	e7 5b       	subi	r30, 0xB7	; 183
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	88 ec       	ldi	r24, 0xC8	; 200
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	91 83       	std	Z+1, r25	; 0x01
    37e4:	80 83       	st	Z, r24
    37e6:	fe 01       	movw	r30, r28
    37e8:	e7 5b       	subi	r30, 0xB7	; 183
    37ea:	ff 4f       	sbci	r31, 0xFF	; 255
    37ec:	80 81       	ld	r24, Z
    37ee:	91 81       	ldd	r25, Z+1	; 0x01
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	f1 f7       	brne	.-4      	; 0x37f0 <F91_void_initLCD+0x126>
    37f4:	fe 01       	movw	r30, r28
    37f6:	e7 5b       	subi	r30, 0xB7	; 183
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	91 83       	std	Z+1, r25	; 0x01
    37fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fe:	de 01       	movw	r26, r28
    3800:	a5 5b       	subi	r26, 0xB5	; 181
    3802:	bf 4f       	sbci	r27, 0xFF	; 255
    3804:	fe 01       	movw	r30, r28
    3806:	e5 5b       	subi	r30, 0xB5	; 181
    3808:	ff 4f       	sbci	r31, 0xFF	; 255
    380a:	80 81       	ld	r24, Z
    380c:	91 81       	ldd	r25, Z+1	; 0x01
    380e:	01 97       	sbiw	r24, 0x01	; 1
    3810:	11 96       	adiw	r26, 0x01	; 1
    3812:	9c 93       	st	X, r25
    3814:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3816:	fe 01       	movw	r30, r28
    3818:	e5 5b       	subi	r30, 0xB5	; 181
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	80 81       	ld	r24, Z
    381e:	91 81       	ldd	r25, Z+1	; 0x01
    3820:	00 97       	sbiw	r24, 0x00	; 0
    3822:	d1 f6       	brne	.-76     	; 0x37d8 <F91_void_initLCD+0x10e>
    3824:	27 c0       	rjmp	.+78     	; 0x3874 <F91_void_initLCD+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3826:	8e 01       	movw	r16, r28
    3828:	05 5b       	subi	r16, 0xB5	; 181
    382a:	1f 4f       	sbci	r17, 0xFF	; 255
    382c:	fe 01       	movw	r30, r28
    382e:	e3 5b       	subi	r30, 0xB3	; 179
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	60 81       	ld	r22, Z
    3834:	71 81       	ldd	r23, Z+1	; 0x01
    3836:	82 81       	ldd	r24, Z+2	; 0x02
    3838:	93 81       	ldd	r25, Z+3	; 0x03
    383a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	f8 01       	movw	r30, r16
    3844:	91 83       	std	Z+1, r25	; 0x01
    3846:	80 83       	st	Z, r24
    3848:	de 01       	movw	r26, r28
    384a:	a9 5b       	subi	r26, 0xB9	; 185
    384c:	bf 4f       	sbci	r27, 0xFF	; 255
    384e:	fe 01       	movw	r30, r28
    3850:	e5 5b       	subi	r30, 0xB5	; 181
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	80 81       	ld	r24, Z
    3856:	91 81       	ldd	r25, Z+1	; 0x01
    3858:	8d 93       	st	X+, r24
    385a:	9c 93       	st	X, r25
    385c:	fe 01       	movw	r30, r28
    385e:	e9 5b       	subi	r30, 0xB9	; 185
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	80 81       	ld	r24, Z
    3864:	91 81       	ldd	r25, Z+1	; 0x01
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <F91_void_initLCD+0x19c>
    386a:	fe 01       	movw	r30, r28
    386c:	e9 5b       	subi	r30, 0xB9	; 185
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	91 83       	std	Z+1, r25	; 0x01
    3872:	80 83       	st	Z, r24
	_delay_ms(10);
	F91_void_LCD_init_Command(0x30);
    3874:	80 e3       	ldi	r24, 0x30	; 48
    3876:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <F91_void_LCD_init_Command>
    387a:	fe 01       	movw	r30, r28
    387c:	ed 5b       	subi	r30, 0xBD	; 189
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	a0 e2       	ldi	r26, 0x20	; 32
    3886:	b1 e4       	ldi	r27, 0x41	; 65
    3888:	80 83       	st	Z, r24
    388a:	91 83       	std	Z+1, r25	; 0x01
    388c:	a2 83       	std	Z+2, r26	; 0x02
    388e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3890:	8e 01       	movw	r16, r28
    3892:	01 5c       	subi	r16, 0xC1	; 193
    3894:	1f 4f       	sbci	r17, 0xFF	; 255
    3896:	fe 01       	movw	r30, r28
    3898:	ed 5b       	subi	r30, 0xBD	; 189
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	60 81       	ld	r22, Z
    389e:	71 81       	ldd	r23, Z+1	; 0x01
    38a0:	82 81       	ldd	r24, Z+2	; 0x02
    38a2:	93 81       	ldd	r25, Z+3	; 0x03
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	4a ef       	ldi	r20, 0xFA	; 250
    38aa:	54 e4       	ldi	r21, 0x44	; 68
    38ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	f8 01       	movw	r30, r16
    38b6:	80 83       	st	Z, r24
    38b8:	91 83       	std	Z+1, r25	; 0x01
    38ba:	a2 83       	std	Z+2, r26	; 0x02
    38bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38be:	fe 01       	movw	r30, r28
    38c0:	ff 96       	adiw	r30, 0x3f	; 63
    38c2:	60 81       	ld	r22, Z
    38c4:	71 81       	ldd	r23, Z+1	; 0x01
    38c6:	82 81       	ldd	r24, Z+2	; 0x02
    38c8:	93 81       	ldd	r25, Z+3	; 0x03
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e8       	ldi	r20, 0x80	; 128
    38d0:	5f e3       	ldi	r21, 0x3F	; 63
    38d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38d6:	88 23       	and	r24, r24
    38d8:	2c f4       	brge	.+10     	; 0x38e4 <F91_void_initLCD+0x21a>
		__ticks = 1;
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	9e af       	std	Y+62, r25	; 0x3e
    38e0:	8d af       	std	Y+61, r24	; 0x3d
    38e2:	46 c0       	rjmp	.+140    	; 0x3970 <F91_void_initLCD+0x2a6>
	else if (__tmp > 65535)
    38e4:	fe 01       	movw	r30, r28
    38e6:	ff 96       	adiw	r30, 0x3f	; 63
    38e8:	60 81       	ld	r22, Z
    38ea:	71 81       	ldd	r23, Z+1	; 0x01
    38ec:	82 81       	ldd	r24, Z+2	; 0x02
    38ee:	93 81       	ldd	r25, Z+3	; 0x03
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	3f ef       	ldi	r19, 0xFF	; 255
    38f4:	4f e7       	ldi	r20, 0x7F	; 127
    38f6:	57 e4       	ldi	r21, 0x47	; 71
    38f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38fc:	18 16       	cp	r1, r24
    38fe:	64 f5       	brge	.+88     	; 0x3958 <F91_void_initLCD+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3900:	fe 01       	movw	r30, r28
    3902:	ed 5b       	subi	r30, 0xBD	; 189
    3904:	ff 4f       	sbci	r31, 0xFF	; 255
    3906:	60 81       	ld	r22, Z
    3908:	71 81       	ldd	r23, Z+1	; 0x01
    390a:	82 81       	ldd	r24, Z+2	; 0x02
    390c:	93 81       	ldd	r25, Z+3	; 0x03
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e2       	ldi	r20, 0x20	; 32
    3914:	51 e4       	ldi	r21, 0x41	; 65
    3916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	bc 01       	movw	r22, r24
    3920:	cd 01       	movw	r24, r26
    3922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	9e af       	std	Y+62, r25	; 0x3e
    392c:	8d af       	std	Y+61, r24	; 0x3d
    392e:	0f c0       	rjmp	.+30     	; 0x394e <F91_void_initLCD+0x284>
    3930:	88 ec       	ldi	r24, 0xC8	; 200
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	9c af       	std	Y+60, r25	; 0x3c
    3936:	8b af       	std	Y+59, r24	; 0x3b
    3938:	8b ad       	ldd	r24, Y+59	; 0x3b
    393a:	9c ad       	ldd	r25, Y+60	; 0x3c
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <F91_void_initLCD+0x272>
    3940:	9c af       	std	Y+60, r25	; 0x3c
    3942:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3944:	8d ad       	ldd	r24, Y+61	; 0x3d
    3946:	9e ad       	ldd	r25, Y+62	; 0x3e
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	9e af       	std	Y+62, r25	; 0x3e
    394c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    394e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3950:	9e ad       	ldd	r25, Y+62	; 0x3e
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	69 f7       	brne	.-38     	; 0x3930 <F91_void_initLCD+0x266>
    3956:	16 c0       	rjmp	.+44     	; 0x3984 <F91_void_initLCD+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3958:	fe 01       	movw	r30, r28
    395a:	ff 96       	adiw	r30, 0x3f	; 63
    395c:	60 81       	ld	r22, Z
    395e:	71 81       	ldd	r23, Z+1	; 0x01
    3960:	82 81       	ldd	r24, Z+2	; 0x02
    3962:	93 81       	ldd	r25, Z+3	; 0x03
    3964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	9e af       	std	Y+62, r25	; 0x3e
    396e:	8d af       	std	Y+61, r24	; 0x3d
    3970:	8d ad       	ldd	r24, Y+61	; 0x3d
    3972:	9e ad       	ldd	r25, Y+62	; 0x3e
    3974:	9a af       	std	Y+58, r25	; 0x3a
    3976:	89 af       	std	Y+57, r24	; 0x39
    3978:	89 ad       	ldd	r24, Y+57	; 0x39
    397a:	9a ad       	ldd	r25, Y+58	; 0x3a
    397c:	01 97       	sbiw	r24, 0x01	; 1
    397e:	f1 f7       	brne	.-4      	; 0x397c <F91_void_initLCD+0x2b2>
    3980:	9a af       	std	Y+58, r25	; 0x3a
    3982:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	F91_void_LCD_init_Command(0x30);
    3984:	80 e3       	ldi	r24, 0x30	; 48
    3986:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <F91_void_LCD_init_Command>
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	a0 e2       	ldi	r26, 0x20	; 32
    3990:	b1 e4       	ldi	r27, 0x41	; 65
    3992:	8d ab       	std	Y+53, r24	; 0x35
    3994:	9e ab       	std	Y+54, r25	; 0x36
    3996:	af ab       	std	Y+55, r26	; 0x37
    3998:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    399a:	6d a9       	ldd	r22, Y+53	; 0x35
    399c:	7e a9       	ldd	r23, Y+54	; 0x36
    399e:	8f a9       	ldd	r24, Y+55	; 0x37
    39a0:	98 ad       	ldd	r25, Y+56	; 0x38
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	4a ef       	ldi	r20, 0xFA	; 250
    39a8:	54 e4       	ldi	r21, 0x44	; 68
    39aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	89 ab       	std	Y+49, r24	; 0x31
    39b4:	9a ab       	std	Y+50, r25	; 0x32
    39b6:	ab ab       	std	Y+51, r26	; 0x33
    39b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39ba:	69 a9       	ldd	r22, Y+49	; 0x31
    39bc:	7a a9       	ldd	r23, Y+50	; 0x32
    39be:	8b a9       	ldd	r24, Y+51	; 0x33
    39c0:	9c a9       	ldd	r25, Y+52	; 0x34
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	40 e8       	ldi	r20, 0x80	; 128
    39c8:	5f e3       	ldi	r21, 0x3F	; 63
    39ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ce:	88 23       	and	r24, r24
    39d0:	2c f4       	brge	.+10     	; 0x39dc <F91_void_initLCD+0x312>
		__ticks = 1;
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	98 ab       	std	Y+48, r25	; 0x30
    39d8:	8f a7       	std	Y+47, r24	; 0x2f
    39da:	3f c0       	rjmp	.+126    	; 0x3a5a <F91_void_initLCD+0x390>
	else if (__tmp > 65535)
    39dc:	69 a9       	ldd	r22, Y+49	; 0x31
    39de:	7a a9       	ldd	r23, Y+50	; 0x32
    39e0:	8b a9       	ldd	r24, Y+51	; 0x33
    39e2:	9c a9       	ldd	r25, Y+52	; 0x34
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	3f ef       	ldi	r19, 0xFF	; 255
    39e8:	4f e7       	ldi	r20, 0x7F	; 127
    39ea:	57 e4       	ldi	r21, 0x47	; 71
    39ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39f0:	18 16       	cp	r1, r24
    39f2:	4c f5       	brge	.+82     	; 0x3a46 <F91_void_initLCD+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f4:	6d a9       	ldd	r22, Y+53	; 0x35
    39f6:	7e a9       	ldd	r23, Y+54	; 0x36
    39f8:	8f a9       	ldd	r24, Y+55	; 0x37
    39fa:	98 ad       	ldd	r25, Y+56	; 0x38
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e2       	ldi	r20, 0x20	; 32
    3a02:	51 e4       	ldi	r21, 0x41	; 65
    3a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	bc 01       	movw	r22, r24
    3a0e:	cd 01       	movw	r24, r26
    3a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	98 ab       	std	Y+48, r25	; 0x30
    3a1a:	8f a7       	std	Y+47, r24	; 0x2f
    3a1c:	0f c0       	rjmp	.+30     	; 0x3a3c <F91_void_initLCD+0x372>
    3a1e:	88 ec       	ldi	r24, 0xC8	; 200
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	9e a7       	std	Y+46, r25	; 0x2e
    3a24:	8d a7       	std	Y+45, r24	; 0x2d
    3a26:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a28:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	f1 f7       	brne	.-4      	; 0x3a2a <F91_void_initLCD+0x360>
    3a2e:	9e a7       	std	Y+46, r25	; 0x2e
    3a30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a32:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a34:	98 a9       	ldd	r25, Y+48	; 0x30
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	98 ab       	std	Y+48, r25	; 0x30
    3a3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a3e:	98 a9       	ldd	r25, Y+48	; 0x30
    3a40:	00 97       	sbiw	r24, 0x00	; 0
    3a42:	69 f7       	brne	.-38     	; 0x3a1e <F91_void_initLCD+0x354>
    3a44:	14 c0       	rjmp	.+40     	; 0x3a6e <F91_void_initLCD+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a46:	69 a9       	ldd	r22, Y+49	; 0x31
    3a48:	7a a9       	ldd	r23, Y+50	; 0x32
    3a4a:	8b a9       	ldd	r24, Y+51	; 0x33
    3a4c:	9c a9       	ldd	r25, Y+52	; 0x34
    3a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	98 ab       	std	Y+48, r25	; 0x30
    3a58:	8f a7       	std	Y+47, r24	; 0x2f
    3a5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a5c:	98 a9       	ldd	r25, Y+48	; 0x30
    3a5e:	9c a7       	std	Y+44, r25	; 0x2c
    3a60:	8b a7       	std	Y+43, r24	; 0x2b
    3a62:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a64:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	f1 f7       	brne	.-4      	; 0x3a66 <F91_void_initLCD+0x39c>
    3a6a:	9c a7       	std	Y+44, r25	; 0x2c
    3a6c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	F91_void_LCD_init_Command(0x20);
    3a6e:	80 e2       	ldi	r24, 0x20	; 32
    3a70:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <F91_void_LCD_init_Command>
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	a0 e2       	ldi	r26, 0x20	; 32
    3a7a:	b1 e4       	ldi	r27, 0x41	; 65
    3a7c:	8f a3       	std	Y+39, r24	; 0x27
    3a7e:	98 a7       	std	Y+40, r25	; 0x28
    3a80:	a9 a7       	std	Y+41, r26	; 0x29
    3a82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a84:	6f a1       	ldd	r22, Y+39	; 0x27
    3a86:	78 a5       	ldd	r23, Y+40	; 0x28
    3a88:	89 a5       	ldd	r24, Y+41	; 0x29
    3a8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	4a ef       	ldi	r20, 0xFA	; 250
    3a92:	54 e4       	ldi	r21, 0x44	; 68
    3a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	8b a3       	std	Y+35, r24	; 0x23
    3a9e:	9c a3       	std	Y+36, r25	; 0x24
    3aa0:	ad a3       	std	Y+37, r26	; 0x25
    3aa2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3aa4:	6b a1       	ldd	r22, Y+35	; 0x23
    3aa6:	7c a1       	ldd	r23, Y+36	; 0x24
    3aa8:	8d a1       	ldd	r24, Y+37	; 0x25
    3aaa:	9e a1       	ldd	r25, Y+38	; 0x26
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e8       	ldi	r20, 0x80	; 128
    3ab2:	5f e3       	ldi	r21, 0x3F	; 63
    3ab4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ab8:	88 23       	and	r24, r24
    3aba:	2c f4       	brge	.+10     	; 0x3ac6 <F91_void_initLCD+0x3fc>
		__ticks = 1;
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	9a a3       	std	Y+34, r25	; 0x22
    3ac2:	89 a3       	std	Y+33, r24	; 0x21
    3ac4:	3f c0       	rjmp	.+126    	; 0x3b44 <F91_void_initLCD+0x47a>
	else if (__tmp > 65535)
    3ac6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ac8:	7c a1       	ldd	r23, Y+36	; 0x24
    3aca:	8d a1       	ldd	r24, Y+37	; 0x25
    3acc:	9e a1       	ldd	r25, Y+38	; 0x26
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	3f ef       	ldi	r19, 0xFF	; 255
    3ad2:	4f e7       	ldi	r20, 0x7F	; 127
    3ad4:	57 e4       	ldi	r21, 0x47	; 71
    3ad6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ada:	18 16       	cp	r1, r24
    3adc:	4c f5       	brge	.+82     	; 0x3b30 <F91_void_initLCD+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ade:	6f a1       	ldd	r22, Y+39	; 0x27
    3ae0:	78 a5       	ldd	r23, Y+40	; 0x28
    3ae2:	89 a5       	ldd	r24, Y+41	; 0x29
    3ae4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	40 e2       	ldi	r20, 0x20	; 32
    3aec:	51 e4       	ldi	r21, 0x41	; 65
    3aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	bc 01       	movw	r22, r24
    3af8:	cd 01       	movw	r24, r26
    3afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afe:	dc 01       	movw	r26, r24
    3b00:	cb 01       	movw	r24, r22
    3b02:	9a a3       	std	Y+34, r25	; 0x22
    3b04:	89 a3       	std	Y+33, r24	; 0x21
    3b06:	0f c0       	rjmp	.+30     	; 0x3b26 <F91_void_initLCD+0x45c>
    3b08:	88 ec       	ldi	r24, 0xC8	; 200
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	98 a3       	std	Y+32, r25	; 0x20
    3b0e:	8f 8f       	std	Y+31, r24	; 0x1f
    3b10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b12:	98 a1       	ldd	r25, Y+32	; 0x20
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	f1 f7       	brne	.-4      	; 0x3b14 <F91_void_initLCD+0x44a>
    3b18:	98 a3       	std	Y+32, r25	; 0x20
    3b1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b1c:	89 a1       	ldd	r24, Y+33	; 0x21
    3b1e:	9a a1       	ldd	r25, Y+34	; 0x22
    3b20:	01 97       	sbiw	r24, 0x01	; 1
    3b22:	9a a3       	std	Y+34, r25	; 0x22
    3b24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b26:	89 a1       	ldd	r24, Y+33	; 0x21
    3b28:	9a a1       	ldd	r25, Y+34	; 0x22
    3b2a:	00 97       	sbiw	r24, 0x00	; 0
    3b2c:	69 f7       	brne	.-38     	; 0x3b08 <F91_void_initLCD+0x43e>
    3b2e:	14 c0       	rjmp	.+40     	; 0x3b58 <F91_void_initLCD+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b30:	6b a1       	ldd	r22, Y+35	; 0x23
    3b32:	7c a1       	ldd	r23, Y+36	; 0x24
    3b34:	8d a1       	ldd	r24, Y+37	; 0x25
    3b36:	9e a1       	ldd	r25, Y+38	; 0x26
    3b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	9a a3       	std	Y+34, r25	; 0x22
    3b42:	89 a3       	std	Y+33, r24	; 0x21
    3b44:	89 a1       	ldd	r24, Y+33	; 0x21
    3b46:	9a a1       	ldd	r25, Y+34	; 0x22
    3b48:	9e 8f       	std	Y+30, r25	; 0x1e
    3b4a:	8d 8f       	std	Y+29, r24	; 0x1d
    3b4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b50:	01 97       	sbiw	r24, 0x01	; 1
    3b52:	f1 f7       	brne	.-4      	; 0x3b50 <F91_void_initLCD+0x486>
    3b54:	9e 8f       	std	Y+30, r25	; 0x1e
    3b56:	8d 8f       	std	Y+29, r24	; 0x1d
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	a0 e2       	ldi	r26, 0x20	; 32
    3b5e:	b1 e4       	ldi	r27, 0x41	; 65
    3b60:	89 8f       	std	Y+25, r24	; 0x19
    3b62:	9a 8f       	std	Y+26, r25	; 0x1a
    3b64:	ab 8f       	std	Y+27, r26	; 0x1b
    3b66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b68:	69 8d       	ldd	r22, Y+25	; 0x19
    3b6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	4a ef       	ldi	r20, 0xFA	; 250
    3b76:	54 e4       	ldi	r21, 0x44	; 68
    3b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	8d 8b       	std	Y+21, r24	; 0x15
    3b82:	9e 8b       	std	Y+22, r25	; 0x16
    3b84:	af 8b       	std	Y+23, r26	; 0x17
    3b86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b88:	6d 89       	ldd	r22, Y+21	; 0x15
    3b8a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b8e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	40 e8       	ldi	r20, 0x80	; 128
    3b96:	5f e3       	ldi	r21, 0x3F	; 63
    3b98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b9c:	88 23       	and	r24, r24
    3b9e:	2c f4       	brge	.+10     	; 0x3baa <F91_void_initLCD+0x4e0>
		__ticks = 1;
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	9c 8b       	std	Y+20, r25	; 0x14
    3ba6:	8b 8b       	std	Y+19, r24	; 0x13
    3ba8:	3f c0       	rjmp	.+126    	; 0x3c28 <F91_void_initLCD+0x55e>
	else if (__tmp > 65535)
    3baa:	6d 89       	ldd	r22, Y+21	; 0x15
    3bac:	7e 89       	ldd	r23, Y+22	; 0x16
    3bae:	8f 89       	ldd	r24, Y+23	; 0x17
    3bb0:	98 8d       	ldd	r25, Y+24	; 0x18
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	3f ef       	ldi	r19, 0xFF	; 255
    3bb6:	4f e7       	ldi	r20, 0x7F	; 127
    3bb8:	57 e4       	ldi	r21, 0x47	; 71
    3bba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bbe:	18 16       	cp	r1, r24
    3bc0:	4c f5       	brge	.+82     	; 0x3c14 <F91_void_initLCD+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc2:	69 8d       	ldd	r22, Y+25	; 0x19
    3bc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e2       	ldi	r20, 0x20	; 32
    3bd0:	51 e4       	ldi	r21, 0x41	; 65
    3bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	bc 01       	movw	r22, r24
    3bdc:	cd 01       	movw	r24, r26
    3bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	9c 8b       	std	Y+20, r25	; 0x14
    3be8:	8b 8b       	std	Y+19, r24	; 0x13
    3bea:	0f c0       	rjmp	.+30     	; 0x3c0a <F91_void_initLCD+0x540>
    3bec:	88 ec       	ldi	r24, 0xC8	; 200
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	9a 8b       	std	Y+18, r25	; 0x12
    3bf2:	89 8b       	std	Y+17, r24	; 0x11
    3bf4:	89 89       	ldd	r24, Y+17	; 0x11
    3bf6:	9a 89       	ldd	r25, Y+18	; 0x12
    3bf8:	01 97       	sbiw	r24, 0x01	; 1
    3bfa:	f1 f7       	brne	.-4      	; 0x3bf8 <F91_void_initLCD+0x52e>
    3bfc:	9a 8b       	std	Y+18, r25	; 0x12
    3bfe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c00:	8b 89       	ldd	r24, Y+19	; 0x13
    3c02:	9c 89       	ldd	r25, Y+20	; 0x14
    3c04:	01 97       	sbiw	r24, 0x01	; 1
    3c06:	9c 8b       	std	Y+20, r25	; 0x14
    3c08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c0e:	00 97       	sbiw	r24, 0x00	; 0
    3c10:	69 f7       	brne	.-38     	; 0x3bec <F91_void_initLCD+0x522>
    3c12:	14 c0       	rjmp	.+40     	; 0x3c3c <F91_void_initLCD+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c14:	6d 89       	ldd	r22, Y+21	; 0x15
    3c16:	7e 89       	ldd	r23, Y+22	; 0x16
    3c18:	8f 89       	ldd	r24, Y+23	; 0x17
    3c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	9c 8b       	std	Y+20, r25	; 0x14
    3c26:	8b 8b       	std	Y+19, r24	; 0x13
    3c28:	8b 89       	ldd	r24, Y+19	; 0x13
    3c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c2c:	98 8b       	std	Y+16, r25	; 0x10
    3c2e:	8f 87       	std	Y+15, r24	; 0x0f
    3c30:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c32:	98 89       	ldd	r25, Y+16	; 0x10
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	f1 f7       	brne	.-4      	; 0x3c34 <F91_void_initLCD+0x56a>
    3c38:	98 8b       	std	Y+16, r25	; 0x10
    3c3a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	_delay_ms(10);
	F91_void_LCD_Send_Command(0x28);            /* Command ..0x28---> 4-bit mode - 2 line - 5x7 font */
    3c3c:	88 e2       	ldi	r24, 0x28	; 40
    3c3e:	0e 94 42 18 	call	0x3084	; 0x3084 <F91_void_LCD_Send_Command>
	F91_void_LCD_Send_Command(0x0C);            /* Command ..0x0C---> Display no cursor - no blink */
    3c42:	8c e0       	ldi	r24, 0x0C	; 12
    3c44:	0e 94 42 18 	call	0x3084	; 0x3084 <F91_void_LCD_Send_Command>
	F91_void_LCD_Send_Command(0x06);            /* Command ..0x06---> Automatic Increment - No Display shift */
    3c48:	86 e0       	ldi	r24, 0x06	; 6
    3c4a:	0e 94 42 18 	call	0x3084	; 0x3084 <F91_void_LCD_Send_Command>
	F91_void_LCD_Send_Command(0x80);            /* Command ..0x80---> Address DDRAM with 0 offset 80h */
    3c4e:	80 e8       	ldi	r24, 0x80	; 128
    3c50:	0e 94 42 18 	call	0x3084	; 0x3084 <F91_void_LCD_Send_Command>
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	a0 ea       	ldi	r26, 0xA0	; 160
    3c5a:	b1 e4       	ldi	r27, 0x41	; 65
    3c5c:	8b 87       	std	Y+11, r24	; 0x0b
    3c5e:	9c 87       	std	Y+12, r25	; 0x0c
    3c60:	ad 87       	std	Y+13, r26	; 0x0d
    3c62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c64:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c66:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c68:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	4a ef       	ldi	r20, 0xFA	; 250
    3c72:	54 e4       	ldi	r21, 0x44	; 68
    3c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	8f 83       	std	Y+7, r24	; 0x07
    3c7e:	98 87       	std	Y+8, r25	; 0x08
    3c80:	a9 87       	std	Y+9, r26	; 0x09
    3c82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c84:	6f 81       	ldd	r22, Y+7	; 0x07
    3c86:	78 85       	ldd	r23, Y+8	; 0x08
    3c88:	89 85       	ldd	r24, Y+9	; 0x09
    3c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 e8       	ldi	r20, 0x80	; 128
    3c92:	5f e3       	ldi	r21, 0x3F	; 63
    3c94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c98:	88 23       	and	r24, r24
    3c9a:	2c f4       	brge	.+10     	; 0x3ca6 <F91_void_initLCD+0x5dc>
		__ticks = 1;
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	9e 83       	std	Y+6, r25	; 0x06
    3ca2:	8d 83       	std	Y+5, r24	; 0x05
    3ca4:	3f c0       	rjmp	.+126    	; 0x3d24 <F91_void_initLCD+0x65a>
	else if (__tmp > 65535)
    3ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca8:	78 85       	ldd	r23, Y+8	; 0x08
    3caa:	89 85       	ldd	r24, Y+9	; 0x09
    3cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	3f ef       	ldi	r19, 0xFF	; 255
    3cb2:	4f e7       	ldi	r20, 0x7F	; 127
    3cb4:	57 e4       	ldi	r21, 0x47	; 71
    3cb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cba:	18 16       	cp	r1, r24
    3cbc:	4c f5       	brge	.+82     	; 0x3d10 <F91_void_initLCD+0x646>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc6:	20 e0       	ldi	r18, 0x00	; 0
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	40 e2       	ldi	r20, 0x20	; 32
    3ccc:	51 e4       	ldi	r21, 0x41	; 65
    3cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd2:	dc 01       	movw	r26, r24
    3cd4:	cb 01       	movw	r24, r22
    3cd6:	bc 01       	movw	r22, r24
    3cd8:	cd 01       	movw	r24, r26
    3cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cde:	dc 01       	movw	r26, r24
    3ce0:	cb 01       	movw	r24, r22
    3ce2:	9e 83       	std	Y+6, r25	; 0x06
    3ce4:	8d 83       	std	Y+5, r24	; 0x05
    3ce6:	0f c0       	rjmp	.+30     	; 0x3d06 <F91_void_initLCD+0x63c>
    3ce8:	88 ec       	ldi	r24, 0xC8	; 200
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	9c 83       	std	Y+4, r25	; 0x04
    3cee:	8b 83       	std	Y+3, r24	; 0x03
    3cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf4:	01 97       	sbiw	r24, 0x01	; 1
    3cf6:	f1 f7       	brne	.-4      	; 0x3cf4 <F91_void_initLCD+0x62a>
    3cf8:	9c 83       	std	Y+4, r25	; 0x04
    3cfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    3d00:	01 97       	sbiw	r24, 0x01	; 1
    3d02:	9e 83       	std	Y+6, r25	; 0x06
    3d04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d06:	8d 81       	ldd	r24, Y+5	; 0x05
    3d08:	9e 81       	ldd	r25, Y+6	; 0x06
    3d0a:	00 97       	sbiw	r24, 0x00	; 0
    3d0c:	69 f7       	brne	.-38     	; 0x3ce8 <F91_void_initLCD+0x61e>
    3d0e:	14 c0       	rjmp	.+40     	; 0x3d38 <F91_void_initLCD+0x66e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d10:	6f 81       	ldd	r22, Y+7	; 0x07
    3d12:	78 85       	ldd	r23, Y+8	; 0x08
    3d14:	89 85       	ldd	r24, Y+9	; 0x09
    3d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	cb 01       	movw	r24, r22
    3d20:	9e 83       	std	Y+6, r25	; 0x06
    3d22:	8d 83       	std	Y+5, r24	; 0x05
    3d24:	8d 81       	ldd	r24, Y+5	; 0x05
    3d26:	9e 81       	ldd	r25, Y+6	; 0x06
    3d28:	9a 83       	std	Y+2, r25	; 0x02
    3d2a:	89 83       	std	Y+1, r24	; 0x01
    3d2c:	89 81       	ldd	r24, Y+1	; 0x01
    3d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d30:	01 97       	sbiw	r24, 0x01	; 1
    3d32:	f1 f7       	brne	.-4      	; 0x3d30 <F91_void_initLCD+0x666>
    3d34:	9a 83       	std	Y+2, r25	; 0x02
    3d36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3d38:	cc 5a       	subi	r28, 0xAC	; 172
    3d3a:	df 4f       	sbci	r29, 0xFF	; 255
    3d3c:	0f b6       	in	r0, 0x3f	; 63
    3d3e:	f8 94       	cli
    3d40:	de bf       	out	0x3e, r29	; 62
    3d42:	0f be       	out	0x3f, r0	; 63
    3d44:	cd bf       	out	0x3d, r28	; 61
    3d46:	cf 91       	pop	r28
    3d48:	df 91       	pop	r29
    3d4a:	1f 91       	pop	r17
    3d4c:	0f 91       	pop	r16
    3d4e:	08 95       	ret

00003d50 <F91_void_LCD_Clear_Screen>:


void F91_void_LCD_Clear_Screen(void)
{
    3d50:	df 93       	push	r29
    3d52:	cf 93       	push	r28
    3d54:	cd b7       	in	r28, 0x3d	; 61
    3d56:	de b7       	in	r29, 0x3e	; 62
    3d58:	2e 97       	sbiw	r28, 0x0e	; 14
    3d5a:	0f b6       	in	r0, 0x3f	; 63
    3d5c:	f8 94       	cli
    3d5e:	de bf       	out	0x3e, r29	; 62
    3d60:	0f be       	out	0x3f, r0	; 63
    3d62:	cd bf       	out	0x3d, r28	; 61
	F91_void_LCD_Send_Command(0x01);
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	0e 94 42 18 	call	0x3084	; 0x3084 <F91_void_LCD_Send_Command>
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	a0 e2       	ldi	r26, 0x20	; 32
    3d70:	b1 e4       	ldi	r27, 0x41	; 65
    3d72:	8b 87       	std	Y+11, r24	; 0x0b
    3d74:	9c 87       	std	Y+12, r25	; 0x0c
    3d76:	ad 87       	std	Y+13, r26	; 0x0d
    3d78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	4a ef       	ldi	r20, 0xFA	; 250
    3d88:	54 e4       	ldi	r21, 0x44	; 68
    3d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d8e:	dc 01       	movw	r26, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	8f 83       	std	Y+7, r24	; 0x07
    3d94:	98 87       	std	Y+8, r25	; 0x08
    3d96:	a9 87       	std	Y+9, r26	; 0x09
    3d98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d9c:	78 85       	ldd	r23, Y+8	; 0x08
    3d9e:	89 85       	ldd	r24, Y+9	; 0x09
    3da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	40 e8       	ldi	r20, 0x80	; 128
    3da8:	5f e3       	ldi	r21, 0x3F	; 63
    3daa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dae:	88 23       	and	r24, r24
    3db0:	2c f4       	brge	.+10     	; 0x3dbc <F91_void_LCD_Clear_Screen+0x6c>
		__ticks = 1;
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	9e 83       	std	Y+6, r25	; 0x06
    3db8:	8d 83       	std	Y+5, r24	; 0x05
    3dba:	3f c0       	rjmp	.+126    	; 0x3e3a <F91_void_LCD_Clear_Screen+0xea>
	else if (__tmp > 65535)
    3dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dbe:	78 85       	ldd	r23, Y+8	; 0x08
    3dc0:	89 85       	ldd	r24, Y+9	; 0x09
    3dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	3f ef       	ldi	r19, 0xFF	; 255
    3dc8:	4f e7       	ldi	r20, 0x7F	; 127
    3dca:	57 e4       	ldi	r21, 0x47	; 71
    3dcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dd0:	18 16       	cp	r1, r24
    3dd2:	4c f5       	brge	.+82     	; 0x3e26 <F91_void_LCD_Clear_Screen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ddc:	20 e0       	ldi	r18, 0x00	; 0
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	40 e2       	ldi	r20, 0x20	; 32
    3de2:	51 e4       	ldi	r21, 0x41	; 65
    3de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de8:	dc 01       	movw	r26, r24
    3dea:	cb 01       	movw	r24, r22
    3dec:	bc 01       	movw	r22, r24
    3dee:	cd 01       	movw	r24, r26
    3df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	9e 83       	std	Y+6, r25	; 0x06
    3dfa:	8d 83       	std	Y+5, r24	; 0x05
    3dfc:	0f c0       	rjmp	.+30     	; 0x3e1c <F91_void_LCD_Clear_Screen+0xcc>
    3dfe:	88 ec       	ldi	r24, 0xC8	; 200
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	9c 83       	std	Y+4, r25	; 0x04
    3e04:	8b 83       	std	Y+3, r24	; 0x03
    3e06:	8b 81       	ldd	r24, Y+3	; 0x03
    3e08:	9c 81       	ldd	r25, Y+4	; 0x04
    3e0a:	01 97       	sbiw	r24, 0x01	; 1
    3e0c:	f1 f7       	brne	.-4      	; 0x3e0a <F91_void_LCD_Clear_Screen+0xba>
    3e0e:	9c 83       	std	Y+4, r25	; 0x04
    3e10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e12:	8d 81       	ldd	r24, Y+5	; 0x05
    3e14:	9e 81       	ldd	r25, Y+6	; 0x06
    3e16:	01 97       	sbiw	r24, 0x01	; 1
    3e18:	9e 83       	std	Y+6, r25	; 0x06
    3e1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e20:	00 97       	sbiw	r24, 0x00	; 0
    3e22:	69 f7       	brne	.-38     	; 0x3dfe <F91_void_LCD_Clear_Screen+0xae>
    3e24:	14 c0       	rjmp	.+40     	; 0x3e4e <F91_void_LCD_Clear_Screen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e26:	6f 81       	ldd	r22, Y+7	; 0x07
    3e28:	78 85       	ldd	r23, Y+8	; 0x08
    3e2a:	89 85       	ldd	r24, Y+9	; 0x09
    3e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	9e 83       	std	Y+6, r25	; 0x06
    3e38:	8d 83       	std	Y+5, r24	; 0x05
    3e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e3e:	9a 83       	std	Y+2, r25	; 0x02
    3e40:	89 83       	std	Y+1, r24	; 0x01
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	9a 81       	ldd	r25, Y+2	; 0x02
    3e46:	01 97       	sbiw	r24, 0x01	; 1
    3e48:	f1 f7       	brne	.-4      	; 0x3e46 <F91_void_LCD_Clear_Screen+0xf6>
    3e4a:	9a 83       	std	Y+2, r25	; 0x02
    3e4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    3e4e:	2e 96       	adiw	r28, 0x0e	; 14
    3e50:	0f b6       	in	r0, 0x3f	; 63
    3e52:	f8 94       	cli
    3e54:	de bf       	out	0x3e, r29	; 62
    3e56:	0f be       	out	0x3f, r0	; 63
    3e58:	cd bf       	out	0x3d, r28	; 61
    3e5a:	cf 91       	pop	r28
    3e5c:	df 91       	pop	r29
    3e5e:	08 95       	ret

00003e60 <F91_void_LCD_print>:

void F91_void_LCD_print( char *string)
{
    3e60:	df 93       	push	r29
    3e62:	cf 93       	push	r28
    3e64:	00 d0       	rcall	.+0      	; 0x3e66 <F91_void_LCD_print+0x6>
    3e66:	00 d0       	rcall	.+0      	; 0x3e68 <F91_void_LCD_print+0x8>
    3e68:	cd b7       	in	r28, 0x3d	; 61
    3e6a:	de b7       	in	r29, 0x3e	; 62
    3e6c:	9c 83       	std	Y+4, r25	; 0x04
    3e6e:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    3e70:	1a 82       	std	Y+2, r1	; 0x02
    3e72:	19 82       	std	Y+1, r1	; 0x01
    3e74:	0f c0       	rjmp	.+30     	; 0x3e94 <F91_void_LCD_print+0x34>

	while( string[i]  != 0)
	{
		F91_void_LCD_Send_Data(string[i]);
    3e76:	29 81       	ldd	r18, Y+1	; 0x01
    3e78:	3a 81       	ldd	r19, Y+2	; 0x02
    3e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e7e:	fc 01       	movw	r30, r24
    3e80:	e2 0f       	add	r30, r18
    3e82:	f3 1f       	adc	r31, r19
    3e84:	80 81       	ld	r24, Z
    3e86:	0e 94 34 16 	call	0x2c68	; 0x2c68 <F91_void_LCD_Send_Data>
		i++;
    3e8a:	89 81       	ldd	r24, Y+1	; 0x01
    3e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e8e:	01 96       	adiw	r24, 0x01	; 1
    3e90:	9a 83       	std	Y+2, r25	; 0x02
    3e92:	89 83       	std	Y+1, r24	; 0x01

void F91_void_LCD_print( char *string)
{
	int i = 0;

	while( string[i]  != 0)
    3e94:	29 81       	ldd	r18, Y+1	; 0x01
    3e96:	3a 81       	ldd	r19, Y+2	; 0x02
    3e98:	8b 81       	ldd	r24, Y+3	; 0x03
    3e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	e2 0f       	add	r30, r18
    3ea0:	f3 1f       	adc	r31, r19
    3ea2:	80 81       	ld	r24, Z
    3ea4:	88 23       	and	r24, r24
    3ea6:	39 f7       	brne	.-50     	; 0x3e76 <F91_void_LCD_print+0x16>
	{
		F91_void_LCD_Send_Data(string[i]);
		i++;
	}
}
    3ea8:	0f 90       	pop	r0
    3eaa:	0f 90       	pop	r0
    3eac:	0f 90       	pop	r0
    3eae:	0f 90       	pop	r0
    3eb0:	cf 91       	pop	r28
    3eb2:	df 91       	pop	r29
    3eb4:	08 95       	ret

00003eb6 <F91_void_LCD_goto>:


void F91_void_LCD_goto(char y, char x)
{
    3eb6:	df 93       	push	r29
    3eb8:	cf 93       	push	r28
    3eba:	cd b7       	in	r28, 0x3d	; 61
    3ebc:	de b7       	in	r29, 0x3e	; 62
    3ebe:	64 97       	sbiw	r28, 0x14	; 20
    3ec0:	0f b6       	in	r0, 0x3f	; 63
    3ec2:	f8 94       	cli
    3ec4:	de bf       	out	0x3e, r29	; 62
    3ec6:	0f be       	out	0x3f, r0	; 63
    3ec8:	cd bf       	out	0x3d, r28	; 61
    3eca:	8b 8b       	std	Y+19, r24	; 0x13
    3ecc:	6c 8b       	std	Y+20, r22	; 0x14
	char firstAddress[] = {0x80,0xC0,0x94,0xD4};
    3ece:	80 e8       	ldi	r24, 0x80	; 128
    3ed0:	8f 87       	std	Y+15, r24	; 0x0f
    3ed2:	80 ec       	ldi	r24, 0xC0	; 192
    3ed4:	88 8b       	std	Y+16, r24	; 0x10
    3ed6:	84 e9       	ldi	r24, 0x94	; 148
    3ed8:	89 8b       	std	Y+17, r24	; 0x11
    3eda:	84 ed       	ldi	r24, 0xD4	; 212
    3edc:	8a 8b       	std	Y+18, r24	; 0x12

	F91_void_LCD_Send_Command(firstAddress[y-1] + x-1);
    3ede:	8b 89       	ldd	r24, Y+19	; 0x13
    3ee0:	88 2f       	mov	r24, r24
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	9c 01       	movw	r18, r24
    3ee6:	21 50       	subi	r18, 0x01	; 1
    3ee8:	30 40       	sbci	r19, 0x00	; 0
    3eea:	ce 01       	movw	r24, r28
    3eec:	0f 96       	adiw	r24, 0x0f	; 15
    3eee:	fc 01       	movw	r30, r24
    3ef0:	e2 0f       	add	r30, r18
    3ef2:	f3 1f       	adc	r31, r19
    3ef4:	90 81       	ld	r25, Z
    3ef6:	8c 89       	ldd	r24, Y+20	; 0x14
    3ef8:	89 0f       	add	r24, r25
    3efa:	81 50       	subi	r24, 0x01	; 1
    3efc:	0e 94 42 18 	call	0x3084	; 0x3084 <F91_void_LCD_Send_Command>
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	a0 ea       	ldi	r26, 0xA0	; 160
    3f06:	b1 e4       	ldi	r27, 0x41	; 65
    3f08:	8b 87       	std	Y+11, r24	; 0x0b
    3f0a:	9c 87       	std	Y+12, r25	; 0x0c
    3f0c:	ad 87       	std	Y+13, r26	; 0x0d
    3f0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f18:	20 e0       	ldi	r18, 0x00	; 0
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	4a ef       	ldi	r20, 0xFA	; 250
    3f1e:	54 e4       	ldi	r21, 0x44	; 68
    3f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f24:	dc 01       	movw	r26, r24
    3f26:	cb 01       	movw	r24, r22
    3f28:	8f 83       	std	Y+7, r24	; 0x07
    3f2a:	98 87       	std	Y+8, r25	; 0x08
    3f2c:	a9 87       	std	Y+9, r26	; 0x09
    3f2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f30:	6f 81       	ldd	r22, Y+7	; 0x07
    3f32:	78 85       	ldd	r23, Y+8	; 0x08
    3f34:	89 85       	ldd	r24, Y+9	; 0x09
    3f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	40 e8       	ldi	r20, 0x80	; 128
    3f3e:	5f e3       	ldi	r21, 0x3F	; 63
    3f40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f44:	88 23       	and	r24, r24
    3f46:	2c f4       	brge	.+10     	; 0x3f52 <F91_void_LCD_goto+0x9c>
		__ticks = 1;
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	9e 83       	std	Y+6, r25	; 0x06
    3f4e:	8d 83       	std	Y+5, r24	; 0x05
    3f50:	3f c0       	rjmp	.+126    	; 0x3fd0 <F91_void_LCD_goto+0x11a>
	else if (__tmp > 65535)
    3f52:	6f 81       	ldd	r22, Y+7	; 0x07
    3f54:	78 85       	ldd	r23, Y+8	; 0x08
    3f56:	89 85       	ldd	r24, Y+9	; 0x09
    3f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f5a:	20 e0       	ldi	r18, 0x00	; 0
    3f5c:	3f ef       	ldi	r19, 0xFF	; 255
    3f5e:	4f e7       	ldi	r20, 0x7F	; 127
    3f60:	57 e4       	ldi	r21, 0x47	; 71
    3f62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f66:	18 16       	cp	r1, r24
    3f68:	4c f5       	brge	.+82     	; 0x3fbc <F91_void_LCD_goto+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	40 e2       	ldi	r20, 0x20	; 32
    3f78:	51 e4       	ldi	r21, 0x41	; 65
    3f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7e:	dc 01       	movw	r26, r24
    3f80:	cb 01       	movw	r24, r22
    3f82:	bc 01       	movw	r22, r24
    3f84:	cd 01       	movw	r24, r26
    3f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	9e 83       	std	Y+6, r25	; 0x06
    3f90:	8d 83       	std	Y+5, r24	; 0x05
    3f92:	0f c0       	rjmp	.+30     	; 0x3fb2 <F91_void_LCD_goto+0xfc>
    3f94:	88 ec       	ldi	r24, 0xC8	; 200
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	9c 83       	std	Y+4, r25	; 0x04
    3f9a:	8b 83       	std	Y+3, r24	; 0x03
    3f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa0:	01 97       	sbiw	r24, 0x01	; 1
    3fa2:	f1 f7       	brne	.-4      	; 0x3fa0 <F91_void_LCD_goto+0xea>
    3fa4:	9c 83       	std	Y+4, r25	; 0x04
    3fa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    3faa:	9e 81       	ldd	r25, Y+6	; 0x06
    3fac:	01 97       	sbiw	r24, 0x01	; 1
    3fae:	9e 83       	std	Y+6, r25	; 0x06
    3fb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb6:	00 97       	sbiw	r24, 0x00	; 0
    3fb8:	69 f7       	brne	.-38     	; 0x3f94 <F91_void_LCD_goto+0xde>
    3fba:	14 c0       	rjmp	.+40     	; 0x3fe4 <F91_void_LCD_goto+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    3fbe:	78 85       	ldd	r23, Y+8	; 0x08
    3fc0:	89 85       	ldd	r24, Y+9	; 0x09
    3fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	9e 83       	std	Y+6, r25	; 0x06
    3fce:	8d 83       	std	Y+5, r24	; 0x05
    3fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd4:	9a 83       	std	Y+2, r25	; 0x02
    3fd6:	89 83       	std	Y+1, r24	; 0x01
    3fd8:	89 81       	ldd	r24, Y+1	; 0x01
    3fda:	9a 81       	ldd	r25, Y+2	; 0x02
    3fdc:	01 97       	sbiw	r24, 0x01	; 1
    3fde:	f1 f7       	brne	.-4      	; 0x3fdc <F91_void_LCD_goto+0x126>
    3fe0:	9a 83       	std	Y+2, r25	; 0x02
    3fe2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3fe4:	64 96       	adiw	r28, 0x14	; 20
    3fe6:	0f b6       	in	r0, 0x3f	; 63
    3fe8:	f8 94       	cli
    3fea:	de bf       	out	0x3e, r29	; 62
    3fec:	0f be       	out	0x3f, r0	; 63
    3fee:	cd bf       	out	0x3d, r28	; 61
    3ff0:	cf 91       	pop	r28
    3ff2:	df 91       	pop	r29
    3ff4:	08 95       	ret

00003ff6 <void_init_keypad>:
char columns[4]= {c1,c2,c3,c4};
#endif


void void_init_keypad()
{
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	00 d0       	rcall	.+0      	; 0x3ffc <void_init_keypad+0x6>
    3ffc:	00 d0       	rcall	.+0      	; 0x3ffe <void_init_keypad+0x8>
    3ffe:	cd b7       	in	r28, 0x3d	; 61
    4000:	de b7       	in	r29, 0x3e	; 62

	//for 3X3 keypad
#ifndef c4
	// intializing rows
void_init_pin(r_port,r1,1);
    4002:	81 e6       	ldi	r24, 0x61	; 97
    4004:	62 e0       	ldi	r22, 0x02	; 2
    4006:	41 e0       	ldi	r20, 0x01	; 1
    4008:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>
void_init_pin(r_port,r2,1);
    400c:	81 e6       	ldi	r24, 0x61	; 97
    400e:	61 e0       	ldi	r22, 0x01	; 1
    4010:	41 e0       	ldi	r20, 0x01	; 1
    4012:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>
void_init_pin(r_port,r3,1);
    4016:	81 e6       	ldi	r24, 0x61	; 97
    4018:	60 e0       	ldi	r22, 0x00	; 0
    401a:	41 e0       	ldi	r20, 0x01	; 1
    401c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>
	// intializing rows
void_init_pin(c_port,c1,0);
    4020:	83 e6       	ldi	r24, 0x63	; 99
    4022:	65 e0       	ldi	r22, 0x05	; 5
    4024:	40 e0       	ldi	r20, 0x00	; 0
    4026:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>
void_init_pin(c_port,c2,0);
    402a:	83 e6       	ldi	r24, 0x63	; 99
    402c:	66 e0       	ldi	r22, 0x06	; 6
    402e:	40 e0       	ldi	r20, 0x00	; 0
    4030:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>
void_init_pin(c_port,c3,0);
    4034:	83 e6       	ldi	r24, 0x63	; 99
    4036:	67 e0       	ldi	r22, 0x07	; 7
    4038:	40 e0       	ldi	r20, 0x00	; 0
    403a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>
void_init_pin(c_port,c4,0);

#endif

//turning all pins off
for (int x=0 ; x<n;x++)
    403e:	1c 82       	std	Y+4, r1	; 0x04
    4040:	1b 82       	std	Y+3, r1	; 0x03
    4042:	10 c0       	rjmp	.+32     	; 0x4064 <void_init_keypad+0x6e>
{
	void_write_pin(r_port,rows[x],1);
    4044:	8b 81       	ldd	r24, Y+3	; 0x03
    4046:	9c 81       	ldd	r25, Y+4	; 0x04
    4048:	fc 01       	movw	r30, r24
    404a:	ec 55       	subi	r30, 0x5C	; 92
    404c:	fe 4f       	sbci	r31, 0xFE	; 254
    404e:	90 81       	ld	r25, Z
    4050:	81 e6       	ldi	r24, 0x61	; 97
    4052:	69 2f       	mov	r22, r25
    4054:	41 e0       	ldi	r20, 0x01	; 1
    4056:	0e 94 fd 07 	call	0xffa	; 0xffa <void_write_pin>
void_init_pin(c_port,c4,0);

#endif

//turning all pins off
for (int x=0 ; x<n;x++)
    405a:	8b 81       	ldd	r24, Y+3	; 0x03
    405c:	9c 81       	ldd	r25, Y+4	; 0x04
    405e:	01 96       	adiw	r24, 0x01	; 1
    4060:	9c 83       	std	Y+4, r25	; 0x04
    4062:	8b 83       	std	Y+3, r24	; 0x03
    4064:	80 91 a3 01 	lds	r24, 0x01A3
    4068:	28 2f       	mov	r18, r24
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	8b 81       	ldd	r24, Y+3	; 0x03
    406e:	9c 81       	ldd	r25, Y+4	; 0x04
    4070:	82 17       	cp	r24, r18
    4072:	93 07       	cpc	r25, r19
    4074:	3c f3       	brlt	.-50     	; 0x4044 <void_init_keypad+0x4e>
{
	void_write_pin(r_port,rows[x],1);
}

//intializing the pullup resisrors
for (int x=0 ; x<n;x++)
    4076:	1a 82       	std	Y+2, r1	; 0x02
    4078:	19 82       	std	Y+1, r1	; 0x01
    407a:	10 c0       	rjmp	.+32     	; 0x409c <void_init_keypad+0xa6>
{
	void_write_pin(c_port,columns[x],1);
    407c:	89 81       	ldd	r24, Y+1	; 0x01
    407e:	9a 81       	ldd	r25, Y+2	; 0x02
    4080:	fc 01       	movw	r30, r24
    4082:	e9 55       	subi	r30, 0x59	; 89
    4084:	fe 4f       	sbci	r31, 0xFE	; 254
    4086:	90 81       	ld	r25, Z
    4088:	83 e6       	ldi	r24, 0x63	; 99
    408a:	69 2f       	mov	r22, r25
    408c:	41 e0       	ldi	r20, 0x01	; 1
    408e:	0e 94 fd 07 	call	0xffa	; 0xffa <void_write_pin>
{
	void_write_pin(r_port,rows[x],1);
}

//intializing the pullup resisrors
for (int x=0 ; x<n;x++)
    4092:	89 81       	ldd	r24, Y+1	; 0x01
    4094:	9a 81       	ldd	r25, Y+2	; 0x02
    4096:	01 96       	adiw	r24, 0x01	; 1
    4098:	9a 83       	std	Y+2, r25	; 0x02
    409a:	89 83       	std	Y+1, r24	; 0x01
    409c:	80 91 a3 01 	lds	r24, 0x01A3
    40a0:	28 2f       	mov	r18, r24
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	89 81       	ldd	r24, Y+1	; 0x01
    40a6:	9a 81       	ldd	r25, Y+2	; 0x02
    40a8:	82 17       	cp	r24, r18
    40aa:	93 07       	cpc	r25, r19
    40ac:	3c f3       	brlt	.-50     	; 0x407c <void_init_keypad+0x86>
{
	void_write_pin(c_port,columns[x],1);
}

}
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	cf 91       	pop	r28
    40b8:	df 91       	pop	r29
    40ba:	08 95       	ret

000040bc <key_read_keypad>:




key key_read_keypad()
{
    40bc:	df 93       	push	r29
    40be:	cf 93       	push	r28
    40c0:	cd b7       	in	r28, 0x3d	; 61
    40c2:	de b7       	in	r29, 0x3e	; 62
    40c4:	66 97       	sbiw	r28, 0x16	; 22
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	cd bf       	out	0x3d, r28	; 61
key k;
int x,y;

for ( x=0 ; x<n;x++)
    40d0:	1a 8a       	std	Y+18, r1	; 0x12
    40d2:	19 8a       	std	Y+17, r1	; 0x11
    40d4:	b5 c0       	rjmp	.+362    	; 0x4240 <key_read_keypad+0x184>
{
	void_write_pin(r_port,rows[x],0);
    40d6:	89 89       	ldd	r24, Y+17	; 0x11
    40d8:	9a 89       	ldd	r25, Y+18	; 0x12
    40da:	fc 01       	movw	r30, r24
    40dc:	ec 55       	subi	r30, 0x5C	; 92
    40de:	fe 4f       	sbci	r31, 0xFE	; 254
    40e0:	90 81       	ld	r25, Z
    40e2:	81 e6       	ldi	r24, 0x61	; 97
    40e4:	69 2f       	mov	r22, r25
    40e6:	40 e0       	ldi	r20, 0x00	; 0
    40e8:	0e 94 fd 07 	call	0xffa	; 0xffa <void_write_pin>
	for ( y=0 ;y<n;y++)
    40ec:	18 8a       	std	Y+16, r1	; 0x10
    40ee:	1f 86       	std	Y+15, r1	; 0x0f
    40f0:	8d c0       	rjmp	.+282    	; 0x420c <key_read_keypad+0x150>
		{
		if (!char_read_pin(c_port,columns[y]))
    40f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    40f4:	98 89       	ldd	r25, Y+16	; 0x10
    40f6:	fc 01       	movw	r30, r24
    40f8:	e9 55       	subi	r30, 0x59	; 89
    40fa:	fe 4f       	sbci	r31, 0xFE	; 254
    40fc:	90 81       	ld	r25, Z
    40fe:	83 e6       	ldi	r24, 0x63	; 99
    4100:	69 2f       	mov	r22, r25
    4102:	0e 94 b8 09 	call	0x1370	; 0x1370 <char_read_pin>
    4106:	88 23       	and	r24, r24
    4108:	09 f0       	breq	.+2      	; 0x410c <key_read_keypad+0x50>
    410a:	7b c0       	rjmp	.+246    	; 0x4202 <key_read_keypad+0x146>
    410c:	80 e0       	ldi	r24, 0x00	; 0
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	a0 ea       	ldi	r26, 0xA0	; 160
    4112:	b0 e4       	ldi	r27, 0x40	; 64
    4114:	8b 87       	std	Y+11, r24	; 0x0b
    4116:	9c 87       	std	Y+12, r25	; 0x0c
    4118:	ad 87       	std	Y+13, r26	; 0x0d
    411a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    411c:	6b 85       	ldd	r22, Y+11	; 0x0b
    411e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4120:	8d 85       	ldd	r24, Y+13	; 0x0d
    4122:	9e 85       	ldd	r25, Y+14	; 0x0e
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	4a ef       	ldi	r20, 0xFA	; 250
    412a:	54 e4       	ldi	r21, 0x44	; 68
    412c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	8f 83       	std	Y+7, r24	; 0x07
    4136:	98 87       	std	Y+8, r25	; 0x08
    4138:	a9 87       	std	Y+9, r26	; 0x09
    413a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    413c:	6f 81       	ldd	r22, Y+7	; 0x07
    413e:	78 85       	ldd	r23, Y+8	; 0x08
    4140:	89 85       	ldd	r24, Y+9	; 0x09
    4142:	9a 85       	ldd	r25, Y+10	; 0x0a
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	40 e8       	ldi	r20, 0x80	; 128
    414a:	5f e3       	ldi	r21, 0x3F	; 63
    414c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4150:	88 23       	and	r24, r24
    4152:	2c f4       	brge	.+10     	; 0x415e <key_read_keypad+0xa2>
		__ticks = 1;
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	9e 83       	std	Y+6, r25	; 0x06
    415a:	8d 83       	std	Y+5, r24	; 0x05
    415c:	3f c0       	rjmp	.+126    	; 0x41dc <key_read_keypad+0x120>
	else if (__tmp > 65535)
    415e:	6f 81       	ldd	r22, Y+7	; 0x07
    4160:	78 85       	ldd	r23, Y+8	; 0x08
    4162:	89 85       	ldd	r24, Y+9	; 0x09
    4164:	9a 85       	ldd	r25, Y+10	; 0x0a
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	3f ef       	ldi	r19, 0xFF	; 255
    416a:	4f e7       	ldi	r20, 0x7F	; 127
    416c:	57 e4       	ldi	r21, 0x47	; 71
    416e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4172:	18 16       	cp	r1, r24
    4174:	4c f5       	brge	.+82     	; 0x41c8 <key_read_keypad+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4176:	6b 85       	ldd	r22, Y+11	; 0x0b
    4178:	7c 85       	ldd	r23, Y+12	; 0x0c
    417a:	8d 85       	ldd	r24, Y+13	; 0x0d
    417c:	9e 85       	ldd	r25, Y+14	; 0x0e
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	40 e2       	ldi	r20, 0x20	; 32
    4184:	51 e4       	ldi	r21, 0x41	; 65
    4186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    418a:	dc 01       	movw	r26, r24
    418c:	cb 01       	movw	r24, r22
    418e:	bc 01       	movw	r22, r24
    4190:	cd 01       	movw	r24, r26
    4192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	9e 83       	std	Y+6, r25	; 0x06
    419c:	8d 83       	std	Y+5, r24	; 0x05
    419e:	0f c0       	rjmp	.+30     	; 0x41be <key_read_keypad+0x102>
    41a0:	88 ec       	ldi	r24, 0xC8	; 200
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	9c 83       	std	Y+4, r25	; 0x04
    41a6:	8b 83       	std	Y+3, r24	; 0x03
    41a8:	8b 81       	ldd	r24, Y+3	; 0x03
    41aa:	9c 81       	ldd	r25, Y+4	; 0x04
    41ac:	01 97       	sbiw	r24, 0x01	; 1
    41ae:	f1 f7       	brne	.-4      	; 0x41ac <key_read_keypad+0xf0>
    41b0:	9c 83       	std	Y+4, r25	; 0x04
    41b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41b4:	8d 81       	ldd	r24, Y+5	; 0x05
    41b6:	9e 81       	ldd	r25, Y+6	; 0x06
    41b8:	01 97       	sbiw	r24, 0x01	; 1
    41ba:	9e 83       	std	Y+6, r25	; 0x06
    41bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41be:	8d 81       	ldd	r24, Y+5	; 0x05
    41c0:	9e 81       	ldd	r25, Y+6	; 0x06
    41c2:	00 97       	sbiw	r24, 0x00	; 0
    41c4:	69 f7       	brne	.-38     	; 0x41a0 <key_read_keypad+0xe4>
    41c6:	14 c0       	rjmp	.+40     	; 0x41f0 <key_read_keypad+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41c8:	6f 81       	ldd	r22, Y+7	; 0x07
    41ca:	78 85       	ldd	r23, Y+8	; 0x08
    41cc:	89 85       	ldd	r24, Y+9	; 0x09
    41ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    41d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	9e 83       	std	Y+6, r25	; 0x06
    41da:	8d 83       	std	Y+5, r24	; 0x05
    41dc:	8d 81       	ldd	r24, Y+5	; 0x05
    41de:	9e 81       	ldd	r25, Y+6	; 0x06
    41e0:	9a 83       	std	Y+2, r25	; 0x02
    41e2:	89 83       	std	Y+1, r24	; 0x01
    41e4:	89 81       	ldd	r24, Y+1	; 0x01
    41e6:	9a 81       	ldd	r25, Y+2	; 0x02
    41e8:	01 97       	sbiw	r24, 0x01	; 1
    41ea:	f1 f7       	brne	.-4      	; 0x41e8 <key_read_keypad+0x12c>
    41ec:	9a 83       	std	Y+2, r25	; 0x02
    41ee:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(5);
			k.x=x;
    41f0:	89 89       	ldd	r24, Y+17	; 0x11
    41f2:	8b 8b       	std	Y+19, r24	; 0x13
			k.y=y;
    41f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41f6:	8c 8b       	std	Y+20, r24	; 0x14
			return k;
    41f8:	8b 89       	ldd	r24, Y+19	; 0x13
    41fa:	9c 89       	ldd	r25, Y+20	; 0x14
    41fc:	9e 8b       	std	Y+22, r25	; 0x16
    41fe:	8d 8b       	std	Y+21, r24	; 0x15
    4200:	31 c0       	rjmp	.+98     	; 0x4264 <key_read_keypad+0x1a8>
int x,y;

for ( x=0 ; x<n;x++)
{
	void_write_pin(r_port,rows[x],0);
	for ( y=0 ;y<n;y++)
    4202:	8f 85       	ldd	r24, Y+15	; 0x0f
    4204:	98 89       	ldd	r25, Y+16	; 0x10
    4206:	01 96       	adiw	r24, 0x01	; 1
    4208:	98 8b       	std	Y+16, r25	; 0x10
    420a:	8f 87       	std	Y+15, r24	; 0x0f
    420c:	80 91 a3 01 	lds	r24, 0x01A3
    4210:	28 2f       	mov	r18, r24
    4212:	30 e0       	ldi	r19, 0x00	; 0
    4214:	8f 85       	ldd	r24, Y+15	; 0x0f
    4216:	98 89       	ldd	r25, Y+16	; 0x10
    4218:	82 17       	cp	r24, r18
    421a:	93 07       	cpc	r25, r19
    421c:	0c f4       	brge	.+2      	; 0x4220 <key_read_keypad+0x164>
    421e:	69 cf       	rjmp	.-302    	; 0x40f2 <key_read_keypad+0x36>




		}
	void_write_pin(r_port,rows[x],1);
    4220:	89 89       	ldd	r24, Y+17	; 0x11
    4222:	9a 89       	ldd	r25, Y+18	; 0x12
    4224:	fc 01       	movw	r30, r24
    4226:	ec 55       	subi	r30, 0x5C	; 92
    4228:	fe 4f       	sbci	r31, 0xFE	; 254
    422a:	90 81       	ld	r25, Z
    422c:	81 e6       	ldi	r24, 0x61	; 97
    422e:	69 2f       	mov	r22, r25
    4230:	41 e0       	ldi	r20, 0x01	; 1
    4232:	0e 94 fd 07 	call	0xffa	; 0xffa <void_write_pin>
key key_read_keypad()
{
key k;
int x,y;

for ( x=0 ; x<n;x++)
    4236:	89 89       	ldd	r24, Y+17	; 0x11
    4238:	9a 89       	ldd	r25, Y+18	; 0x12
    423a:	01 96       	adiw	r24, 0x01	; 1
    423c:	9a 8b       	std	Y+18, r25	; 0x12
    423e:	89 8b       	std	Y+17, r24	; 0x11
    4240:	80 91 a3 01 	lds	r24, 0x01A3
    4244:	28 2f       	mov	r18, r24
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	89 89       	ldd	r24, Y+17	; 0x11
    424a:	9a 89       	ldd	r25, Y+18	; 0x12
    424c:	82 17       	cp	r24, r18
    424e:	93 07       	cpc	r25, r19
    4250:	0c f4       	brge	.+2      	; 0x4254 <key_read_keypad+0x198>
    4252:	41 cf       	rjmp	.-382    	; 0x40d6 <key_read_keypad+0x1a>

		}
	void_write_pin(r_port,rows[x],1);

}
k.x=5;
    4254:	85 e0       	ldi	r24, 0x05	; 5
    4256:	8b 8b       	std	Y+19, r24	; 0x13
k.y=5;
    4258:	85 e0       	ldi	r24, 0x05	; 5
    425a:	8c 8b       	std	Y+20, r24	; 0x14
return k;
    425c:	8b 89       	ldd	r24, Y+19	; 0x13
    425e:	9c 89       	ldd	r25, Y+20	; 0x14
    4260:	9e 8b       	std	Y+22, r25	; 0x16
    4262:	8d 8b       	std	Y+21, r24	; 0x15
    4264:	8d 89       	ldd	r24, Y+21	; 0x15
    4266:	9e 89       	ldd	r25, Y+22	; 0x16



}
    4268:	66 96       	adiw	r28, 0x16	; 22
    426a:	0f b6       	in	r0, 0x3f	; 63
    426c:	f8 94       	cli
    426e:	de bf       	out	0x3e, r29	; 62
    4270:	0f be       	out	0x3f, r0	; 63
    4272:	cd bf       	out	0x3d, r28	; 61
    4274:	cf 91       	pop	r28
    4276:	df 91       	pop	r29
    4278:	08 95       	ret

0000427a <send_command>:
#include "../MCAL/F90_DIO.h"
#include "../HAL/LCD.h"

// user defined functions
void send_command(char c)
{
    427a:	df 93       	push	r29
    427c:	cf 93       	push	r28
    427e:	0f 92       	push	r0
    4280:	cd b7       	in	r28, 0x3d	; 61
    4282:	de b7       	in	r29, 0x3e	; 62
    4284:	89 83       	std	Y+1, r24	; 0x01
	//PORTA&=~rs; //command mode
	CLEAR_BIT(PORTA,rs);
    4286:	ab e3       	ldi	r26, 0x3B	; 59
    4288:	b0 e0       	ldi	r27, 0x00	; 0
    428a:	eb e3       	ldi	r30, 0x3B	; 59
    428c:	f0 e0       	ldi	r31, 0x00	; 0
    428e:	80 81       	ld	r24, Z
    4290:	87 7f       	andi	r24, 0xF7	; 247
    4292:	8c 93       	st	X, r24



	PORTB=(c>>4); //|(PORTB&0xf0);   // sending msb
    4294:	e8 e3       	ldi	r30, 0x38	; 56
    4296:	f0 e0       	ldi	r31, 0x00	; 0
    4298:	89 81       	ldd	r24, Y+1	; 0x01
    429a:	82 95       	swap	r24
    429c:	8f 70       	andi	r24, 0x0F	; 15
    429e:	80 83       	st	Z, r24
	puls();
    42a0:	0e 94 5d 21 	call	0x42ba	; 0x42ba <puls>
	PORTB=(c&0x0f); //|(PORTB&0xf0);
    42a4:	e8 e3       	ldi	r30, 0x38	; 56
    42a6:	f0 e0       	ldi	r31, 0x00	; 0
    42a8:	89 81       	ldd	r24, Y+1	; 0x01
    42aa:	8f 70       	andi	r24, 0x0F	; 15
    42ac:	80 83       	st	Z, r24
	puls();
    42ae:	0e 94 5d 21 	call	0x42ba	; 0x42ba <puls>

}
    42b2:	0f 90       	pop	r0
    42b4:	cf 91       	pop	r28
    42b6:	df 91       	pop	r29
    42b8:	08 95       	ret

000042ba <puls>:
void puls(void)
{
    42ba:	df 93       	push	r29
    42bc:	cf 93       	push	r28
    42be:	cd b7       	in	r28, 0x3d	; 61
    42c0:	de b7       	in	r29, 0x3e	; 62
    42c2:	6c 97       	sbiw	r28, 0x1c	; 28
    42c4:	0f b6       	in	r0, 0x3f	; 63
    42c6:	f8 94       	cli
    42c8:	de bf       	out	0x3e, r29	; 62
    42ca:	0f be       	out	0x3f, r0	; 63
    42cc:	cd bf       	out	0x3d, r28	; 61
SET_BIT(PORTD,e);
    42ce:	a2 e3       	ldi	r26, 0x32	; 50
    42d0:	b0 e0       	ldi	r27, 0x00	; 0
    42d2:	e2 e3       	ldi	r30, 0x32	; 50
    42d4:	f0 e0       	ldi	r31, 0x00	; 0
    42d6:	80 81       	ld	r24, Z
    42d8:	80 64       	ori	r24, 0x40	; 64
    42da:	8c 93       	st	X, r24
    42dc:	80 e0       	ldi	r24, 0x00	; 0
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	a0 e4       	ldi	r26, 0x40	; 64
    42e2:	b0 e4       	ldi	r27, 0x40	; 64
    42e4:	89 8f       	std	Y+25, r24	; 0x19
    42e6:	9a 8f       	std	Y+26, r25	; 0x1a
    42e8:	ab 8f       	std	Y+27, r26	; 0x1b
    42ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ec:	69 8d       	ldd	r22, Y+25	; 0x19
    42ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	4a ef       	ldi	r20, 0xFA	; 250
    42fa:	54 e4       	ldi	r21, 0x44	; 68
    42fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4300:	dc 01       	movw	r26, r24
    4302:	cb 01       	movw	r24, r22
    4304:	8d 8b       	std	Y+21, r24	; 0x15
    4306:	9e 8b       	std	Y+22, r25	; 0x16
    4308:	af 8b       	std	Y+23, r26	; 0x17
    430a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    430c:	6d 89       	ldd	r22, Y+21	; 0x15
    430e:	7e 89       	ldd	r23, Y+22	; 0x16
    4310:	8f 89       	ldd	r24, Y+23	; 0x17
    4312:	98 8d       	ldd	r25, Y+24	; 0x18
    4314:	20 e0       	ldi	r18, 0x00	; 0
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	40 e8       	ldi	r20, 0x80	; 128
    431a:	5f e3       	ldi	r21, 0x3F	; 63
    431c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4320:	88 23       	and	r24, r24
    4322:	2c f4       	brge	.+10     	; 0x432e <puls+0x74>
		__ticks = 1;
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	9c 8b       	std	Y+20, r25	; 0x14
    432a:	8b 8b       	std	Y+19, r24	; 0x13
    432c:	3f c0       	rjmp	.+126    	; 0x43ac <puls+0xf2>
	else if (__tmp > 65535)
    432e:	6d 89       	ldd	r22, Y+21	; 0x15
    4330:	7e 89       	ldd	r23, Y+22	; 0x16
    4332:	8f 89       	ldd	r24, Y+23	; 0x17
    4334:	98 8d       	ldd	r25, Y+24	; 0x18
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	3f ef       	ldi	r19, 0xFF	; 255
    433a:	4f e7       	ldi	r20, 0x7F	; 127
    433c:	57 e4       	ldi	r21, 0x47	; 71
    433e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4342:	18 16       	cp	r1, r24
    4344:	4c f5       	brge	.+82     	; 0x4398 <puls+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4346:	69 8d       	ldd	r22, Y+25	; 0x19
    4348:	7a 8d       	ldd	r23, Y+26	; 0x1a
    434a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    434c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    434e:	20 e0       	ldi	r18, 0x00	; 0
    4350:	30 e0       	ldi	r19, 0x00	; 0
    4352:	40 e2       	ldi	r20, 0x20	; 32
    4354:	51 e4       	ldi	r21, 0x41	; 65
    4356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    435a:	dc 01       	movw	r26, r24
    435c:	cb 01       	movw	r24, r22
    435e:	bc 01       	movw	r22, r24
    4360:	cd 01       	movw	r24, r26
    4362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4366:	dc 01       	movw	r26, r24
    4368:	cb 01       	movw	r24, r22
    436a:	9c 8b       	std	Y+20, r25	; 0x14
    436c:	8b 8b       	std	Y+19, r24	; 0x13
    436e:	0f c0       	rjmp	.+30     	; 0x438e <puls+0xd4>
    4370:	88 ec       	ldi	r24, 0xC8	; 200
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	9a 8b       	std	Y+18, r25	; 0x12
    4376:	89 8b       	std	Y+17, r24	; 0x11
    4378:	89 89       	ldd	r24, Y+17	; 0x11
    437a:	9a 89       	ldd	r25, Y+18	; 0x12
    437c:	01 97       	sbiw	r24, 0x01	; 1
    437e:	f1 f7       	brne	.-4      	; 0x437c <puls+0xc2>
    4380:	9a 8b       	std	Y+18, r25	; 0x12
    4382:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4384:	8b 89       	ldd	r24, Y+19	; 0x13
    4386:	9c 89       	ldd	r25, Y+20	; 0x14
    4388:	01 97       	sbiw	r24, 0x01	; 1
    438a:	9c 8b       	std	Y+20, r25	; 0x14
    438c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    438e:	8b 89       	ldd	r24, Y+19	; 0x13
    4390:	9c 89       	ldd	r25, Y+20	; 0x14
    4392:	00 97       	sbiw	r24, 0x00	; 0
    4394:	69 f7       	brne	.-38     	; 0x4370 <puls+0xb6>
    4396:	14 c0       	rjmp	.+40     	; 0x43c0 <puls+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4398:	6d 89       	ldd	r22, Y+21	; 0x15
    439a:	7e 89       	ldd	r23, Y+22	; 0x16
    439c:	8f 89       	ldd	r24, Y+23	; 0x17
    439e:	98 8d       	ldd	r25, Y+24	; 0x18
    43a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a4:	dc 01       	movw	r26, r24
    43a6:	cb 01       	movw	r24, r22
    43a8:	9c 8b       	std	Y+20, r25	; 0x14
    43aa:	8b 8b       	std	Y+19, r24	; 0x13
    43ac:	8b 89       	ldd	r24, Y+19	; 0x13
    43ae:	9c 89       	ldd	r25, Y+20	; 0x14
    43b0:	98 8b       	std	Y+16, r25	; 0x10
    43b2:	8f 87       	std	Y+15, r24	; 0x0f
    43b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    43b6:	98 89       	ldd	r25, Y+16	; 0x10
    43b8:	01 97       	sbiw	r24, 0x01	; 1
    43ba:	f1 f7       	brne	.-4      	; 0x43b8 <puls+0xfe>
    43bc:	98 8b       	std	Y+16, r25	; 0x10
    43be:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(3);
CLEAR_BIT(PORTD,e);
    43c0:	a2 e3       	ldi	r26, 0x32	; 50
    43c2:	b0 e0       	ldi	r27, 0x00	; 0
    43c4:	e2 e3       	ldi	r30, 0x32	; 50
    43c6:	f0 e0       	ldi	r31, 0x00	; 0
    43c8:	80 81       	ld	r24, Z
    43ca:	8f 7b       	andi	r24, 0xBF	; 191
    43cc:	8c 93       	st	X, r24
    43ce:	80 e0       	ldi	r24, 0x00	; 0
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	a0 e4       	ldi	r26, 0x40	; 64
    43d4:	b0 e4       	ldi	r27, 0x40	; 64
    43d6:	8b 87       	std	Y+11, r24	; 0x0b
    43d8:	9c 87       	std	Y+12, r25	; 0x0c
    43da:	ad 87       	std	Y+13, r26	; 0x0d
    43dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43de:	6b 85       	ldd	r22, Y+11	; 0x0b
    43e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    43e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    43e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	4a ef       	ldi	r20, 0xFA	; 250
    43ec:	54 e4       	ldi	r21, 0x44	; 68
    43ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f2:	dc 01       	movw	r26, r24
    43f4:	cb 01       	movw	r24, r22
    43f6:	8f 83       	std	Y+7, r24	; 0x07
    43f8:	98 87       	std	Y+8, r25	; 0x08
    43fa:	a9 87       	std	Y+9, r26	; 0x09
    43fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4400:	78 85       	ldd	r23, Y+8	; 0x08
    4402:	89 85       	ldd	r24, Y+9	; 0x09
    4404:	9a 85       	ldd	r25, Y+10	; 0x0a
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	40 e8       	ldi	r20, 0x80	; 128
    440c:	5f e3       	ldi	r21, 0x3F	; 63
    440e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4412:	88 23       	and	r24, r24
    4414:	2c f4       	brge	.+10     	; 0x4420 <puls+0x166>
		__ticks = 1;
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	9e 83       	std	Y+6, r25	; 0x06
    441c:	8d 83       	std	Y+5, r24	; 0x05
    441e:	3f c0       	rjmp	.+126    	; 0x449e <puls+0x1e4>
	else if (__tmp > 65535)
    4420:	6f 81       	ldd	r22, Y+7	; 0x07
    4422:	78 85       	ldd	r23, Y+8	; 0x08
    4424:	89 85       	ldd	r24, Y+9	; 0x09
    4426:	9a 85       	ldd	r25, Y+10	; 0x0a
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	3f ef       	ldi	r19, 0xFF	; 255
    442c:	4f e7       	ldi	r20, 0x7F	; 127
    442e:	57 e4       	ldi	r21, 0x47	; 71
    4430:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4434:	18 16       	cp	r1, r24
    4436:	4c f5       	brge	.+82     	; 0x448a <puls+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4438:	6b 85       	ldd	r22, Y+11	; 0x0b
    443a:	7c 85       	ldd	r23, Y+12	; 0x0c
    443c:	8d 85       	ldd	r24, Y+13	; 0x0d
    443e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	40 e2       	ldi	r20, 0x20	; 32
    4446:	51 e4       	ldi	r21, 0x41	; 65
    4448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    444c:	dc 01       	movw	r26, r24
    444e:	cb 01       	movw	r24, r22
    4450:	bc 01       	movw	r22, r24
    4452:	cd 01       	movw	r24, r26
    4454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4458:	dc 01       	movw	r26, r24
    445a:	cb 01       	movw	r24, r22
    445c:	9e 83       	std	Y+6, r25	; 0x06
    445e:	8d 83       	std	Y+5, r24	; 0x05
    4460:	0f c0       	rjmp	.+30     	; 0x4480 <puls+0x1c6>
    4462:	88 ec       	ldi	r24, 0xC8	; 200
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	9c 83       	std	Y+4, r25	; 0x04
    4468:	8b 83       	std	Y+3, r24	; 0x03
    446a:	8b 81       	ldd	r24, Y+3	; 0x03
    446c:	9c 81       	ldd	r25, Y+4	; 0x04
    446e:	01 97       	sbiw	r24, 0x01	; 1
    4470:	f1 f7       	brne	.-4      	; 0x446e <puls+0x1b4>
    4472:	9c 83       	std	Y+4, r25	; 0x04
    4474:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4476:	8d 81       	ldd	r24, Y+5	; 0x05
    4478:	9e 81       	ldd	r25, Y+6	; 0x06
    447a:	01 97       	sbiw	r24, 0x01	; 1
    447c:	9e 83       	std	Y+6, r25	; 0x06
    447e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4480:	8d 81       	ldd	r24, Y+5	; 0x05
    4482:	9e 81       	ldd	r25, Y+6	; 0x06
    4484:	00 97       	sbiw	r24, 0x00	; 0
    4486:	69 f7       	brne	.-38     	; 0x4462 <puls+0x1a8>
    4488:	14 c0       	rjmp	.+40     	; 0x44b2 <puls+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    448a:	6f 81       	ldd	r22, Y+7	; 0x07
    448c:	78 85       	ldd	r23, Y+8	; 0x08
    448e:	89 85       	ldd	r24, Y+9	; 0x09
    4490:	9a 85       	ldd	r25, Y+10	; 0x0a
    4492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	9e 83       	std	Y+6, r25	; 0x06
    449c:	8d 83       	std	Y+5, r24	; 0x05
    449e:	8d 81       	ldd	r24, Y+5	; 0x05
    44a0:	9e 81       	ldd	r25, Y+6	; 0x06
    44a2:	9a 83       	std	Y+2, r25	; 0x02
    44a4:	89 83       	std	Y+1, r24	; 0x01
    44a6:	89 81       	ldd	r24, Y+1	; 0x01
    44a8:	9a 81       	ldd	r25, Y+2	; 0x02
    44aa:	01 97       	sbiw	r24, 0x01	; 1
    44ac:	f1 f7       	brne	.-4      	; 0x44aa <puls+0x1f0>
    44ae:	9a 83       	std	Y+2, r25	; 0x02
    44b0:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(3);
}
    44b2:	6c 96       	adiw	r28, 0x1c	; 28
    44b4:	0f b6       	in	r0, 0x3f	; 63
    44b6:	f8 94       	cli
    44b8:	de bf       	out	0x3e, r29	; 62
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	cd bf       	out	0x3d, r28	; 61
    44be:	cf 91       	pop	r28
    44c0:	df 91       	pop	r29
    44c2:	08 95       	ret

000044c4 <send_char>:
void send_char(char l)
{
    44c4:	df 93       	push	r29
    44c6:	cf 93       	push	r28
    44c8:	0f 92       	push	r0
    44ca:	cd b7       	in	r28, 0x3d	; 61
    44cc:	de b7       	in	r29, 0x3e	; 62
    44ce:	89 83       	std	Y+1, r24	; 0x01
	PORTA|=rs;                   //command mode
    44d0:	ab e3       	ldi	r26, 0x3B	; 59
    44d2:	b0 e0       	ldi	r27, 0x00	; 0
    44d4:	eb e3       	ldi	r30, 0x3B	; 59
    44d6:	f0 e0       	ldi	r31, 0x00	; 0
    44d8:	80 81       	ld	r24, Z
    44da:	83 60       	ori	r24, 0x03	; 3
    44dc:	8c 93       	st	X, r24



	PORTB=(l>>4);//|(PORTB&0xf0);   // sending msb
    44de:	e8 e3       	ldi	r30, 0x38	; 56
    44e0:	f0 e0       	ldi	r31, 0x00	; 0
    44e2:	89 81       	ldd	r24, Y+1	; 0x01
    44e4:	82 95       	swap	r24
    44e6:	8f 70       	andi	r24, 0x0F	; 15
    44e8:	80 83       	st	Z, r24
	puls();
    44ea:	0e 94 5d 21 	call	0x42ba	; 0x42ba <puls>
	PORTB=(l&0x0f);//|(PORTB&0xf0);
    44ee:	e8 e3       	ldi	r30, 0x38	; 56
    44f0:	f0 e0       	ldi	r31, 0x00	; 0
    44f2:	89 81       	ldd	r24, Y+1	; 0x01
    44f4:	8f 70       	andi	r24, 0x0F	; 15
    44f6:	80 83       	st	Z, r24
	puls();
    44f8:	0e 94 5d 21 	call	0x42ba	; 0x42ba <puls>

}
    44fc:	0f 90       	pop	r0
    44fe:	cf 91       	pop	r28
    4500:	df 91       	pop	r29
    4502:	08 95       	ret

00004504 <send_string>:
void send_string(char *s)
{
    4504:	df 93       	push	r29
    4506:	cf 93       	push	r28
    4508:	00 d0       	rcall	.+0      	; 0x450a <send_string+0x6>
    450a:	cd b7       	in	r28, 0x3d	; 61
    450c:	de b7       	in	r29, 0x3e	; 62
    450e:	9a 83       	std	Y+2, r25	; 0x02
    4510:	89 83       	std	Y+1, r24	; 0x01
    4512:	0b c0       	rjmp	.+22     	; 0x452a <send_string+0x26>
	while(*s != '\0')
	{
	send_char(*s++);
    4514:	e9 81       	ldd	r30, Y+1	; 0x01
    4516:	fa 81       	ldd	r31, Y+2	; 0x02
    4518:	20 81       	ld	r18, Z
    451a:	89 81       	ldd	r24, Y+1	; 0x01
    451c:	9a 81       	ldd	r25, Y+2	; 0x02
    451e:	01 96       	adiw	r24, 0x01	; 1
    4520:	9a 83       	std	Y+2, r25	; 0x02
    4522:	89 83       	std	Y+1, r24	; 0x01
    4524:	82 2f       	mov	r24, r18
    4526:	0e 94 62 22 	call	0x44c4	; 0x44c4 <send_char>
	puls();

}
void send_string(char *s)
{
	while(*s != '\0')
    452a:	e9 81       	ldd	r30, Y+1	; 0x01
    452c:	fa 81       	ldd	r31, Y+2	; 0x02
    452e:	80 81       	ld	r24, Z
    4530:	88 23       	and	r24, r24
    4532:	81 f7       	brne	.-32     	; 0x4514 <send_string+0x10>
	{
	send_char(*s++);

	}

}
    4534:	0f 90       	pop	r0
    4536:	0f 90       	pop	r0
    4538:	cf 91       	pop	r28
    453a:	df 91       	pop	r29
    453c:	08 95       	ret

0000453e <lcd_init>:
void lcd_init(void)
{
    453e:	df 93       	push	r29
    4540:	cf 93       	push	r28
    4542:	cd b7       	in	r28, 0x3d	; 61
    4544:	de b7       	in	r29, 0x3e	; 62
    4546:	aa 97       	sbiw	r28, 0x2a	; 42
    4548:	0f b6       	in	r0, 0x3f	; 63
    454a:	f8 94       	cli
    454c:	de bf       	out	0x3e, r29	; 62
    454e:	0f be       	out	0x3f, r0	; 63
    4550:	cd bf       	out	0x3d, r28	; 61
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	a8 e4       	ldi	r26, 0x48	; 72
    4558:	b2 e4       	ldi	r27, 0x42	; 66
    455a:	8f a3       	std	Y+39, r24	; 0x27
    455c:	98 a7       	std	Y+40, r25	; 0x28
    455e:	a9 a7       	std	Y+41, r26	; 0x29
    4560:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4562:	6f a1       	ldd	r22, Y+39	; 0x27
    4564:	78 a5       	ldd	r23, Y+40	; 0x28
    4566:	89 a5       	ldd	r24, Y+41	; 0x29
    4568:	9a a5       	ldd	r25, Y+42	; 0x2a
    456a:	20 e0       	ldi	r18, 0x00	; 0
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	4a ef       	ldi	r20, 0xFA	; 250
    4570:	54 e4       	ldi	r21, 0x44	; 68
    4572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4576:	dc 01       	movw	r26, r24
    4578:	cb 01       	movw	r24, r22
    457a:	8b a3       	std	Y+35, r24	; 0x23
    457c:	9c a3       	std	Y+36, r25	; 0x24
    457e:	ad a3       	std	Y+37, r26	; 0x25
    4580:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4582:	6b a1       	ldd	r22, Y+35	; 0x23
    4584:	7c a1       	ldd	r23, Y+36	; 0x24
    4586:	8d a1       	ldd	r24, Y+37	; 0x25
    4588:	9e a1       	ldd	r25, Y+38	; 0x26
    458a:	20 e0       	ldi	r18, 0x00	; 0
    458c:	30 e0       	ldi	r19, 0x00	; 0
    458e:	40 e8       	ldi	r20, 0x80	; 128
    4590:	5f e3       	ldi	r21, 0x3F	; 63
    4592:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4596:	88 23       	and	r24, r24
    4598:	2c f4       	brge	.+10     	; 0x45a4 <lcd_init+0x66>
		__ticks = 1;
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	9a a3       	std	Y+34, r25	; 0x22
    45a0:	89 a3       	std	Y+33, r24	; 0x21
    45a2:	3f c0       	rjmp	.+126    	; 0x4622 <lcd_init+0xe4>
	else if (__tmp > 65535)
    45a4:	6b a1       	ldd	r22, Y+35	; 0x23
    45a6:	7c a1       	ldd	r23, Y+36	; 0x24
    45a8:	8d a1       	ldd	r24, Y+37	; 0x25
    45aa:	9e a1       	ldd	r25, Y+38	; 0x26
    45ac:	20 e0       	ldi	r18, 0x00	; 0
    45ae:	3f ef       	ldi	r19, 0xFF	; 255
    45b0:	4f e7       	ldi	r20, 0x7F	; 127
    45b2:	57 e4       	ldi	r21, 0x47	; 71
    45b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45b8:	18 16       	cp	r1, r24
    45ba:	4c f5       	brge	.+82     	; 0x460e <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45bc:	6f a1       	ldd	r22, Y+39	; 0x27
    45be:	78 a5       	ldd	r23, Y+40	; 0x28
    45c0:	89 a5       	ldd	r24, Y+41	; 0x29
    45c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    45c4:	20 e0       	ldi	r18, 0x00	; 0
    45c6:	30 e0       	ldi	r19, 0x00	; 0
    45c8:	40 e2       	ldi	r20, 0x20	; 32
    45ca:	51 e4       	ldi	r21, 0x41	; 65
    45cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d0:	dc 01       	movw	r26, r24
    45d2:	cb 01       	movw	r24, r22
    45d4:	bc 01       	movw	r22, r24
    45d6:	cd 01       	movw	r24, r26
    45d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	9a a3       	std	Y+34, r25	; 0x22
    45e2:	89 a3       	std	Y+33, r24	; 0x21
    45e4:	0f c0       	rjmp	.+30     	; 0x4604 <lcd_init+0xc6>
    45e6:	88 ec       	ldi	r24, 0xC8	; 200
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	98 a3       	std	Y+32, r25	; 0x20
    45ec:	8f 8f       	std	Y+31, r24	; 0x1f
    45ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45f0:	98 a1       	ldd	r25, Y+32	; 0x20
    45f2:	01 97       	sbiw	r24, 0x01	; 1
    45f4:	f1 f7       	brne	.-4      	; 0x45f2 <lcd_init+0xb4>
    45f6:	98 a3       	std	Y+32, r25	; 0x20
    45f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45fa:	89 a1       	ldd	r24, Y+33	; 0x21
    45fc:	9a a1       	ldd	r25, Y+34	; 0x22
    45fe:	01 97       	sbiw	r24, 0x01	; 1
    4600:	9a a3       	std	Y+34, r25	; 0x22
    4602:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4604:	89 a1       	ldd	r24, Y+33	; 0x21
    4606:	9a a1       	ldd	r25, Y+34	; 0x22
    4608:	00 97       	sbiw	r24, 0x00	; 0
    460a:	69 f7       	brne	.-38     	; 0x45e6 <lcd_init+0xa8>
    460c:	14 c0       	rjmp	.+40     	; 0x4636 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    460e:	6b a1       	ldd	r22, Y+35	; 0x23
    4610:	7c a1       	ldd	r23, Y+36	; 0x24
    4612:	8d a1       	ldd	r24, Y+37	; 0x25
    4614:	9e a1       	ldd	r25, Y+38	; 0x26
    4616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    461a:	dc 01       	movw	r26, r24
    461c:	cb 01       	movw	r24, r22
    461e:	9a a3       	std	Y+34, r25	; 0x22
    4620:	89 a3       	std	Y+33, r24	; 0x21
    4622:	89 a1       	ldd	r24, Y+33	; 0x21
    4624:	9a a1       	ldd	r25, Y+34	; 0x22
    4626:	9e 8f       	std	Y+30, r25	; 0x1e
    4628:	8d 8f       	std	Y+29, r24	; 0x1d
    462a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    462c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    462e:	01 97       	sbiw	r24, 0x01	; 1
    4630:	f1 f7       	brne	.-4      	; 0x462e <lcd_init+0xf0>
    4632:	9e 8f       	std	Y+30, r25	; 0x1e
    4634:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	DDRB=0xff;            //apv
    4636:	e7 e3       	ldi	r30, 0x37	; 55
    4638:	f0 e0       	ldi	r31, 0x00	; 0
    463a:	8f ef       	ldi	r24, 0xFF	; 255
    463c:	80 83       	st	Z, r24
	DDRA|=(1<<3);
    463e:	aa e3       	ldi	r26, 0x3A	; 58
    4640:	b0 e0       	ldi	r27, 0x00	; 0
    4642:	ea e3       	ldi	r30, 0x3A	; 58
    4644:	f0 e0       	ldi	r31, 0x00	; 0
    4646:	80 81       	ld	r24, Z
    4648:	88 60       	ori	r24, 0x08	; 8
    464a:	8c 93       	st	X, r24
	DDRD|=(1<<6);
    464c:	a1 e3       	ldi	r26, 0x31	; 49
    464e:	b0 e0       	ldi	r27, 0x00	; 0
    4650:	e1 e3       	ldi	r30, 0x31	; 49
    4652:	f0 e0       	ldi	r31, 0x00	; 0
    4654:	80 81       	ld	r24, Z
    4656:	80 64       	ori	r24, 0x40	; 64
    4658:	8c 93       	st	X, r24
	PORTB=0;
    465a:	e8 e3       	ldi	r30, 0x38	; 56
    465c:	f0 e0       	ldi	r31, 0x00	; 0
    465e:	10 82       	st	Z, r1
	PORTD&=~(1<<6);
    4660:	a2 e3       	ldi	r26, 0x32	; 50
    4662:	b0 e0       	ldi	r27, 0x00	; 0
    4664:	e2 e3       	ldi	r30, 0x32	; 50
    4666:	f0 e0       	ldi	r31, 0x00	; 0
    4668:	80 81       	ld	r24, Z
    466a:	8f 7b       	andi	r24, 0xBF	; 191
    466c:	8c 93       	st	X, r24
	PORTA&=~(1<<3);
    466e:	ab e3       	ldi	r26, 0x3B	; 59
    4670:	b0 e0       	ldi	r27, 0x00	; 0
    4672:	eb e3       	ldi	r30, 0x3B	; 59
    4674:	f0 e0       	ldi	r31, 0x00	; 0
    4676:	80 81       	ld	r24, Z
    4678:	87 7f       	andi	r24, 0xF7	; 247
    467a:	8c 93       	st	X, r24
    467c:	80 e0       	ldi	r24, 0x00	; 0
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	a0 e4       	ldi	r26, 0x40	; 64
    4682:	b0 e4       	ldi	r27, 0x40	; 64
    4684:	89 8f       	std	Y+25, r24	; 0x19
    4686:	9a 8f       	std	Y+26, r25	; 0x1a
    4688:	ab 8f       	std	Y+27, r26	; 0x1b
    468a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    468c:	69 8d       	ldd	r22, Y+25	; 0x19
    468e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4690:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4692:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	4a ef       	ldi	r20, 0xFA	; 250
    469a:	54 e4       	ldi	r21, 0x44	; 68
    469c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	8d 8b       	std	Y+21, r24	; 0x15
    46a6:	9e 8b       	std	Y+22, r25	; 0x16
    46a8:	af 8b       	std	Y+23, r26	; 0x17
    46aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46ac:	6d 89       	ldd	r22, Y+21	; 0x15
    46ae:	7e 89       	ldd	r23, Y+22	; 0x16
    46b0:	8f 89       	ldd	r24, Y+23	; 0x17
    46b2:	98 8d       	ldd	r25, Y+24	; 0x18
    46b4:	20 e0       	ldi	r18, 0x00	; 0
    46b6:	30 e0       	ldi	r19, 0x00	; 0
    46b8:	40 e8       	ldi	r20, 0x80	; 128
    46ba:	5f e3       	ldi	r21, 0x3F	; 63
    46bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46c0:	88 23       	and	r24, r24
    46c2:	2c f4       	brge	.+10     	; 0x46ce <lcd_init+0x190>
		__ticks = 1;
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	9c 8b       	std	Y+20, r25	; 0x14
    46ca:	8b 8b       	std	Y+19, r24	; 0x13
    46cc:	3f c0       	rjmp	.+126    	; 0x474c <lcd_init+0x20e>
	else if (__tmp > 65535)
    46ce:	6d 89       	ldd	r22, Y+21	; 0x15
    46d0:	7e 89       	ldd	r23, Y+22	; 0x16
    46d2:	8f 89       	ldd	r24, Y+23	; 0x17
    46d4:	98 8d       	ldd	r25, Y+24	; 0x18
    46d6:	20 e0       	ldi	r18, 0x00	; 0
    46d8:	3f ef       	ldi	r19, 0xFF	; 255
    46da:	4f e7       	ldi	r20, 0x7F	; 127
    46dc:	57 e4       	ldi	r21, 0x47	; 71
    46de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46e2:	18 16       	cp	r1, r24
    46e4:	4c f5       	brge	.+82     	; 0x4738 <lcd_init+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46e6:	69 8d       	ldd	r22, Y+25	; 0x19
    46e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	40 e2       	ldi	r20, 0x20	; 32
    46f4:	51 e4       	ldi	r21, 0x41	; 65
    46f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fa:	dc 01       	movw	r26, r24
    46fc:	cb 01       	movw	r24, r22
    46fe:	bc 01       	movw	r22, r24
    4700:	cd 01       	movw	r24, r26
    4702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4706:	dc 01       	movw	r26, r24
    4708:	cb 01       	movw	r24, r22
    470a:	9c 8b       	std	Y+20, r25	; 0x14
    470c:	8b 8b       	std	Y+19, r24	; 0x13
    470e:	0f c0       	rjmp	.+30     	; 0x472e <lcd_init+0x1f0>
    4710:	88 ec       	ldi	r24, 0xC8	; 200
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	9a 8b       	std	Y+18, r25	; 0x12
    4716:	89 8b       	std	Y+17, r24	; 0x11
    4718:	89 89       	ldd	r24, Y+17	; 0x11
    471a:	9a 89       	ldd	r25, Y+18	; 0x12
    471c:	01 97       	sbiw	r24, 0x01	; 1
    471e:	f1 f7       	brne	.-4      	; 0x471c <lcd_init+0x1de>
    4720:	9a 8b       	std	Y+18, r25	; 0x12
    4722:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4724:	8b 89       	ldd	r24, Y+19	; 0x13
    4726:	9c 89       	ldd	r25, Y+20	; 0x14
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	9c 8b       	std	Y+20, r25	; 0x14
    472c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    472e:	8b 89       	ldd	r24, Y+19	; 0x13
    4730:	9c 89       	ldd	r25, Y+20	; 0x14
    4732:	00 97       	sbiw	r24, 0x00	; 0
    4734:	69 f7       	brne	.-38     	; 0x4710 <lcd_init+0x1d2>
    4736:	14 c0       	rjmp	.+40     	; 0x4760 <lcd_init+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4738:	6d 89       	ldd	r22, Y+21	; 0x15
    473a:	7e 89       	ldd	r23, Y+22	; 0x16
    473c:	8f 89       	ldd	r24, Y+23	; 0x17
    473e:	98 8d       	ldd	r25, Y+24	; 0x18
    4740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4744:	dc 01       	movw	r26, r24
    4746:	cb 01       	movw	r24, r22
    4748:	9c 8b       	std	Y+20, r25	; 0x14
    474a:	8b 8b       	std	Y+19, r24	; 0x13
    474c:	8b 89       	ldd	r24, Y+19	; 0x13
    474e:	9c 89       	ldd	r25, Y+20	; 0x14
    4750:	98 8b       	std	Y+16, r25	; 0x10
    4752:	8f 87       	std	Y+15, r24	; 0x0f
    4754:	8f 85       	ldd	r24, Y+15	; 0x0f
    4756:	98 89       	ldd	r25, Y+16	; 0x10
    4758:	01 97       	sbiw	r24, 0x01	; 1
    475a:	f1 f7       	brne	.-4      	; 0x4758 <lcd_init+0x21a>
    475c:	98 8b       	std	Y+16, r25	; 0x10
    475e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);

	send_command(0x28);
    4760:	88 e2       	ldi	r24, 0x28	; 40
    4762:	0e 94 3d 21 	call	0x427a	; 0x427a <send_command>
	send_command(0x0c);
    4766:	8c e0       	ldi	r24, 0x0C	; 12
    4768:	0e 94 3d 21 	call	0x427a	; 0x427a <send_command>
	send_command(0x06);
    476c:	86 e0       	ldi	r24, 0x06	; 6
    476e:	0e 94 3d 21 	call	0x427a	; 0x427a <send_command>
	send_command(0x01);
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	0e 94 3d 21 	call	0x427a	; 0x427a <send_command>
	send_command(0x80);
    4778:	80 e8       	ldi	r24, 0x80	; 128
    477a:	0e 94 3d 21 	call	0x427a	; 0x427a <send_command>
    477e:	80 e0       	ldi	r24, 0x00	; 0
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	a0 e4       	ldi	r26, 0x40	; 64
    4784:	b0 e4       	ldi	r27, 0x40	; 64
    4786:	8b 87       	std	Y+11, r24	; 0x0b
    4788:	9c 87       	std	Y+12, r25	; 0x0c
    478a:	ad 87       	std	Y+13, r26	; 0x0d
    478c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    478e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4790:	7c 85       	ldd	r23, Y+12	; 0x0c
    4792:	8d 85       	ldd	r24, Y+13	; 0x0d
    4794:	9e 85       	ldd	r25, Y+14	; 0x0e
    4796:	20 e0       	ldi	r18, 0x00	; 0
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	4a ef       	ldi	r20, 0xFA	; 250
    479c:	54 e4       	ldi	r21, 0x44	; 68
    479e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a2:	dc 01       	movw	r26, r24
    47a4:	cb 01       	movw	r24, r22
    47a6:	8f 83       	std	Y+7, r24	; 0x07
    47a8:	98 87       	std	Y+8, r25	; 0x08
    47aa:	a9 87       	std	Y+9, r26	; 0x09
    47ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47ae:	6f 81       	ldd	r22, Y+7	; 0x07
    47b0:	78 85       	ldd	r23, Y+8	; 0x08
    47b2:	89 85       	ldd	r24, Y+9	; 0x09
    47b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    47b6:	20 e0       	ldi	r18, 0x00	; 0
    47b8:	30 e0       	ldi	r19, 0x00	; 0
    47ba:	40 e8       	ldi	r20, 0x80	; 128
    47bc:	5f e3       	ldi	r21, 0x3F	; 63
    47be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47c2:	88 23       	and	r24, r24
    47c4:	2c f4       	brge	.+10     	; 0x47d0 <lcd_init+0x292>
		__ticks = 1;
    47c6:	81 e0       	ldi	r24, 0x01	; 1
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	9e 83       	std	Y+6, r25	; 0x06
    47cc:	8d 83       	std	Y+5, r24	; 0x05
    47ce:	3f c0       	rjmp	.+126    	; 0x484e <lcd_init+0x310>
	else if (__tmp > 65535)
    47d0:	6f 81       	ldd	r22, Y+7	; 0x07
    47d2:	78 85       	ldd	r23, Y+8	; 0x08
    47d4:	89 85       	ldd	r24, Y+9	; 0x09
    47d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	3f ef       	ldi	r19, 0xFF	; 255
    47dc:	4f e7       	ldi	r20, 0x7F	; 127
    47de:	57 e4       	ldi	r21, 0x47	; 71
    47e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47e4:	18 16       	cp	r1, r24
    47e6:	4c f5       	brge	.+82     	; 0x483a <lcd_init+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    47ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    47ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    47f0:	20 e0       	ldi	r18, 0x00	; 0
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	40 e2       	ldi	r20, 0x20	; 32
    47f6:	51 e4       	ldi	r21, 0x41	; 65
    47f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	bc 01       	movw	r22, r24
    4802:	cd 01       	movw	r24, r26
    4804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4808:	dc 01       	movw	r26, r24
    480a:	cb 01       	movw	r24, r22
    480c:	9e 83       	std	Y+6, r25	; 0x06
    480e:	8d 83       	std	Y+5, r24	; 0x05
    4810:	0f c0       	rjmp	.+30     	; 0x4830 <lcd_init+0x2f2>
    4812:	88 ec       	ldi	r24, 0xC8	; 200
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	9c 83       	std	Y+4, r25	; 0x04
    4818:	8b 83       	std	Y+3, r24	; 0x03
    481a:	8b 81       	ldd	r24, Y+3	; 0x03
    481c:	9c 81       	ldd	r25, Y+4	; 0x04
    481e:	01 97       	sbiw	r24, 0x01	; 1
    4820:	f1 f7       	brne	.-4      	; 0x481e <lcd_init+0x2e0>
    4822:	9c 83       	std	Y+4, r25	; 0x04
    4824:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4826:	8d 81       	ldd	r24, Y+5	; 0x05
    4828:	9e 81       	ldd	r25, Y+6	; 0x06
    482a:	01 97       	sbiw	r24, 0x01	; 1
    482c:	9e 83       	std	Y+6, r25	; 0x06
    482e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4830:	8d 81       	ldd	r24, Y+5	; 0x05
    4832:	9e 81       	ldd	r25, Y+6	; 0x06
    4834:	00 97       	sbiw	r24, 0x00	; 0
    4836:	69 f7       	brne	.-38     	; 0x4812 <lcd_init+0x2d4>
    4838:	14 c0       	rjmp	.+40     	; 0x4862 <lcd_init+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    483a:	6f 81       	ldd	r22, Y+7	; 0x07
    483c:	78 85       	ldd	r23, Y+8	; 0x08
    483e:	89 85       	ldd	r24, Y+9	; 0x09
    4840:	9a 85       	ldd	r25, Y+10	; 0x0a
    4842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4846:	dc 01       	movw	r26, r24
    4848:	cb 01       	movw	r24, r22
    484a:	9e 83       	std	Y+6, r25	; 0x06
    484c:	8d 83       	std	Y+5, r24	; 0x05
    484e:	8d 81       	ldd	r24, Y+5	; 0x05
    4850:	9e 81       	ldd	r25, Y+6	; 0x06
    4852:	9a 83       	std	Y+2, r25	; 0x02
    4854:	89 83       	std	Y+1, r24	; 0x01
    4856:	89 81       	ldd	r24, Y+1	; 0x01
    4858:	9a 81       	ldd	r25, Y+2	; 0x02
    485a:	01 97       	sbiw	r24, 0x01	; 1
    485c:	f1 f7       	brne	.-4      	; 0x485a <lcd_init+0x31c>
    485e:	9a 83       	std	Y+2, r25	; 0x02
    4860:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(3);
}
    4862:	aa 96       	adiw	r28, 0x2a	; 42
    4864:	0f b6       	in	r0, 0x3f	; 63
    4866:	f8 94       	cli
    4868:	de bf       	out	0x3e, r29	; 62
    486a:	0f be       	out	0x3f, r0	; 63
    486c:	cd bf       	out	0x3d, r28	; 61
    486e:	cf 91       	pop	r28
    4870:	df 91       	pop	r29
    4872:	08 95       	ret

00004874 <void_init_leds>:




void void_init_leds(void)
{
    4874:	df 93       	push	r29
    4876:	cf 93       	push	r28
    4878:	cd b7       	in	r28, 0x3d	; 61
    487a:	de b7       	in	r29, 0x3e	; 62
 *
 *
 *
 * */

	void_init_pin('a',1,1);
    487c:	81 e6       	ldi	r24, 0x61	; 97
    487e:	61 e0       	ldi	r22, 0x01	; 1
    4880:	41 e0       	ldi	r20, 0x01	; 1
    4882:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>
	void_init_pin('a',2,1);
    4886:	81 e6       	ldi	r24, 0x61	; 97
    4888:	62 e0       	ldi	r22, 0x02	; 2
    488a:	41 e0       	ldi	r20, 0x01	; 1
    488c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>
	void_init_pin('c',6,1);
    4890:	83 e6       	ldi	r24, 0x63	; 99
    4892:	66 e0       	ldi	r22, 0x06	; 6
    4894:	41 e0       	ldi	r20, 0x01	; 1
    4896:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>
	void_init_pin('c',7,1);
    489a:	83 e6       	ldi	r24, 0x63	; 99
    489c:	67 e0       	ldi	r22, 0x07	; 7
    489e:	41 e0       	ldi	r20, 0x01	; 1
    48a0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>

}
    48a4:	cf 91       	pop	r28
    48a6:	df 91       	pop	r29
    48a8:	08 95       	ret

000048aa <void_init_led>:



void void_init_led(char LED)
{
    48aa:	df 93       	push	r29
    48ac:	cf 93       	push	r28
    48ae:	00 d0       	rcall	.+0      	; 0x48b0 <void_init_led+0x6>
    48b0:	0f 92       	push	r0
    48b2:	cd b7       	in	r28, 0x3d	; 61
    48b4:	de b7       	in	r29, 0x3e	; 62
    48b6:	89 83       	std	Y+1, r24	; 0x01
	switch(LED)
    48b8:	89 81       	ldd	r24, Y+1	; 0x01
    48ba:	28 2f       	mov	r18, r24
    48bc:	30 e0       	ldi	r19, 0x00	; 0
    48be:	3b 83       	std	Y+3, r19	; 0x03
    48c0:	2a 83       	std	Y+2, r18	; 0x02
    48c2:	8a 81       	ldd	r24, Y+2	; 0x02
    48c4:	9b 81       	ldd	r25, Y+3	; 0x03
    48c6:	82 30       	cpi	r24, 0x02	; 2
    48c8:	91 05       	cpc	r25, r1
    48ca:	e1 f0       	breq	.+56     	; 0x4904 <void_init_led+0x5a>
    48cc:	2a 81       	ldd	r18, Y+2	; 0x02
    48ce:	3b 81       	ldd	r19, Y+3	; 0x03
    48d0:	23 30       	cpi	r18, 0x03	; 3
    48d2:	31 05       	cpc	r19, r1
    48d4:	34 f4       	brge	.+12     	; 0x48e2 <void_init_led+0x38>
    48d6:	8a 81       	ldd	r24, Y+2	; 0x02
    48d8:	9b 81       	ldd	r25, Y+3	; 0x03
    48da:	81 30       	cpi	r24, 0x01	; 1
    48dc:	91 05       	cpc	r25, r1
    48de:	61 f0       	breq	.+24     	; 0x48f8 <void_init_led+0x4e>
    48e0:	22 c0       	rjmp	.+68     	; 0x4926 <void_init_led+0x7c>
    48e2:	2a 81       	ldd	r18, Y+2	; 0x02
    48e4:	3b 81       	ldd	r19, Y+3	; 0x03
    48e6:	23 30       	cpi	r18, 0x03	; 3
    48e8:	31 05       	cpc	r19, r1
    48ea:	91 f0       	breq	.+36     	; 0x4910 <void_init_led+0x66>
    48ec:	8a 81       	ldd	r24, Y+2	; 0x02
    48ee:	9b 81       	ldd	r25, Y+3	; 0x03
    48f0:	84 30       	cpi	r24, 0x04	; 4
    48f2:	91 05       	cpc	r25, r1
    48f4:	99 f0       	breq	.+38     	; 0x491c <void_init_led+0x72>
    48f6:	17 c0       	rjmp	.+46     	; 0x4926 <void_init_led+0x7c>
	{
	case 1:
		void_init_pin('a',1,1);
    48f8:	81 e6       	ldi	r24, 0x61	; 97
    48fa:	61 e0       	ldi	r22, 0x01	; 1
    48fc:	41 e0       	ldi	r20, 0x01	; 1
    48fe:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>
    4902:	11 c0       	rjmp	.+34     	; 0x4926 <void_init_led+0x7c>
		break;
	case 2 :
		void_init_pin('a',2,1);
    4904:	81 e6       	ldi	r24, 0x61	; 97
    4906:	62 e0       	ldi	r22, 0x02	; 2
    4908:	41 e0       	ldi	r20, 0x01	; 1
    490a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>
    490e:	0b c0       	rjmp	.+22     	; 0x4926 <void_init_led+0x7c>
		break ;
	case 3:
		void_init_pin('c',7,1);
    4910:	83 e6       	ldi	r24, 0x63	; 99
    4912:	67 e0       	ldi	r22, 0x07	; 7
    4914:	41 e0       	ldi	r20, 0x01	; 1
    4916:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>
    491a:	05 c0       	rjmp	.+10     	; 0x4926 <void_init_led+0x7c>
		break;
	case 4:
		void_init_pin('c',6,1);
    491c:	83 e6       	ldi	r24, 0x63	; 99
    491e:	66 e0       	ldi	r22, 0x06	; 6
    4920:	41 e0       	ldi	r20, 0x01	; 1
    4922:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <void_init_pin>
		break;
	}

}
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	cf 91       	pop	r28
    492e:	df 91       	pop	r29
    4930:	08 95       	ret

00004932 <void_turn>:




void void_turn(char LED,char state)
{
    4932:	df 93       	push	r29
    4934:	cf 93       	push	r28
    4936:	00 d0       	rcall	.+0      	; 0x4938 <void_turn+0x6>
    4938:	00 d0       	rcall	.+0      	; 0x493a <void_turn+0x8>
    493a:	cd b7       	in	r28, 0x3d	; 61
    493c:	de b7       	in	r29, 0x3e	; 62
    493e:	89 83       	std	Y+1, r24	; 0x01
    4940:	6a 83       	std	Y+2, r22	; 0x02
	switch(LED)
    4942:	89 81       	ldd	r24, Y+1	; 0x01
    4944:	28 2f       	mov	r18, r24
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	3c 83       	std	Y+4, r19	; 0x04
    494a:	2b 83       	std	Y+3, r18	; 0x03
    494c:	8b 81       	ldd	r24, Y+3	; 0x03
    494e:	9c 81       	ldd	r25, Y+4	; 0x04
    4950:	82 30       	cpi	r24, 0x02	; 2
    4952:	91 05       	cpc	r25, r1
    4954:	29 f1       	breq	.+74     	; 0x49a0 <void_turn+0x6e>
    4956:	2b 81       	ldd	r18, Y+3	; 0x03
    4958:	3c 81       	ldd	r19, Y+4	; 0x04
    495a:	23 30       	cpi	r18, 0x03	; 3
    495c:	31 05       	cpc	r19, r1
    495e:	34 f4       	brge	.+12     	; 0x496c <void_turn+0x3a>
    4960:	8b 81       	ldd	r24, Y+3	; 0x03
    4962:	9c 81       	ldd	r25, Y+4	; 0x04
    4964:	81 30       	cpi	r24, 0x01	; 1
    4966:	91 05       	cpc	r25, r1
    4968:	61 f0       	breq	.+24     	; 0x4982 <void_turn+0x50>
    496a:	46 c0       	rjmp	.+140    	; 0x49f8 <void_turn+0xc6>
    496c:	2b 81       	ldd	r18, Y+3	; 0x03
    496e:	3c 81       	ldd	r19, Y+4	; 0x04
    4970:	23 30       	cpi	r18, 0x03	; 3
    4972:	31 05       	cpc	r19, r1
    4974:	21 f1       	breq	.+72     	; 0x49be <void_turn+0x8c>
    4976:	8b 81       	ldd	r24, Y+3	; 0x03
    4978:	9c 81       	ldd	r25, Y+4	; 0x04
    497a:	84 30       	cpi	r24, 0x04	; 4
    497c:	91 05       	cpc	r25, r1
    497e:	71 f1       	breq	.+92     	; 0x49dc <void_turn+0xaa>
    4980:	3b c0       	rjmp	.+118    	; 0x49f8 <void_turn+0xc6>
	{
	case 1:
		if (state)
    4982:	8a 81       	ldd	r24, Y+2	; 0x02
    4984:	88 23       	and	r24, r24
    4986:	31 f0       	breq	.+12     	; 0x4994 <void_turn+0x62>
			void_write_pin('a',1,1);
    4988:	81 e6       	ldi	r24, 0x61	; 97
    498a:	61 e0       	ldi	r22, 0x01	; 1
    498c:	41 e0       	ldi	r20, 0x01	; 1
    498e:	0e 94 fd 07 	call	0xffa	; 0xffa <void_write_pin>
    4992:	32 c0       	rjmp	.+100    	; 0x49f8 <void_turn+0xc6>
		else
			void_write_pin('a',1,0);
    4994:	81 e6       	ldi	r24, 0x61	; 97
    4996:	61 e0       	ldi	r22, 0x01	; 1
    4998:	40 e0       	ldi	r20, 0x00	; 0
    499a:	0e 94 fd 07 	call	0xffa	; 0xffa <void_write_pin>
    499e:	2c c0       	rjmp	.+88     	; 0x49f8 <void_turn+0xc6>
		break;
	case 2 :
		if (state)
    49a0:	8a 81       	ldd	r24, Y+2	; 0x02
    49a2:	88 23       	and	r24, r24
    49a4:	31 f0       	breq	.+12     	; 0x49b2 <void_turn+0x80>
			void_write_pin('a',2,1);
    49a6:	81 e6       	ldi	r24, 0x61	; 97
    49a8:	62 e0       	ldi	r22, 0x02	; 2
    49aa:	41 e0       	ldi	r20, 0x01	; 1
    49ac:	0e 94 fd 07 	call	0xffa	; 0xffa <void_write_pin>
    49b0:	23 c0       	rjmp	.+70     	; 0x49f8 <void_turn+0xc6>
		else
			void_write_pin('a',2,0);
    49b2:	81 e6       	ldi	r24, 0x61	; 97
    49b4:	62 e0       	ldi	r22, 0x02	; 2
    49b6:	40 e0       	ldi	r20, 0x00	; 0
    49b8:	0e 94 fd 07 	call	0xffa	; 0xffa <void_write_pin>
    49bc:	1d c0       	rjmp	.+58     	; 0x49f8 <void_turn+0xc6>
		break;
	case 3:
		if (state)
    49be:	8a 81       	ldd	r24, Y+2	; 0x02
    49c0:	88 23       	and	r24, r24
    49c2:	31 f0       	breq	.+12     	; 0x49d0 <void_turn+0x9e>
			void_write_pin('c',7,1);
    49c4:	83 e6       	ldi	r24, 0x63	; 99
    49c6:	67 e0       	ldi	r22, 0x07	; 7
    49c8:	41 e0       	ldi	r20, 0x01	; 1
    49ca:	0e 94 fd 07 	call	0xffa	; 0xffa <void_write_pin>
    49ce:	14 c0       	rjmp	.+40     	; 0x49f8 <void_turn+0xc6>
		else
			void_write_pin('c',7,0);
    49d0:	83 e6       	ldi	r24, 0x63	; 99
    49d2:	67 e0       	ldi	r22, 0x07	; 7
    49d4:	40 e0       	ldi	r20, 0x00	; 0
    49d6:	0e 94 fd 07 	call	0xffa	; 0xffa <void_write_pin>
    49da:	0e c0       	rjmp	.+28     	; 0x49f8 <void_turn+0xc6>
		break;
	case 4:
		if (state)
    49dc:	8a 81       	ldd	r24, Y+2	; 0x02
    49de:	88 23       	and	r24, r24
    49e0:	31 f0       	breq	.+12     	; 0x49ee <void_turn+0xbc>
			void_write_pin('c',6,1);
    49e2:	83 e6       	ldi	r24, 0x63	; 99
    49e4:	66 e0       	ldi	r22, 0x06	; 6
    49e6:	41 e0       	ldi	r20, 0x01	; 1
    49e8:	0e 94 fd 07 	call	0xffa	; 0xffa <void_write_pin>
    49ec:	05 c0       	rjmp	.+10     	; 0x49f8 <void_turn+0xc6>
		else
			void_write_pin('c',6,0);
    49ee:	83 e6       	ldi	r24, 0x63	; 99
    49f0:	66 e0       	ldi	r22, 0x06	; 6
    49f2:	40 e0       	ldi	r20, 0x00	; 0
    49f4:	0e 94 fd 07 	call	0xffa	; 0xffa <void_write_pin>
		break;
	}


}
    49f8:	0f 90       	pop	r0
    49fa:	0f 90       	pop	r0
    49fc:	0f 90       	pop	r0
    49fe:	0f 90       	pop	r0
    4a00:	cf 91       	pop	r28
    4a02:	df 91       	pop	r29
    4a04:	08 95       	ret

00004a06 <void_toggle>:


void void_toggle(char LED)
{
    4a06:	df 93       	push	r29
    4a08:	cf 93       	push	r28
    4a0a:	00 d0       	rcall	.+0      	; 0x4a0c <void_toggle+0x6>
    4a0c:	0f 92       	push	r0
    4a0e:	cd b7       	in	r28, 0x3d	; 61
    4a10:	de b7       	in	r29, 0x3e	; 62
    4a12:	89 83       	std	Y+1, r24	; 0x01
	switch(LED)
    4a14:	89 81       	ldd	r24, Y+1	; 0x01
    4a16:	28 2f       	mov	r18, r24
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	3b 83       	std	Y+3, r19	; 0x03
    4a1c:	2a 83       	std	Y+2, r18	; 0x02
    4a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a20:	9b 81       	ldd	r25, Y+3	; 0x03
    4a22:	82 30       	cpi	r24, 0x02	; 2
    4a24:	91 05       	cpc	r25, r1
    4a26:	f9 f0       	breq	.+62     	; 0x4a66 <void_toggle+0x60>
    4a28:	2a 81       	ldd	r18, Y+2	; 0x02
    4a2a:	3b 81       	ldd	r19, Y+3	; 0x03
    4a2c:	23 30       	cpi	r18, 0x03	; 3
    4a2e:	31 05       	cpc	r19, r1
    4a30:	34 f4       	brge	.+12     	; 0x4a3e <void_toggle+0x38>
    4a32:	8a 81       	ldd	r24, Y+2	; 0x02
    4a34:	9b 81       	ldd	r25, Y+3	; 0x03
    4a36:	81 30       	cpi	r24, 0x01	; 1
    4a38:	91 05       	cpc	r25, r1
    4a3a:	61 f0       	breq	.+24     	; 0x4a54 <void_toggle+0x4e>
    4a3c:	2e c0       	rjmp	.+92     	; 0x4a9a <void_toggle+0x94>
    4a3e:	2a 81       	ldd	r18, Y+2	; 0x02
    4a40:	3b 81       	ldd	r19, Y+3	; 0x03
    4a42:	23 30       	cpi	r18, 0x03	; 3
    4a44:	31 05       	cpc	r19, r1
    4a46:	c1 f0       	breq	.+48     	; 0x4a78 <void_toggle+0x72>
    4a48:	8a 81       	ldd	r24, Y+2	; 0x02
    4a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    4a4c:	84 30       	cpi	r24, 0x04	; 4
    4a4e:	91 05       	cpc	r25, r1
    4a50:	e1 f0       	breq	.+56     	; 0x4a8a <void_toggle+0x84>
    4a52:	23 c0       	rjmp	.+70     	; 0x4a9a <void_toggle+0x94>
	{
	case 1:
		TOGGLE_BIT(PORTA,1);
    4a54:	ab e3       	ldi	r26, 0x3B	; 59
    4a56:	b0 e0       	ldi	r27, 0x00	; 0
    4a58:	eb e3       	ldi	r30, 0x3B	; 59
    4a5a:	f0 e0       	ldi	r31, 0x00	; 0
    4a5c:	90 81       	ld	r25, Z
    4a5e:	82 e0       	ldi	r24, 0x02	; 2
    4a60:	89 27       	eor	r24, r25
    4a62:	8c 93       	st	X, r24
    4a64:	1a c0       	rjmp	.+52     	; 0x4a9a <void_toggle+0x94>
		break;
	case 2 :
		TOGGLE_BIT(PORTA,2);
    4a66:	ab e3       	ldi	r26, 0x3B	; 59
    4a68:	b0 e0       	ldi	r27, 0x00	; 0
    4a6a:	eb e3       	ldi	r30, 0x3B	; 59
    4a6c:	f0 e0       	ldi	r31, 0x00	; 0
    4a6e:	90 81       	ld	r25, Z
    4a70:	84 e0       	ldi	r24, 0x04	; 4
    4a72:	89 27       	eor	r24, r25
    4a74:	8c 93       	st	X, r24
    4a76:	11 c0       	rjmp	.+34     	; 0x4a9a <void_toggle+0x94>
		break ;
	case 3:
		TOGGLE_BIT(PORTA,7);
    4a78:	ab e3       	ldi	r26, 0x3B	; 59
    4a7a:	b0 e0       	ldi	r27, 0x00	; 0
    4a7c:	eb e3       	ldi	r30, 0x3B	; 59
    4a7e:	f0 e0       	ldi	r31, 0x00	; 0
    4a80:	90 81       	ld	r25, Z
    4a82:	80 e8       	ldi	r24, 0x80	; 128
    4a84:	89 27       	eor	r24, r25
    4a86:	8c 93       	st	X, r24
    4a88:	08 c0       	rjmp	.+16     	; 0x4a9a <void_toggle+0x94>
		break;
	case 4:
		TOGGLE_BIT(PORTA,6);
    4a8a:	ab e3       	ldi	r26, 0x3B	; 59
    4a8c:	b0 e0       	ldi	r27, 0x00	; 0
    4a8e:	eb e3       	ldi	r30, 0x3B	; 59
    4a90:	f0 e0       	ldi	r31, 0x00	; 0
    4a92:	90 81       	ld	r25, Z
    4a94:	80 e4       	ldi	r24, 0x40	; 64
    4a96:	89 27       	eor	r24, r25
    4a98:	8c 93       	st	X, r24
		break;
	}


}
    4a9a:	0f 90       	pop	r0
    4a9c:	0f 90       	pop	r0
    4a9e:	0f 90       	pop	r0
    4aa0:	cf 91       	pop	r28
    4aa2:	df 91       	pop	r29
    4aa4:	08 95       	ret

00004aa6 <TEMP_READ>:
#include "../MCAL/F90_ADC.h"
adc_t adc={128,0,0,3,5};


float TEMP_READ()
{
    4aa6:	df 93       	push	r29
    4aa8:	cf 93       	push	r28
    4aaa:	00 d0       	rcall	.+0      	; 0x4aac <TEMP_READ+0x6>
    4aac:	00 d0       	rcall	.+0      	; 0x4aae <TEMP_READ+0x8>
    4aae:	cd b7       	in	r28, 0x3d	; 61
    4ab0:	de b7       	in	r29, 0x3e	; 62
	ADC_INIT(&adc);
    4ab2:	8a ea       	ldi	r24, 0xAA	; 170
    4ab4:	91 e0       	ldi	r25, 0x01	; 1
    4ab6:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <ADC_INIT>
	float temp=ADC_READ();
    4aba:	0e 94 aa 0b 	call	0x1754	; 0x1754 <ADC_READ>
    4abe:	aa 27       	eor	r26, r26
    4ac0:	97 fd       	sbrc	r25, 7
    4ac2:	a0 95       	com	r26
    4ac4:	ba 2f       	mov	r27, r26
    4ac6:	bc 01       	movw	r22, r24
    4ac8:	cd 01       	movw	r24, r26
    4aca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4ace:	dc 01       	movw	r26, r24
    4ad0:	cb 01       	movw	r24, r22
    4ad2:	89 83       	std	Y+1, r24	; 0x01
    4ad4:	9a 83       	std	Y+2, r25	; 0x02
    4ad6:	ab 83       	std	Y+3, r26	; 0x03
    4ad8:	bc 83       	std	Y+4, r27	; 0x04
	return (temp*4.88)/10;
    4ada:	69 81       	ldd	r22, Y+1	; 0x01
    4adc:	7a 81       	ldd	r23, Y+2	; 0x02
    4ade:	8b 81       	ldd	r24, Y+3	; 0x03
    4ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ae2:	26 ef       	ldi	r18, 0xF6	; 246
    4ae4:	38 e2       	ldi	r19, 0x28	; 40
    4ae6:	4c e9       	ldi	r20, 0x9C	; 156
    4ae8:	50 e4       	ldi	r21, 0x40	; 64
    4aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aee:	dc 01       	movw	r26, r24
    4af0:	cb 01       	movw	r24, r22
    4af2:	bc 01       	movw	r22, r24
    4af4:	cd 01       	movw	r24, r26
    4af6:	20 e0       	ldi	r18, 0x00	; 0
    4af8:	30 e0       	ldi	r19, 0x00	; 0
    4afa:	40 e2       	ldi	r20, 0x20	; 32
    4afc:	51 e4       	ldi	r21, 0x41	; 65
    4afe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4b02:	dc 01       	movw	r26, r24
    4b04:	cb 01       	movw	r24, r22




}
    4b06:	bc 01       	movw	r22, r24
    4b08:	cd 01       	movw	r24, r26
    4b0a:	0f 90       	pop	r0
    4b0c:	0f 90       	pop	r0
    4b0e:	0f 90       	pop	r0
    4b10:	0f 90       	pop	r0
    4b12:	cf 91       	pop	r28
    4b14:	df 91       	pop	r29
    4b16:	08 95       	ret

00004b18 <main>:
int x,y;
char toscreen[50];
int * ptr;
key k;
int main()
{
    4b18:	df 93       	push	r29
    4b1a:	cf 93       	push	r28
    4b1c:	cd b7       	in	r28, 0x3d	; 61
    4b1e:	de b7       	in	r29, 0x3e	; 62
    4b20:	ef 97       	sbiw	r28, 0x3f	; 63
    4b22:	0f b6       	in	r0, 0x3f	; 63
    4b24:	f8 94       	cli
    4b26:	de bf       	out	0x3e, r29	; 62
    4b28:	0f be       	out	0x3f, r0	; 63
    4b2a:	cd bf       	out	0x3d, r28	; 61
	char start[]="nothing pressed";
    4b2c:	ce 01       	movw	r24, r28
    4b2e:	8b 96       	adiw	r24, 0x2b	; 43
    4b30:	9c af       	std	Y+60, r25	; 0x3c
    4b32:	8b af       	std	Y+59, r24	; 0x3b
    4b34:	eb e8       	ldi	r30, 0x8B	; 139
    4b36:	f0 e0       	ldi	r31, 0x00	; 0
    4b38:	fe af       	std	Y+62, r31	; 0x3e
    4b3a:	ed af       	std	Y+61, r30	; 0x3d
    4b3c:	f0 e1       	ldi	r31, 0x10	; 16
    4b3e:	ff af       	std	Y+63, r31	; 0x3f
    4b40:	ed ad       	ldd	r30, Y+61	; 0x3d
    4b42:	fe ad       	ldd	r31, Y+62	; 0x3e
    4b44:	00 80       	ld	r0, Z
    4b46:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b48:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b4a:	01 96       	adiw	r24, 0x01	; 1
    4b4c:	9e af       	std	Y+62, r25	; 0x3e
    4b4e:	8d af       	std	Y+61, r24	; 0x3d
    4b50:	eb ad       	ldd	r30, Y+59	; 0x3b
    4b52:	fc ad       	ldd	r31, Y+60	; 0x3c
    4b54:	00 82       	st	Z, r0
    4b56:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b58:	9c ad       	ldd	r25, Y+60	; 0x3c
    4b5a:	01 96       	adiw	r24, 0x01	; 1
    4b5c:	9c af       	std	Y+60, r25	; 0x3c
    4b5e:	8b af       	std	Y+59, r24	; 0x3b
    4b60:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b62:	91 50       	subi	r25, 0x01	; 1
    4b64:	9f af       	std	Y+63, r25	; 0x3f
    4b66:	ef ad       	ldd	r30, Y+63	; 0x3f
    4b68:	ee 23       	and	r30, r30
    4b6a:	51 f7       	brne	.-44     	; 0x4b40 <main+0x28>

	void_init_keypad();
    4b6c:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <void_init_keypad>
	F91_void_initLCD();
    4b70:	0e 94 65 1b 	call	0x36ca	; 0x36ca <F91_void_initLCD>
	F91_void_LCD_print( start);
    4b74:	ce 01       	movw	r24, r28
    4b76:	8b 96       	adiw	r24, 0x2b	; 43
    4b78:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <F91_void_LCD_print>
    4b7c:	80 e0       	ldi	r24, 0x00	; 0
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	aa e7       	ldi	r26, 0x7A	; 122
    4b82:	b4 e4       	ldi	r27, 0x44	; 68
    4b84:	8f a3       	std	Y+39, r24	; 0x27
    4b86:	98 a7       	std	Y+40, r25	; 0x28
    4b88:	a9 a7       	std	Y+41, r26	; 0x29
    4b8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b8c:	6f a1       	ldd	r22, Y+39	; 0x27
    4b8e:	78 a5       	ldd	r23, Y+40	; 0x28
    4b90:	89 a5       	ldd	r24, Y+41	; 0x29
    4b92:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b94:	20 e0       	ldi	r18, 0x00	; 0
    4b96:	30 e0       	ldi	r19, 0x00	; 0
    4b98:	4a ef       	ldi	r20, 0xFA	; 250
    4b9a:	54 e4       	ldi	r21, 0x44	; 68
    4b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	cb 01       	movw	r24, r22
    4ba4:	8b a3       	std	Y+35, r24	; 0x23
    4ba6:	9c a3       	std	Y+36, r25	; 0x24
    4ba8:	ad a3       	std	Y+37, r26	; 0x25
    4baa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4bac:	6b a1       	ldd	r22, Y+35	; 0x23
    4bae:	7c a1       	ldd	r23, Y+36	; 0x24
    4bb0:	8d a1       	ldd	r24, Y+37	; 0x25
    4bb2:	9e a1       	ldd	r25, Y+38	; 0x26
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	30 e0       	ldi	r19, 0x00	; 0
    4bb8:	40 e8       	ldi	r20, 0x80	; 128
    4bba:	5f e3       	ldi	r21, 0x3F	; 63
    4bbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bc0:	88 23       	and	r24, r24
    4bc2:	2c f4       	brge	.+10     	; 0x4bce <main+0xb6>
		__ticks = 1;
    4bc4:	81 e0       	ldi	r24, 0x01	; 1
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	9a a3       	std	Y+34, r25	; 0x22
    4bca:	89 a3       	std	Y+33, r24	; 0x21
    4bcc:	3f c0       	rjmp	.+126    	; 0x4c4c <main+0x134>
	else if (__tmp > 65535)
    4bce:	6b a1       	ldd	r22, Y+35	; 0x23
    4bd0:	7c a1       	ldd	r23, Y+36	; 0x24
    4bd2:	8d a1       	ldd	r24, Y+37	; 0x25
    4bd4:	9e a1       	ldd	r25, Y+38	; 0x26
    4bd6:	20 e0       	ldi	r18, 0x00	; 0
    4bd8:	3f ef       	ldi	r19, 0xFF	; 255
    4bda:	4f e7       	ldi	r20, 0x7F	; 127
    4bdc:	57 e4       	ldi	r21, 0x47	; 71
    4bde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4be2:	18 16       	cp	r1, r24
    4be4:	4c f5       	brge	.+82     	; 0x4c38 <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4be6:	6f a1       	ldd	r22, Y+39	; 0x27
    4be8:	78 a5       	ldd	r23, Y+40	; 0x28
    4bea:	89 a5       	ldd	r24, Y+41	; 0x29
    4bec:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bee:	20 e0       	ldi	r18, 0x00	; 0
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	40 e2       	ldi	r20, 0x20	; 32
    4bf4:	51 e4       	ldi	r21, 0x41	; 65
    4bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfa:	dc 01       	movw	r26, r24
    4bfc:	cb 01       	movw	r24, r22
    4bfe:	bc 01       	movw	r22, r24
    4c00:	cd 01       	movw	r24, r26
    4c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c06:	dc 01       	movw	r26, r24
    4c08:	cb 01       	movw	r24, r22
    4c0a:	9a a3       	std	Y+34, r25	; 0x22
    4c0c:	89 a3       	std	Y+33, r24	; 0x21
    4c0e:	0f c0       	rjmp	.+30     	; 0x4c2e <main+0x116>
    4c10:	88 ec       	ldi	r24, 0xC8	; 200
    4c12:	90 e0       	ldi	r25, 0x00	; 0
    4c14:	98 a3       	std	Y+32, r25	; 0x20
    4c16:	8f 8f       	std	Y+31, r24	; 0x1f
    4c18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c1a:	98 a1       	ldd	r25, Y+32	; 0x20
    4c1c:	01 97       	sbiw	r24, 0x01	; 1
    4c1e:	f1 f7       	brne	.-4      	; 0x4c1c <main+0x104>
    4c20:	98 a3       	std	Y+32, r25	; 0x20
    4c22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c24:	89 a1       	ldd	r24, Y+33	; 0x21
    4c26:	9a a1       	ldd	r25, Y+34	; 0x22
    4c28:	01 97       	sbiw	r24, 0x01	; 1
    4c2a:	9a a3       	std	Y+34, r25	; 0x22
    4c2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c2e:	89 a1       	ldd	r24, Y+33	; 0x21
    4c30:	9a a1       	ldd	r25, Y+34	; 0x22
    4c32:	00 97       	sbiw	r24, 0x00	; 0
    4c34:	69 f7       	brne	.-38     	; 0x4c10 <main+0xf8>
    4c36:	14 c0       	rjmp	.+40     	; 0x4c60 <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c38:	6b a1       	ldd	r22, Y+35	; 0x23
    4c3a:	7c a1       	ldd	r23, Y+36	; 0x24
    4c3c:	8d a1       	ldd	r24, Y+37	; 0x25
    4c3e:	9e a1       	ldd	r25, Y+38	; 0x26
    4c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c44:	dc 01       	movw	r26, r24
    4c46:	cb 01       	movw	r24, r22
    4c48:	9a a3       	std	Y+34, r25	; 0x22
    4c4a:	89 a3       	std	Y+33, r24	; 0x21
    4c4c:	89 a1       	ldd	r24, Y+33	; 0x21
    4c4e:	9a a1       	ldd	r25, Y+34	; 0x22
    4c50:	9e 8f       	std	Y+30, r25	; 0x1e
    4c52:	8d 8f       	std	Y+29, r24	; 0x1d
    4c54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c58:	01 97       	sbiw	r24, 0x01	; 1
    4c5a:	f1 f7       	brne	.-4      	; 0x4c58 <main+0x140>
    4c5c:	9e 8f       	std	Y+30, r25	; 0x1e
    4c5e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	F91_void_LCD_Clear_Screen();
    4c60:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <F91_void_LCD_Clear_Screen>
	sprintf(toscreen,"button %d ,%d",x,y);
    4c64:	20 91 b6 01 	lds	r18, 0x01B6
    4c68:	30 91 b7 01 	lds	r19, 0x01B7
    4c6c:	40 91 bc 01 	lds	r20, 0x01BC
    4c70:	50 91 bd 01 	lds	r21, 0x01BD
    4c74:	8d b7       	in	r24, 0x3d	; 61
    4c76:	9e b7       	in	r25, 0x3e	; 62
    4c78:	08 97       	sbiw	r24, 0x08	; 8
    4c7a:	0f b6       	in	r0, 0x3f	; 63
    4c7c:	f8 94       	cli
    4c7e:	9e bf       	out	0x3e, r25	; 62
    4c80:	0f be       	out	0x3f, r0	; 63
    4c82:	8d bf       	out	0x3d, r24	; 61
    4c84:	ed b7       	in	r30, 0x3d	; 61
    4c86:	fe b7       	in	r31, 0x3e	; 62
    4c88:	31 96       	adiw	r30, 0x01	; 1
    4c8a:	8e eb       	ldi	r24, 0xBE	; 190
    4c8c:	91 e0       	ldi	r25, 0x01	; 1
    4c8e:	91 83       	std	Z+1, r25	; 0x01
    4c90:	80 83       	st	Z, r24
    4c92:	80 e6       	ldi	r24, 0x60	; 96
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	93 83       	std	Z+3, r25	; 0x03
    4c98:	82 83       	std	Z+2, r24	; 0x02
    4c9a:	35 83       	std	Z+5, r19	; 0x05
    4c9c:	24 83       	std	Z+4, r18	; 0x04
    4c9e:	57 83       	std	Z+7, r21	; 0x07
    4ca0:	46 83       	std	Z+6, r20	; 0x06
    4ca2:	0e 94 f7 27 	call	0x4fee	; 0x4fee <sprintf>
    4ca6:	ed b7       	in	r30, 0x3d	; 61
    4ca8:	fe b7       	in	r31, 0x3e	; 62
    4caa:	38 96       	adiw	r30, 0x08	; 8
    4cac:	0f b6       	in	r0, 0x3f	; 63
    4cae:	f8 94       	cli
    4cb0:	fe bf       	out	0x3e, r31	; 62
    4cb2:	0f be       	out	0x3f, r0	; 63
    4cb4:	ed bf       	out	0x3d, r30	; 61

	while (1)
	{
		k= key_read_keypad();
    4cb6:	0e 94 5e 20 	call	0x40bc	; 0x40bc <key_read_keypad>
    4cba:	90 93 bb 01 	sts	0x01BB, r25
    4cbe:	80 93 ba 01 	sts	0x01BA, r24
		x=k.x;
    4cc2:	80 91 ba 01 	lds	r24, 0x01BA
    4cc6:	88 2f       	mov	r24, r24
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	90 93 b7 01 	sts	0x01B7, r25
    4cce:	80 93 b6 01 	sts	0x01B6, r24
		y=k.y;
    4cd2:	80 91 bb 01 	lds	r24, 0x01BB
    4cd6:	88 2f       	mov	r24, r24
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	90 93 bd 01 	sts	0x01BD, r25
    4cde:	80 93 bc 01 	sts	0x01BC, r24
		if (y==5 )
    4ce2:	80 91 bc 01 	lds	r24, 0x01BC
    4ce6:	90 91 bd 01 	lds	r25, 0x01BD
    4cea:	85 30       	cpi	r24, 0x05	; 5
    4cec:	91 05       	cpc	r25, r1
    4cee:	09 f0       	breq	.+2      	; 0x4cf2 <main+0x1da>
    4cf0:	77 c0       	rjmp	.+238    	; 0x4de0 <main+0x2c8>
		{
			F91_void_LCD_print( "waiting .... ");
    4cf2:	8e e6       	ldi	r24, 0x6E	; 110
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <F91_void_LCD_print>
    4cfa:	80 e0       	ldi	r24, 0x00	; 0
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	a8 ec       	ldi	r26, 0xC8	; 200
    4d00:	b2 e4       	ldi	r27, 0x42	; 66
    4d02:	89 8f       	std	Y+25, r24	; 0x19
    4d04:	9a 8f       	std	Y+26, r25	; 0x1a
    4d06:	ab 8f       	std	Y+27, r26	; 0x1b
    4d08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d0a:	69 8d       	ldd	r22, Y+25	; 0x19
    4d0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	4a ef       	ldi	r20, 0xFA	; 250
    4d18:	54 e4       	ldi	r21, 0x44	; 68
    4d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d1e:	dc 01       	movw	r26, r24
    4d20:	cb 01       	movw	r24, r22
    4d22:	8d 8b       	std	Y+21, r24	; 0x15
    4d24:	9e 8b       	std	Y+22, r25	; 0x16
    4d26:	af 8b       	std	Y+23, r26	; 0x17
    4d28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    4d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    4d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    4d30:	98 8d       	ldd	r25, Y+24	; 0x18
    4d32:	20 e0       	ldi	r18, 0x00	; 0
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	40 e8       	ldi	r20, 0x80	; 128
    4d38:	5f e3       	ldi	r21, 0x3F	; 63
    4d3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d3e:	88 23       	and	r24, r24
    4d40:	2c f4       	brge	.+10     	; 0x4d4c <main+0x234>
		__ticks = 1;
    4d42:	81 e0       	ldi	r24, 0x01	; 1
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	9c 8b       	std	Y+20, r25	; 0x14
    4d48:	8b 8b       	std	Y+19, r24	; 0x13
    4d4a:	3f c0       	rjmp	.+126    	; 0x4dca <main+0x2b2>
	else if (__tmp > 65535)
    4d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    4d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    4d50:	8f 89       	ldd	r24, Y+23	; 0x17
    4d52:	98 8d       	ldd	r25, Y+24	; 0x18
    4d54:	20 e0       	ldi	r18, 0x00	; 0
    4d56:	3f ef       	ldi	r19, 0xFF	; 255
    4d58:	4f e7       	ldi	r20, 0x7F	; 127
    4d5a:	57 e4       	ldi	r21, 0x47	; 71
    4d5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d60:	18 16       	cp	r1, r24
    4d62:	4c f5       	brge	.+82     	; 0x4db6 <main+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d64:	69 8d       	ldd	r22, Y+25	; 0x19
    4d66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d6c:	20 e0       	ldi	r18, 0x00	; 0
    4d6e:	30 e0       	ldi	r19, 0x00	; 0
    4d70:	40 e2       	ldi	r20, 0x20	; 32
    4d72:	51 e4       	ldi	r21, 0x41	; 65
    4d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d78:	dc 01       	movw	r26, r24
    4d7a:	cb 01       	movw	r24, r22
    4d7c:	bc 01       	movw	r22, r24
    4d7e:	cd 01       	movw	r24, r26
    4d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d84:	dc 01       	movw	r26, r24
    4d86:	cb 01       	movw	r24, r22
    4d88:	9c 8b       	std	Y+20, r25	; 0x14
    4d8a:	8b 8b       	std	Y+19, r24	; 0x13
    4d8c:	0f c0       	rjmp	.+30     	; 0x4dac <main+0x294>
    4d8e:	88 ec       	ldi	r24, 0xC8	; 200
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	9a 8b       	std	Y+18, r25	; 0x12
    4d94:	89 8b       	std	Y+17, r24	; 0x11
    4d96:	89 89       	ldd	r24, Y+17	; 0x11
    4d98:	9a 89       	ldd	r25, Y+18	; 0x12
    4d9a:	01 97       	sbiw	r24, 0x01	; 1
    4d9c:	f1 f7       	brne	.-4      	; 0x4d9a <main+0x282>
    4d9e:	9a 8b       	std	Y+18, r25	; 0x12
    4da0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4da2:	8b 89       	ldd	r24, Y+19	; 0x13
    4da4:	9c 89       	ldd	r25, Y+20	; 0x14
    4da6:	01 97       	sbiw	r24, 0x01	; 1
    4da8:	9c 8b       	std	Y+20, r25	; 0x14
    4daa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dac:	8b 89       	ldd	r24, Y+19	; 0x13
    4dae:	9c 89       	ldd	r25, Y+20	; 0x14
    4db0:	00 97       	sbiw	r24, 0x00	; 0
    4db2:	69 f7       	brne	.-38     	; 0x4d8e <main+0x276>
    4db4:	b4 c0       	rjmp	.+360    	; 0x4f1e <main+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4db6:	6d 89       	ldd	r22, Y+21	; 0x15
    4db8:	7e 89       	ldd	r23, Y+22	; 0x16
    4dba:	8f 89       	ldd	r24, Y+23	; 0x17
    4dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    4dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc2:	dc 01       	movw	r26, r24
    4dc4:	cb 01       	movw	r24, r22
    4dc6:	9c 8b       	std	Y+20, r25	; 0x14
    4dc8:	8b 8b       	std	Y+19, r24	; 0x13
    4dca:	8b 89       	ldd	r24, Y+19	; 0x13
    4dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    4dce:	98 8b       	std	Y+16, r25	; 0x10
    4dd0:	8f 87       	std	Y+15, r24	; 0x0f
    4dd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dd4:	98 89       	ldd	r25, Y+16	; 0x10
    4dd6:	01 97       	sbiw	r24, 0x01	; 1
    4dd8:	f1 f7       	brne	.-4      	; 0x4dd6 <main+0x2be>
    4dda:	98 8b       	std	Y+16, r25	; 0x10
    4ddc:	8f 87       	std	Y+15, r24	; 0x0f
    4dde:	9f c0       	rjmp	.+318    	; 0x4f1e <main+0x406>
			_delay_ms(100);
		}
		else
		{
			sprintf(toscreen,"button %d, %d ",x,y);
    4de0:	20 91 b6 01 	lds	r18, 0x01B6
    4de4:	30 91 b7 01 	lds	r19, 0x01B7
    4de8:	40 91 bc 01 	lds	r20, 0x01BC
    4dec:	50 91 bd 01 	lds	r21, 0x01BD
    4df0:	8d b7       	in	r24, 0x3d	; 61
    4df2:	9e b7       	in	r25, 0x3e	; 62
    4df4:	08 97       	sbiw	r24, 0x08	; 8
    4df6:	0f b6       	in	r0, 0x3f	; 63
    4df8:	f8 94       	cli
    4dfa:	9e bf       	out	0x3e, r25	; 62
    4dfc:	0f be       	out	0x3f, r0	; 63
    4dfe:	8d bf       	out	0x3d, r24	; 61
    4e00:	ed b7       	in	r30, 0x3d	; 61
    4e02:	fe b7       	in	r31, 0x3e	; 62
    4e04:	31 96       	adiw	r30, 0x01	; 1
    4e06:	8e eb       	ldi	r24, 0xBE	; 190
    4e08:	91 e0       	ldi	r25, 0x01	; 1
    4e0a:	91 83       	std	Z+1, r25	; 0x01
    4e0c:	80 83       	st	Z, r24
    4e0e:	8c e7       	ldi	r24, 0x7C	; 124
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	93 83       	std	Z+3, r25	; 0x03
    4e14:	82 83       	std	Z+2, r24	; 0x02
    4e16:	35 83       	std	Z+5, r19	; 0x05
    4e18:	24 83       	std	Z+4, r18	; 0x04
    4e1a:	57 83       	std	Z+7, r21	; 0x07
    4e1c:	46 83       	std	Z+6, r20	; 0x06
    4e1e:	0e 94 f7 27 	call	0x4fee	; 0x4fee <sprintf>
    4e22:	ed b7       	in	r30, 0x3d	; 61
    4e24:	fe b7       	in	r31, 0x3e	; 62
    4e26:	38 96       	adiw	r30, 0x08	; 8
    4e28:	0f b6       	in	r0, 0x3f	; 63
    4e2a:	f8 94       	cli
    4e2c:	fe bf       	out	0x3e, r31	; 62
    4e2e:	0f be       	out	0x3f, r0	; 63
    4e30:	ed bf       	out	0x3d, r30	; 61
			F91_void_LCD_print(toscreen);
    4e32:	8e eb       	ldi	r24, 0xBE	; 190
    4e34:	91 e0       	ldi	r25, 0x01	; 1
    4e36:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <F91_void_LCD_print>
    4e3a:	80 e0       	ldi	r24, 0x00	; 0
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	aa e7       	ldi	r26, 0x7A	; 122
    4e40:	b4 e4       	ldi	r27, 0x44	; 68
    4e42:	8b 87       	std	Y+11, r24	; 0x0b
    4e44:	9c 87       	std	Y+12, r25	; 0x0c
    4e46:	ad 87       	std	Y+13, r26	; 0x0d
    4e48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	4a ef       	ldi	r20, 0xFA	; 250
    4e58:	54 e4       	ldi	r21, 0x44	; 68
    4e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e5e:	dc 01       	movw	r26, r24
    4e60:	cb 01       	movw	r24, r22
    4e62:	8f 83       	std	Y+7, r24	; 0x07
    4e64:	98 87       	std	Y+8, r25	; 0x08
    4e66:	a9 87       	std	Y+9, r26	; 0x09
    4e68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e6c:	78 85       	ldd	r23, Y+8	; 0x08
    4e6e:	89 85       	ldd	r24, Y+9	; 0x09
    4e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e72:	20 e0       	ldi	r18, 0x00	; 0
    4e74:	30 e0       	ldi	r19, 0x00	; 0
    4e76:	40 e8       	ldi	r20, 0x80	; 128
    4e78:	5f e3       	ldi	r21, 0x3F	; 63
    4e7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e7e:	88 23       	and	r24, r24
    4e80:	2c f4       	brge	.+10     	; 0x4e8c <main+0x374>
		__ticks = 1;
    4e82:	81 e0       	ldi	r24, 0x01	; 1
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	9e 83       	std	Y+6, r25	; 0x06
    4e88:	8d 83       	std	Y+5, r24	; 0x05
    4e8a:	3f c0       	rjmp	.+126    	; 0x4f0a <main+0x3f2>
	else if (__tmp > 65535)
    4e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    4e8e:	78 85       	ldd	r23, Y+8	; 0x08
    4e90:	89 85       	ldd	r24, Y+9	; 0x09
    4e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e94:	20 e0       	ldi	r18, 0x00	; 0
    4e96:	3f ef       	ldi	r19, 0xFF	; 255
    4e98:	4f e7       	ldi	r20, 0x7F	; 127
    4e9a:	57 e4       	ldi	r21, 0x47	; 71
    4e9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ea0:	18 16       	cp	r1, r24
    4ea2:	4c f5       	brge	.+82     	; 0x4ef6 <main+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    4eac:	20 e0       	ldi	r18, 0x00	; 0
    4eae:	30 e0       	ldi	r19, 0x00	; 0
    4eb0:	40 e2       	ldi	r20, 0x20	; 32
    4eb2:	51 e4       	ldi	r21, 0x41	; 65
    4eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eb8:	dc 01       	movw	r26, r24
    4eba:	cb 01       	movw	r24, r22
    4ebc:	bc 01       	movw	r22, r24
    4ebe:	cd 01       	movw	r24, r26
    4ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ec4:	dc 01       	movw	r26, r24
    4ec6:	cb 01       	movw	r24, r22
    4ec8:	9e 83       	std	Y+6, r25	; 0x06
    4eca:	8d 83       	std	Y+5, r24	; 0x05
    4ecc:	0f c0       	rjmp	.+30     	; 0x4eec <main+0x3d4>
    4ece:	88 ec       	ldi	r24, 0xC8	; 200
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	9c 83       	std	Y+4, r25	; 0x04
    4ed4:	8b 83       	std	Y+3, r24	; 0x03
    4ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    4eda:	01 97       	sbiw	r24, 0x01	; 1
    4edc:	f1 f7       	brne	.-4      	; 0x4eda <main+0x3c2>
    4ede:	9c 83       	std	Y+4, r25	; 0x04
    4ee0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ee6:	01 97       	sbiw	r24, 0x01	; 1
    4ee8:	9e 83       	std	Y+6, r25	; 0x06
    4eea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eec:	8d 81       	ldd	r24, Y+5	; 0x05
    4eee:	9e 81       	ldd	r25, Y+6	; 0x06
    4ef0:	00 97       	sbiw	r24, 0x00	; 0
    4ef2:	69 f7       	brne	.-38     	; 0x4ece <main+0x3b6>
    4ef4:	14 c0       	rjmp	.+40     	; 0x4f1e <main+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    4ef8:	78 85       	ldd	r23, Y+8	; 0x08
    4efa:	89 85       	ldd	r24, Y+9	; 0x09
    4efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f02:	dc 01       	movw	r26, r24
    4f04:	cb 01       	movw	r24, r22
    4f06:	9e 83       	std	Y+6, r25	; 0x06
    4f08:	8d 83       	std	Y+5, r24	; 0x05
    4f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f0e:	9a 83       	std	Y+2, r25	; 0x02
    4f10:	89 83       	std	Y+1, r24	; 0x01
    4f12:	89 81       	ldd	r24, Y+1	; 0x01
    4f14:	9a 81       	ldd	r25, Y+2	; 0x02
    4f16:	01 97       	sbiw	r24, 0x01	; 1
    4f18:	f1 f7       	brne	.-4      	; 0x4f16 <main+0x3fe>
    4f1a:	9a 83       	std	Y+2, r25	; 0x02
    4f1c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
			F91_void_LCD_Clear_Screen();
    4f1e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <F91_void_LCD_Clear_Screen>
    4f22:	c9 ce       	rjmp	.-622    	; 0x4cb6 <main+0x19e>

00004f24 <__udivmodqi4>:
    4f24:	99 1b       	sub	r25, r25
    4f26:	79 e0       	ldi	r23, 0x09	; 9
    4f28:	04 c0       	rjmp	.+8      	; 0x4f32 <__udivmodqi4_ep>

00004f2a <__udivmodqi4_loop>:
    4f2a:	99 1f       	adc	r25, r25
    4f2c:	96 17       	cp	r25, r22
    4f2e:	08 f0       	brcs	.+2      	; 0x4f32 <__udivmodqi4_ep>
    4f30:	96 1b       	sub	r25, r22

00004f32 <__udivmodqi4_ep>:
    4f32:	88 1f       	adc	r24, r24
    4f34:	7a 95       	dec	r23
    4f36:	c9 f7       	brne	.-14     	; 0x4f2a <__udivmodqi4_loop>
    4f38:	80 95       	com	r24
    4f3a:	08 95       	ret

00004f3c <__udivmodsi4>:
    4f3c:	a1 e2       	ldi	r26, 0x21	; 33
    4f3e:	1a 2e       	mov	r1, r26
    4f40:	aa 1b       	sub	r26, r26
    4f42:	bb 1b       	sub	r27, r27
    4f44:	fd 01       	movw	r30, r26
    4f46:	0d c0       	rjmp	.+26     	; 0x4f62 <__udivmodsi4_ep>

00004f48 <__udivmodsi4_loop>:
    4f48:	aa 1f       	adc	r26, r26
    4f4a:	bb 1f       	adc	r27, r27
    4f4c:	ee 1f       	adc	r30, r30
    4f4e:	ff 1f       	adc	r31, r31
    4f50:	a2 17       	cp	r26, r18
    4f52:	b3 07       	cpc	r27, r19
    4f54:	e4 07       	cpc	r30, r20
    4f56:	f5 07       	cpc	r31, r21
    4f58:	20 f0       	brcs	.+8      	; 0x4f62 <__udivmodsi4_ep>
    4f5a:	a2 1b       	sub	r26, r18
    4f5c:	b3 0b       	sbc	r27, r19
    4f5e:	e4 0b       	sbc	r30, r20
    4f60:	f5 0b       	sbc	r31, r21

00004f62 <__udivmodsi4_ep>:
    4f62:	66 1f       	adc	r22, r22
    4f64:	77 1f       	adc	r23, r23
    4f66:	88 1f       	adc	r24, r24
    4f68:	99 1f       	adc	r25, r25
    4f6a:	1a 94       	dec	r1
    4f6c:	69 f7       	brne	.-38     	; 0x4f48 <__udivmodsi4_loop>
    4f6e:	60 95       	com	r22
    4f70:	70 95       	com	r23
    4f72:	80 95       	com	r24
    4f74:	90 95       	com	r25
    4f76:	9b 01       	movw	r18, r22
    4f78:	ac 01       	movw	r20, r24
    4f7a:	bd 01       	movw	r22, r26
    4f7c:	cf 01       	movw	r24, r30
    4f7e:	08 95       	ret

00004f80 <__prologue_saves__>:
    4f80:	2f 92       	push	r2
    4f82:	3f 92       	push	r3
    4f84:	4f 92       	push	r4
    4f86:	5f 92       	push	r5
    4f88:	6f 92       	push	r6
    4f8a:	7f 92       	push	r7
    4f8c:	8f 92       	push	r8
    4f8e:	9f 92       	push	r9
    4f90:	af 92       	push	r10
    4f92:	bf 92       	push	r11
    4f94:	cf 92       	push	r12
    4f96:	df 92       	push	r13
    4f98:	ef 92       	push	r14
    4f9a:	ff 92       	push	r15
    4f9c:	0f 93       	push	r16
    4f9e:	1f 93       	push	r17
    4fa0:	cf 93       	push	r28
    4fa2:	df 93       	push	r29
    4fa4:	cd b7       	in	r28, 0x3d	; 61
    4fa6:	de b7       	in	r29, 0x3e	; 62
    4fa8:	ca 1b       	sub	r28, r26
    4faa:	db 0b       	sbc	r29, r27
    4fac:	0f b6       	in	r0, 0x3f	; 63
    4fae:	f8 94       	cli
    4fb0:	de bf       	out	0x3e, r29	; 62
    4fb2:	0f be       	out	0x3f, r0	; 63
    4fb4:	cd bf       	out	0x3d, r28	; 61
    4fb6:	09 94       	ijmp

00004fb8 <__epilogue_restores__>:
    4fb8:	2a 88       	ldd	r2, Y+18	; 0x12
    4fba:	39 88       	ldd	r3, Y+17	; 0x11
    4fbc:	48 88       	ldd	r4, Y+16	; 0x10
    4fbe:	5f 84       	ldd	r5, Y+15	; 0x0f
    4fc0:	6e 84       	ldd	r6, Y+14	; 0x0e
    4fc2:	7d 84       	ldd	r7, Y+13	; 0x0d
    4fc4:	8c 84       	ldd	r8, Y+12	; 0x0c
    4fc6:	9b 84       	ldd	r9, Y+11	; 0x0b
    4fc8:	aa 84       	ldd	r10, Y+10	; 0x0a
    4fca:	b9 84       	ldd	r11, Y+9	; 0x09
    4fcc:	c8 84       	ldd	r12, Y+8	; 0x08
    4fce:	df 80       	ldd	r13, Y+7	; 0x07
    4fd0:	ee 80       	ldd	r14, Y+6	; 0x06
    4fd2:	fd 80       	ldd	r15, Y+5	; 0x05
    4fd4:	0c 81       	ldd	r16, Y+4	; 0x04
    4fd6:	1b 81       	ldd	r17, Y+3	; 0x03
    4fd8:	aa 81       	ldd	r26, Y+2	; 0x02
    4fda:	b9 81       	ldd	r27, Y+1	; 0x01
    4fdc:	ce 0f       	add	r28, r30
    4fde:	d1 1d       	adc	r29, r1
    4fe0:	0f b6       	in	r0, 0x3f	; 63
    4fe2:	f8 94       	cli
    4fe4:	de bf       	out	0x3e, r29	; 62
    4fe6:	0f be       	out	0x3f, r0	; 63
    4fe8:	cd bf       	out	0x3d, r28	; 61
    4fea:	ed 01       	movw	r28, r26
    4fec:	08 95       	ret

00004fee <sprintf>:
    4fee:	ae e0       	ldi	r26, 0x0E	; 14
    4ff0:	b0 e0       	ldi	r27, 0x00	; 0
    4ff2:	ed ef       	ldi	r30, 0xFD	; 253
    4ff4:	f7 e2       	ldi	r31, 0x27	; 39
    4ff6:	0c 94 ce 27 	jmp	0x4f9c	; 0x4f9c <__prologue_saves__+0x1c>
    4ffa:	0d 89       	ldd	r16, Y+21	; 0x15
    4ffc:	1e 89       	ldd	r17, Y+22	; 0x16
    4ffe:	86 e0       	ldi	r24, 0x06	; 6
    5000:	8c 83       	std	Y+4, r24	; 0x04
    5002:	1a 83       	std	Y+2, r17	; 0x02
    5004:	09 83       	std	Y+1, r16	; 0x01
    5006:	8f ef       	ldi	r24, 0xFF	; 255
    5008:	9f e7       	ldi	r25, 0x7F	; 127
    500a:	9e 83       	std	Y+6, r25	; 0x06
    500c:	8d 83       	std	Y+5, r24	; 0x05
    500e:	9e 01       	movw	r18, r28
    5010:	27 5e       	subi	r18, 0xE7	; 231
    5012:	3f 4f       	sbci	r19, 0xFF	; 255
    5014:	ce 01       	movw	r24, r28
    5016:	01 96       	adiw	r24, 0x01	; 1
    5018:	6f 89       	ldd	r22, Y+23	; 0x17
    501a:	78 8d       	ldd	r23, Y+24	; 0x18
    501c:	a9 01       	movw	r20, r18
    501e:	0e 94 1b 28 	call	0x5036	; 0x5036 <vfprintf>
    5022:	2f 81       	ldd	r18, Y+7	; 0x07
    5024:	38 85       	ldd	r19, Y+8	; 0x08
    5026:	02 0f       	add	r16, r18
    5028:	13 1f       	adc	r17, r19
    502a:	f8 01       	movw	r30, r16
    502c:	10 82       	st	Z, r1
    502e:	2e 96       	adiw	r28, 0x0e	; 14
    5030:	e4 e0       	ldi	r30, 0x04	; 4
    5032:	0c 94 ea 27 	jmp	0x4fd4	; 0x4fd4 <__epilogue_restores__+0x1c>

00005036 <vfprintf>:
    5036:	ab e0       	ldi	r26, 0x0B	; 11
    5038:	b0 e0       	ldi	r27, 0x00	; 0
    503a:	e1 e2       	ldi	r30, 0x21	; 33
    503c:	f8 e2       	ldi	r31, 0x28	; 40
    503e:	0c 94 c0 27 	jmp	0x4f80	; 0x4f80 <__prologue_saves__>
    5042:	3c 01       	movw	r6, r24
    5044:	2b 01       	movw	r4, r22
    5046:	5a 01       	movw	r10, r20
    5048:	fc 01       	movw	r30, r24
    504a:	17 82       	std	Z+7, r1	; 0x07
    504c:	16 82       	std	Z+6, r1	; 0x06
    504e:	83 81       	ldd	r24, Z+3	; 0x03
    5050:	81 fd       	sbrc	r24, 1
    5052:	03 c0       	rjmp	.+6      	; 0x505a <vfprintf+0x24>
    5054:	6f ef       	ldi	r22, 0xFF	; 255
    5056:	7f ef       	ldi	r23, 0xFF	; 255
    5058:	c6 c1       	rjmp	.+908    	; 0x53e6 <vfprintf+0x3b0>
    505a:	9a e0       	ldi	r25, 0x0A	; 10
    505c:	89 2e       	mov	r8, r25
    505e:	1e 01       	movw	r2, r28
    5060:	08 94       	sec
    5062:	21 1c       	adc	r2, r1
    5064:	31 1c       	adc	r3, r1
    5066:	f3 01       	movw	r30, r6
    5068:	23 81       	ldd	r18, Z+3	; 0x03
    506a:	f2 01       	movw	r30, r4
    506c:	23 fd       	sbrc	r18, 3
    506e:	85 91       	lpm	r24, Z+
    5070:	23 ff       	sbrs	r18, 3
    5072:	81 91       	ld	r24, Z+
    5074:	2f 01       	movw	r4, r30
    5076:	88 23       	and	r24, r24
    5078:	09 f4       	brne	.+2      	; 0x507c <vfprintf+0x46>
    507a:	b2 c1       	rjmp	.+868    	; 0x53e0 <vfprintf+0x3aa>
    507c:	85 32       	cpi	r24, 0x25	; 37
    507e:	39 f4       	brne	.+14     	; 0x508e <vfprintf+0x58>
    5080:	23 fd       	sbrc	r18, 3
    5082:	85 91       	lpm	r24, Z+
    5084:	23 ff       	sbrs	r18, 3
    5086:	81 91       	ld	r24, Z+
    5088:	2f 01       	movw	r4, r30
    508a:	85 32       	cpi	r24, 0x25	; 37
    508c:	29 f4       	brne	.+10     	; 0x5098 <vfprintf+0x62>
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	b3 01       	movw	r22, r6
    5092:	0e 94 0e 2a 	call	0x541c	; 0x541c <fputc>
    5096:	e7 cf       	rjmp	.-50     	; 0x5066 <vfprintf+0x30>
    5098:	98 2f       	mov	r25, r24
    509a:	ff 24       	eor	r15, r15
    509c:	ee 24       	eor	r14, r14
    509e:	99 24       	eor	r9, r9
    50a0:	ff e1       	ldi	r31, 0x1F	; 31
    50a2:	ff 15       	cp	r31, r15
    50a4:	d0 f0       	brcs	.+52     	; 0x50da <vfprintf+0xa4>
    50a6:	9b 32       	cpi	r25, 0x2B	; 43
    50a8:	69 f0       	breq	.+26     	; 0x50c4 <vfprintf+0x8e>
    50aa:	9c 32       	cpi	r25, 0x2C	; 44
    50ac:	28 f4       	brcc	.+10     	; 0x50b8 <vfprintf+0x82>
    50ae:	90 32       	cpi	r25, 0x20	; 32
    50b0:	59 f0       	breq	.+22     	; 0x50c8 <vfprintf+0x92>
    50b2:	93 32       	cpi	r25, 0x23	; 35
    50b4:	91 f4       	brne	.+36     	; 0x50da <vfprintf+0xa4>
    50b6:	0e c0       	rjmp	.+28     	; 0x50d4 <vfprintf+0x9e>
    50b8:	9d 32       	cpi	r25, 0x2D	; 45
    50ba:	49 f0       	breq	.+18     	; 0x50ce <vfprintf+0x98>
    50bc:	90 33       	cpi	r25, 0x30	; 48
    50be:	69 f4       	brne	.+26     	; 0x50da <vfprintf+0xa4>
    50c0:	41 e0       	ldi	r20, 0x01	; 1
    50c2:	24 c0       	rjmp	.+72     	; 0x510c <vfprintf+0xd6>
    50c4:	52 e0       	ldi	r21, 0x02	; 2
    50c6:	f5 2a       	or	r15, r21
    50c8:	84 e0       	ldi	r24, 0x04	; 4
    50ca:	f8 2a       	or	r15, r24
    50cc:	28 c0       	rjmp	.+80     	; 0x511e <vfprintf+0xe8>
    50ce:	98 e0       	ldi	r25, 0x08	; 8
    50d0:	f9 2a       	or	r15, r25
    50d2:	25 c0       	rjmp	.+74     	; 0x511e <vfprintf+0xe8>
    50d4:	e0 e1       	ldi	r30, 0x10	; 16
    50d6:	fe 2a       	or	r15, r30
    50d8:	22 c0       	rjmp	.+68     	; 0x511e <vfprintf+0xe8>
    50da:	f7 fc       	sbrc	r15, 7
    50dc:	29 c0       	rjmp	.+82     	; 0x5130 <vfprintf+0xfa>
    50de:	89 2f       	mov	r24, r25
    50e0:	80 53       	subi	r24, 0x30	; 48
    50e2:	8a 30       	cpi	r24, 0x0A	; 10
    50e4:	70 f4       	brcc	.+28     	; 0x5102 <vfprintf+0xcc>
    50e6:	f6 fe       	sbrs	r15, 6
    50e8:	05 c0       	rjmp	.+10     	; 0x50f4 <vfprintf+0xbe>
    50ea:	98 9c       	mul	r9, r8
    50ec:	90 2c       	mov	r9, r0
    50ee:	11 24       	eor	r1, r1
    50f0:	98 0e       	add	r9, r24
    50f2:	15 c0       	rjmp	.+42     	; 0x511e <vfprintf+0xe8>
    50f4:	e8 9c       	mul	r14, r8
    50f6:	e0 2c       	mov	r14, r0
    50f8:	11 24       	eor	r1, r1
    50fa:	e8 0e       	add	r14, r24
    50fc:	f0 e2       	ldi	r31, 0x20	; 32
    50fe:	ff 2a       	or	r15, r31
    5100:	0e c0       	rjmp	.+28     	; 0x511e <vfprintf+0xe8>
    5102:	9e 32       	cpi	r25, 0x2E	; 46
    5104:	29 f4       	brne	.+10     	; 0x5110 <vfprintf+0xda>
    5106:	f6 fc       	sbrc	r15, 6
    5108:	6b c1       	rjmp	.+726    	; 0x53e0 <vfprintf+0x3aa>
    510a:	40 e4       	ldi	r20, 0x40	; 64
    510c:	f4 2a       	or	r15, r20
    510e:	07 c0       	rjmp	.+14     	; 0x511e <vfprintf+0xe8>
    5110:	9c 36       	cpi	r25, 0x6C	; 108
    5112:	19 f4       	brne	.+6      	; 0x511a <vfprintf+0xe4>
    5114:	50 e8       	ldi	r21, 0x80	; 128
    5116:	f5 2a       	or	r15, r21
    5118:	02 c0       	rjmp	.+4      	; 0x511e <vfprintf+0xe8>
    511a:	98 36       	cpi	r25, 0x68	; 104
    511c:	49 f4       	brne	.+18     	; 0x5130 <vfprintf+0xfa>
    511e:	f2 01       	movw	r30, r4
    5120:	23 fd       	sbrc	r18, 3
    5122:	95 91       	lpm	r25, Z+
    5124:	23 ff       	sbrs	r18, 3
    5126:	91 91       	ld	r25, Z+
    5128:	2f 01       	movw	r4, r30
    512a:	99 23       	and	r25, r25
    512c:	09 f0       	breq	.+2      	; 0x5130 <vfprintf+0xfa>
    512e:	b8 cf       	rjmp	.-144    	; 0x50a0 <vfprintf+0x6a>
    5130:	89 2f       	mov	r24, r25
    5132:	85 54       	subi	r24, 0x45	; 69
    5134:	83 30       	cpi	r24, 0x03	; 3
    5136:	18 f0       	brcs	.+6      	; 0x513e <vfprintf+0x108>
    5138:	80 52       	subi	r24, 0x20	; 32
    513a:	83 30       	cpi	r24, 0x03	; 3
    513c:	38 f4       	brcc	.+14     	; 0x514c <vfprintf+0x116>
    513e:	44 e0       	ldi	r20, 0x04	; 4
    5140:	50 e0       	ldi	r21, 0x00	; 0
    5142:	a4 0e       	add	r10, r20
    5144:	b5 1e       	adc	r11, r21
    5146:	5f e3       	ldi	r21, 0x3F	; 63
    5148:	59 83       	std	Y+1, r21	; 0x01
    514a:	0f c0       	rjmp	.+30     	; 0x516a <vfprintf+0x134>
    514c:	93 36       	cpi	r25, 0x63	; 99
    514e:	31 f0       	breq	.+12     	; 0x515c <vfprintf+0x126>
    5150:	93 37       	cpi	r25, 0x73	; 115
    5152:	79 f0       	breq	.+30     	; 0x5172 <vfprintf+0x13c>
    5154:	93 35       	cpi	r25, 0x53	; 83
    5156:	09 f0       	breq	.+2      	; 0x515a <vfprintf+0x124>
    5158:	56 c0       	rjmp	.+172    	; 0x5206 <vfprintf+0x1d0>
    515a:	20 c0       	rjmp	.+64     	; 0x519c <vfprintf+0x166>
    515c:	f5 01       	movw	r30, r10
    515e:	80 81       	ld	r24, Z
    5160:	89 83       	std	Y+1, r24	; 0x01
    5162:	42 e0       	ldi	r20, 0x02	; 2
    5164:	50 e0       	ldi	r21, 0x00	; 0
    5166:	a4 0e       	add	r10, r20
    5168:	b5 1e       	adc	r11, r21
    516a:	61 01       	movw	r12, r2
    516c:	01 e0       	ldi	r16, 0x01	; 1
    516e:	10 e0       	ldi	r17, 0x00	; 0
    5170:	12 c0       	rjmp	.+36     	; 0x5196 <vfprintf+0x160>
    5172:	f5 01       	movw	r30, r10
    5174:	c0 80       	ld	r12, Z
    5176:	d1 80       	ldd	r13, Z+1	; 0x01
    5178:	f6 fc       	sbrc	r15, 6
    517a:	03 c0       	rjmp	.+6      	; 0x5182 <vfprintf+0x14c>
    517c:	6f ef       	ldi	r22, 0xFF	; 255
    517e:	7f ef       	ldi	r23, 0xFF	; 255
    5180:	02 c0       	rjmp	.+4      	; 0x5186 <vfprintf+0x150>
    5182:	69 2d       	mov	r22, r9
    5184:	70 e0       	ldi	r23, 0x00	; 0
    5186:	42 e0       	ldi	r20, 0x02	; 2
    5188:	50 e0       	ldi	r21, 0x00	; 0
    518a:	a4 0e       	add	r10, r20
    518c:	b5 1e       	adc	r11, r21
    518e:	c6 01       	movw	r24, r12
    5190:	0e 94 03 2a 	call	0x5406	; 0x5406 <strnlen>
    5194:	8c 01       	movw	r16, r24
    5196:	5f e7       	ldi	r21, 0x7F	; 127
    5198:	f5 22       	and	r15, r21
    519a:	14 c0       	rjmp	.+40     	; 0x51c4 <vfprintf+0x18e>
    519c:	f5 01       	movw	r30, r10
    519e:	c0 80       	ld	r12, Z
    51a0:	d1 80       	ldd	r13, Z+1	; 0x01
    51a2:	f6 fc       	sbrc	r15, 6
    51a4:	03 c0       	rjmp	.+6      	; 0x51ac <vfprintf+0x176>
    51a6:	6f ef       	ldi	r22, 0xFF	; 255
    51a8:	7f ef       	ldi	r23, 0xFF	; 255
    51aa:	02 c0       	rjmp	.+4      	; 0x51b0 <vfprintf+0x17a>
    51ac:	69 2d       	mov	r22, r9
    51ae:	70 e0       	ldi	r23, 0x00	; 0
    51b0:	42 e0       	ldi	r20, 0x02	; 2
    51b2:	50 e0       	ldi	r21, 0x00	; 0
    51b4:	a4 0e       	add	r10, r20
    51b6:	b5 1e       	adc	r11, r21
    51b8:	c6 01       	movw	r24, r12
    51ba:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <strnlen_P>
    51be:	8c 01       	movw	r16, r24
    51c0:	50 e8       	ldi	r21, 0x80	; 128
    51c2:	f5 2a       	or	r15, r21
    51c4:	f3 fe       	sbrs	r15, 3
    51c6:	07 c0       	rjmp	.+14     	; 0x51d6 <vfprintf+0x1a0>
    51c8:	1a c0       	rjmp	.+52     	; 0x51fe <vfprintf+0x1c8>
    51ca:	80 e2       	ldi	r24, 0x20	; 32
    51cc:	90 e0       	ldi	r25, 0x00	; 0
    51ce:	b3 01       	movw	r22, r6
    51d0:	0e 94 0e 2a 	call	0x541c	; 0x541c <fputc>
    51d4:	ea 94       	dec	r14
    51d6:	8e 2d       	mov	r24, r14
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	08 17       	cp	r16, r24
    51dc:	19 07       	cpc	r17, r25
    51de:	a8 f3       	brcs	.-22     	; 0x51ca <vfprintf+0x194>
    51e0:	0e c0       	rjmp	.+28     	; 0x51fe <vfprintf+0x1c8>
    51e2:	f6 01       	movw	r30, r12
    51e4:	f7 fc       	sbrc	r15, 7
    51e6:	85 91       	lpm	r24, Z+
    51e8:	f7 fe       	sbrs	r15, 7
    51ea:	81 91       	ld	r24, Z+
    51ec:	6f 01       	movw	r12, r30
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	b3 01       	movw	r22, r6
    51f2:	0e 94 0e 2a 	call	0x541c	; 0x541c <fputc>
    51f6:	e1 10       	cpse	r14, r1
    51f8:	ea 94       	dec	r14
    51fa:	01 50       	subi	r16, 0x01	; 1
    51fc:	10 40       	sbci	r17, 0x00	; 0
    51fe:	01 15       	cp	r16, r1
    5200:	11 05       	cpc	r17, r1
    5202:	79 f7       	brne	.-34     	; 0x51e2 <vfprintf+0x1ac>
    5204:	ea c0       	rjmp	.+468    	; 0x53da <vfprintf+0x3a4>
    5206:	94 36       	cpi	r25, 0x64	; 100
    5208:	11 f0       	breq	.+4      	; 0x520e <vfprintf+0x1d8>
    520a:	99 36       	cpi	r25, 0x69	; 105
    520c:	69 f5       	brne	.+90     	; 0x5268 <vfprintf+0x232>
    520e:	f7 fe       	sbrs	r15, 7
    5210:	08 c0       	rjmp	.+16     	; 0x5222 <vfprintf+0x1ec>
    5212:	f5 01       	movw	r30, r10
    5214:	20 81       	ld	r18, Z
    5216:	31 81       	ldd	r19, Z+1	; 0x01
    5218:	42 81       	ldd	r20, Z+2	; 0x02
    521a:	53 81       	ldd	r21, Z+3	; 0x03
    521c:	84 e0       	ldi	r24, 0x04	; 4
    521e:	90 e0       	ldi	r25, 0x00	; 0
    5220:	0a c0       	rjmp	.+20     	; 0x5236 <vfprintf+0x200>
    5222:	f5 01       	movw	r30, r10
    5224:	80 81       	ld	r24, Z
    5226:	91 81       	ldd	r25, Z+1	; 0x01
    5228:	9c 01       	movw	r18, r24
    522a:	44 27       	eor	r20, r20
    522c:	37 fd       	sbrc	r19, 7
    522e:	40 95       	com	r20
    5230:	54 2f       	mov	r21, r20
    5232:	82 e0       	ldi	r24, 0x02	; 2
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	a8 0e       	add	r10, r24
    5238:	b9 1e       	adc	r11, r25
    523a:	9f e6       	ldi	r25, 0x6F	; 111
    523c:	f9 22       	and	r15, r25
    523e:	57 ff       	sbrs	r21, 7
    5240:	09 c0       	rjmp	.+18     	; 0x5254 <vfprintf+0x21e>
    5242:	50 95       	com	r21
    5244:	40 95       	com	r20
    5246:	30 95       	com	r19
    5248:	21 95       	neg	r18
    524a:	3f 4f       	sbci	r19, 0xFF	; 255
    524c:	4f 4f       	sbci	r20, 0xFF	; 255
    524e:	5f 4f       	sbci	r21, 0xFF	; 255
    5250:	e0 e8       	ldi	r30, 0x80	; 128
    5252:	fe 2a       	or	r15, r30
    5254:	ca 01       	movw	r24, r20
    5256:	b9 01       	movw	r22, r18
    5258:	a1 01       	movw	r20, r2
    525a:	2a e0       	ldi	r18, 0x0A	; 10
    525c:	30 e0       	ldi	r19, 0x00	; 0
    525e:	0e 94 3a 2a 	call	0x5474	; 0x5474 <__ultoa_invert>
    5262:	d8 2e       	mov	r13, r24
    5264:	d2 18       	sub	r13, r2
    5266:	40 c0       	rjmp	.+128    	; 0x52e8 <vfprintf+0x2b2>
    5268:	95 37       	cpi	r25, 0x75	; 117
    526a:	29 f4       	brne	.+10     	; 0x5276 <vfprintf+0x240>
    526c:	1f 2d       	mov	r17, r15
    526e:	1f 7e       	andi	r17, 0xEF	; 239
    5270:	2a e0       	ldi	r18, 0x0A	; 10
    5272:	30 e0       	ldi	r19, 0x00	; 0
    5274:	1d c0       	rjmp	.+58     	; 0x52b0 <vfprintf+0x27a>
    5276:	1f 2d       	mov	r17, r15
    5278:	19 7f       	andi	r17, 0xF9	; 249
    527a:	9f 36       	cpi	r25, 0x6F	; 111
    527c:	61 f0       	breq	.+24     	; 0x5296 <vfprintf+0x260>
    527e:	90 37       	cpi	r25, 0x70	; 112
    5280:	20 f4       	brcc	.+8      	; 0x528a <vfprintf+0x254>
    5282:	98 35       	cpi	r25, 0x58	; 88
    5284:	09 f0       	breq	.+2      	; 0x5288 <vfprintf+0x252>
    5286:	ac c0       	rjmp	.+344    	; 0x53e0 <vfprintf+0x3aa>
    5288:	0f c0       	rjmp	.+30     	; 0x52a8 <vfprintf+0x272>
    528a:	90 37       	cpi	r25, 0x70	; 112
    528c:	39 f0       	breq	.+14     	; 0x529c <vfprintf+0x266>
    528e:	98 37       	cpi	r25, 0x78	; 120
    5290:	09 f0       	breq	.+2      	; 0x5294 <vfprintf+0x25e>
    5292:	a6 c0       	rjmp	.+332    	; 0x53e0 <vfprintf+0x3aa>
    5294:	04 c0       	rjmp	.+8      	; 0x529e <vfprintf+0x268>
    5296:	28 e0       	ldi	r18, 0x08	; 8
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	0a c0       	rjmp	.+20     	; 0x52b0 <vfprintf+0x27a>
    529c:	10 61       	ori	r17, 0x10	; 16
    529e:	14 fd       	sbrc	r17, 4
    52a0:	14 60       	ori	r17, 0x04	; 4
    52a2:	20 e1       	ldi	r18, 0x10	; 16
    52a4:	30 e0       	ldi	r19, 0x00	; 0
    52a6:	04 c0       	rjmp	.+8      	; 0x52b0 <vfprintf+0x27a>
    52a8:	14 fd       	sbrc	r17, 4
    52aa:	16 60       	ori	r17, 0x06	; 6
    52ac:	20 e1       	ldi	r18, 0x10	; 16
    52ae:	32 e0       	ldi	r19, 0x02	; 2
    52b0:	17 ff       	sbrs	r17, 7
    52b2:	08 c0       	rjmp	.+16     	; 0x52c4 <vfprintf+0x28e>
    52b4:	f5 01       	movw	r30, r10
    52b6:	60 81       	ld	r22, Z
    52b8:	71 81       	ldd	r23, Z+1	; 0x01
    52ba:	82 81       	ldd	r24, Z+2	; 0x02
    52bc:	93 81       	ldd	r25, Z+3	; 0x03
    52be:	44 e0       	ldi	r20, 0x04	; 4
    52c0:	50 e0       	ldi	r21, 0x00	; 0
    52c2:	08 c0       	rjmp	.+16     	; 0x52d4 <vfprintf+0x29e>
    52c4:	f5 01       	movw	r30, r10
    52c6:	80 81       	ld	r24, Z
    52c8:	91 81       	ldd	r25, Z+1	; 0x01
    52ca:	bc 01       	movw	r22, r24
    52cc:	80 e0       	ldi	r24, 0x00	; 0
    52ce:	90 e0       	ldi	r25, 0x00	; 0
    52d0:	42 e0       	ldi	r20, 0x02	; 2
    52d2:	50 e0       	ldi	r21, 0x00	; 0
    52d4:	a4 0e       	add	r10, r20
    52d6:	b5 1e       	adc	r11, r21
    52d8:	a1 01       	movw	r20, r2
    52da:	0e 94 3a 2a 	call	0x5474	; 0x5474 <__ultoa_invert>
    52de:	d8 2e       	mov	r13, r24
    52e0:	d2 18       	sub	r13, r2
    52e2:	8f e7       	ldi	r24, 0x7F	; 127
    52e4:	f8 2e       	mov	r15, r24
    52e6:	f1 22       	and	r15, r17
    52e8:	f6 fe       	sbrs	r15, 6
    52ea:	0b c0       	rjmp	.+22     	; 0x5302 <vfprintf+0x2cc>
    52ec:	5e ef       	ldi	r21, 0xFE	; 254
    52ee:	f5 22       	and	r15, r21
    52f0:	d9 14       	cp	r13, r9
    52f2:	38 f4       	brcc	.+14     	; 0x5302 <vfprintf+0x2cc>
    52f4:	f4 fe       	sbrs	r15, 4
    52f6:	07 c0       	rjmp	.+14     	; 0x5306 <vfprintf+0x2d0>
    52f8:	f2 fc       	sbrc	r15, 2
    52fa:	05 c0       	rjmp	.+10     	; 0x5306 <vfprintf+0x2d0>
    52fc:	8f ee       	ldi	r24, 0xEF	; 239
    52fe:	f8 22       	and	r15, r24
    5300:	02 c0       	rjmp	.+4      	; 0x5306 <vfprintf+0x2d0>
    5302:	1d 2d       	mov	r17, r13
    5304:	01 c0       	rjmp	.+2      	; 0x5308 <vfprintf+0x2d2>
    5306:	19 2d       	mov	r17, r9
    5308:	f4 fe       	sbrs	r15, 4
    530a:	0d c0       	rjmp	.+26     	; 0x5326 <vfprintf+0x2f0>
    530c:	fe 01       	movw	r30, r28
    530e:	ed 0d       	add	r30, r13
    5310:	f1 1d       	adc	r31, r1
    5312:	80 81       	ld	r24, Z
    5314:	80 33       	cpi	r24, 0x30	; 48
    5316:	19 f4       	brne	.+6      	; 0x531e <vfprintf+0x2e8>
    5318:	99 ee       	ldi	r25, 0xE9	; 233
    531a:	f9 22       	and	r15, r25
    531c:	08 c0       	rjmp	.+16     	; 0x532e <vfprintf+0x2f8>
    531e:	1f 5f       	subi	r17, 0xFF	; 255
    5320:	f2 fe       	sbrs	r15, 2
    5322:	05 c0       	rjmp	.+10     	; 0x532e <vfprintf+0x2f8>
    5324:	03 c0       	rjmp	.+6      	; 0x532c <vfprintf+0x2f6>
    5326:	8f 2d       	mov	r24, r15
    5328:	86 78       	andi	r24, 0x86	; 134
    532a:	09 f0       	breq	.+2      	; 0x532e <vfprintf+0x2f8>
    532c:	1f 5f       	subi	r17, 0xFF	; 255
    532e:	0f 2d       	mov	r16, r15
    5330:	f3 fc       	sbrc	r15, 3
    5332:	14 c0       	rjmp	.+40     	; 0x535c <vfprintf+0x326>
    5334:	f0 fe       	sbrs	r15, 0
    5336:	0f c0       	rjmp	.+30     	; 0x5356 <vfprintf+0x320>
    5338:	1e 15       	cp	r17, r14
    533a:	10 f0       	brcs	.+4      	; 0x5340 <vfprintf+0x30a>
    533c:	9d 2c       	mov	r9, r13
    533e:	0b c0       	rjmp	.+22     	; 0x5356 <vfprintf+0x320>
    5340:	9d 2c       	mov	r9, r13
    5342:	9e 0c       	add	r9, r14
    5344:	91 1a       	sub	r9, r17
    5346:	1e 2d       	mov	r17, r14
    5348:	06 c0       	rjmp	.+12     	; 0x5356 <vfprintf+0x320>
    534a:	80 e2       	ldi	r24, 0x20	; 32
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	b3 01       	movw	r22, r6
    5350:	0e 94 0e 2a 	call	0x541c	; 0x541c <fputc>
    5354:	1f 5f       	subi	r17, 0xFF	; 255
    5356:	1e 15       	cp	r17, r14
    5358:	c0 f3       	brcs	.-16     	; 0x534a <vfprintf+0x314>
    535a:	04 c0       	rjmp	.+8      	; 0x5364 <vfprintf+0x32e>
    535c:	1e 15       	cp	r17, r14
    535e:	10 f4       	brcc	.+4      	; 0x5364 <vfprintf+0x32e>
    5360:	e1 1a       	sub	r14, r17
    5362:	01 c0       	rjmp	.+2      	; 0x5366 <vfprintf+0x330>
    5364:	ee 24       	eor	r14, r14
    5366:	04 ff       	sbrs	r16, 4
    5368:	0f c0       	rjmp	.+30     	; 0x5388 <vfprintf+0x352>
    536a:	80 e3       	ldi	r24, 0x30	; 48
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	b3 01       	movw	r22, r6
    5370:	0e 94 0e 2a 	call	0x541c	; 0x541c <fputc>
    5374:	02 ff       	sbrs	r16, 2
    5376:	1d c0       	rjmp	.+58     	; 0x53b2 <vfprintf+0x37c>
    5378:	01 fd       	sbrc	r16, 1
    537a:	03 c0       	rjmp	.+6      	; 0x5382 <vfprintf+0x34c>
    537c:	88 e7       	ldi	r24, 0x78	; 120
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	0e c0       	rjmp	.+28     	; 0x539e <vfprintf+0x368>
    5382:	88 e5       	ldi	r24, 0x58	; 88
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	0b c0       	rjmp	.+22     	; 0x539e <vfprintf+0x368>
    5388:	80 2f       	mov	r24, r16
    538a:	86 78       	andi	r24, 0x86	; 134
    538c:	91 f0       	breq	.+36     	; 0x53b2 <vfprintf+0x37c>
    538e:	01 ff       	sbrs	r16, 1
    5390:	02 c0       	rjmp	.+4      	; 0x5396 <vfprintf+0x360>
    5392:	8b e2       	ldi	r24, 0x2B	; 43
    5394:	01 c0       	rjmp	.+2      	; 0x5398 <vfprintf+0x362>
    5396:	80 e2       	ldi	r24, 0x20	; 32
    5398:	f7 fc       	sbrc	r15, 7
    539a:	8d e2       	ldi	r24, 0x2D	; 45
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	b3 01       	movw	r22, r6
    53a0:	0e 94 0e 2a 	call	0x541c	; 0x541c <fputc>
    53a4:	06 c0       	rjmp	.+12     	; 0x53b2 <vfprintf+0x37c>
    53a6:	80 e3       	ldi	r24, 0x30	; 48
    53a8:	90 e0       	ldi	r25, 0x00	; 0
    53aa:	b3 01       	movw	r22, r6
    53ac:	0e 94 0e 2a 	call	0x541c	; 0x541c <fputc>
    53b0:	9a 94       	dec	r9
    53b2:	d9 14       	cp	r13, r9
    53b4:	c0 f3       	brcs	.-16     	; 0x53a6 <vfprintf+0x370>
    53b6:	da 94       	dec	r13
    53b8:	f1 01       	movw	r30, r2
    53ba:	ed 0d       	add	r30, r13
    53bc:	f1 1d       	adc	r31, r1
    53be:	80 81       	ld	r24, Z
    53c0:	90 e0       	ldi	r25, 0x00	; 0
    53c2:	b3 01       	movw	r22, r6
    53c4:	0e 94 0e 2a 	call	0x541c	; 0x541c <fputc>
    53c8:	dd 20       	and	r13, r13
    53ca:	a9 f7       	brne	.-22     	; 0x53b6 <vfprintf+0x380>
    53cc:	06 c0       	rjmp	.+12     	; 0x53da <vfprintf+0x3a4>
    53ce:	80 e2       	ldi	r24, 0x20	; 32
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	b3 01       	movw	r22, r6
    53d4:	0e 94 0e 2a 	call	0x541c	; 0x541c <fputc>
    53d8:	ea 94       	dec	r14
    53da:	ee 20       	and	r14, r14
    53dc:	c1 f7       	brne	.-16     	; 0x53ce <vfprintf+0x398>
    53de:	43 ce       	rjmp	.-890    	; 0x5066 <vfprintf+0x30>
    53e0:	f3 01       	movw	r30, r6
    53e2:	66 81       	ldd	r22, Z+6	; 0x06
    53e4:	77 81       	ldd	r23, Z+7	; 0x07
    53e6:	cb 01       	movw	r24, r22
    53e8:	2b 96       	adiw	r28, 0x0b	; 11
    53ea:	e2 e1       	ldi	r30, 0x12	; 18
    53ec:	0c 94 dc 27 	jmp	0x4fb8	; 0x4fb8 <__epilogue_restores__>

000053f0 <strnlen_P>:
    53f0:	fc 01       	movw	r30, r24
    53f2:	05 90       	lpm	r0, Z+
    53f4:	61 50       	subi	r22, 0x01	; 1
    53f6:	70 40       	sbci	r23, 0x00	; 0
    53f8:	01 10       	cpse	r0, r1
    53fa:	d8 f7       	brcc	.-10     	; 0x53f2 <strnlen_P+0x2>
    53fc:	80 95       	com	r24
    53fe:	90 95       	com	r25
    5400:	8e 0f       	add	r24, r30
    5402:	9f 1f       	adc	r25, r31
    5404:	08 95       	ret

00005406 <strnlen>:
    5406:	fc 01       	movw	r30, r24
    5408:	61 50       	subi	r22, 0x01	; 1
    540a:	70 40       	sbci	r23, 0x00	; 0
    540c:	01 90       	ld	r0, Z+
    540e:	01 10       	cpse	r0, r1
    5410:	d8 f7       	brcc	.-10     	; 0x5408 <strnlen+0x2>
    5412:	80 95       	com	r24
    5414:	90 95       	com	r25
    5416:	8e 0f       	add	r24, r30
    5418:	9f 1f       	adc	r25, r31
    541a:	08 95       	ret

0000541c <fputc>:
    541c:	0f 93       	push	r16
    541e:	1f 93       	push	r17
    5420:	cf 93       	push	r28
    5422:	df 93       	push	r29
    5424:	8c 01       	movw	r16, r24
    5426:	eb 01       	movw	r28, r22
    5428:	8b 81       	ldd	r24, Y+3	; 0x03
    542a:	81 ff       	sbrs	r24, 1
    542c:	1b c0       	rjmp	.+54     	; 0x5464 <fputc+0x48>
    542e:	82 ff       	sbrs	r24, 2
    5430:	0d c0       	rjmp	.+26     	; 0x544c <fputc+0x30>
    5432:	2e 81       	ldd	r18, Y+6	; 0x06
    5434:	3f 81       	ldd	r19, Y+7	; 0x07
    5436:	8c 81       	ldd	r24, Y+4	; 0x04
    5438:	9d 81       	ldd	r25, Y+5	; 0x05
    543a:	28 17       	cp	r18, r24
    543c:	39 07       	cpc	r19, r25
    543e:	64 f4       	brge	.+24     	; 0x5458 <fputc+0x3c>
    5440:	e8 81       	ld	r30, Y
    5442:	f9 81       	ldd	r31, Y+1	; 0x01
    5444:	01 93       	st	Z+, r16
    5446:	f9 83       	std	Y+1, r31	; 0x01
    5448:	e8 83       	st	Y, r30
    544a:	06 c0       	rjmp	.+12     	; 0x5458 <fputc+0x3c>
    544c:	e8 85       	ldd	r30, Y+8	; 0x08
    544e:	f9 85       	ldd	r31, Y+9	; 0x09
    5450:	80 2f       	mov	r24, r16
    5452:	09 95       	icall
    5454:	89 2b       	or	r24, r25
    5456:	31 f4       	brne	.+12     	; 0x5464 <fputc+0x48>
    5458:	8e 81       	ldd	r24, Y+6	; 0x06
    545a:	9f 81       	ldd	r25, Y+7	; 0x07
    545c:	01 96       	adiw	r24, 0x01	; 1
    545e:	9f 83       	std	Y+7, r25	; 0x07
    5460:	8e 83       	std	Y+6, r24	; 0x06
    5462:	02 c0       	rjmp	.+4      	; 0x5468 <fputc+0x4c>
    5464:	0f ef       	ldi	r16, 0xFF	; 255
    5466:	1f ef       	ldi	r17, 0xFF	; 255
    5468:	c8 01       	movw	r24, r16
    546a:	df 91       	pop	r29
    546c:	cf 91       	pop	r28
    546e:	1f 91       	pop	r17
    5470:	0f 91       	pop	r16
    5472:	08 95       	ret

00005474 <__ultoa_invert>:
    5474:	fa 01       	movw	r30, r20
    5476:	aa 27       	eor	r26, r26
    5478:	28 30       	cpi	r18, 0x08	; 8
    547a:	51 f1       	breq	.+84     	; 0x54d0 <__ultoa_invert+0x5c>
    547c:	20 31       	cpi	r18, 0x10	; 16
    547e:	81 f1       	breq	.+96     	; 0x54e0 <__ultoa_invert+0x6c>
    5480:	e8 94       	clt
    5482:	6f 93       	push	r22
    5484:	6e 7f       	andi	r22, 0xFE	; 254
    5486:	6e 5f       	subi	r22, 0xFE	; 254
    5488:	7f 4f       	sbci	r23, 0xFF	; 255
    548a:	8f 4f       	sbci	r24, 0xFF	; 255
    548c:	9f 4f       	sbci	r25, 0xFF	; 255
    548e:	af 4f       	sbci	r26, 0xFF	; 255
    5490:	b1 e0       	ldi	r27, 0x01	; 1
    5492:	3e d0       	rcall	.+124    	; 0x5510 <__ultoa_invert+0x9c>
    5494:	b4 e0       	ldi	r27, 0x04	; 4
    5496:	3c d0       	rcall	.+120    	; 0x5510 <__ultoa_invert+0x9c>
    5498:	67 0f       	add	r22, r23
    549a:	78 1f       	adc	r23, r24
    549c:	89 1f       	adc	r24, r25
    549e:	9a 1f       	adc	r25, r26
    54a0:	a1 1d       	adc	r26, r1
    54a2:	68 0f       	add	r22, r24
    54a4:	79 1f       	adc	r23, r25
    54a6:	8a 1f       	adc	r24, r26
    54a8:	91 1d       	adc	r25, r1
    54aa:	a1 1d       	adc	r26, r1
    54ac:	6a 0f       	add	r22, r26
    54ae:	71 1d       	adc	r23, r1
    54b0:	81 1d       	adc	r24, r1
    54b2:	91 1d       	adc	r25, r1
    54b4:	a1 1d       	adc	r26, r1
    54b6:	20 d0       	rcall	.+64     	; 0x54f8 <__ultoa_invert+0x84>
    54b8:	09 f4       	brne	.+2      	; 0x54bc <__ultoa_invert+0x48>
    54ba:	68 94       	set
    54bc:	3f 91       	pop	r19
    54be:	2a e0       	ldi	r18, 0x0A	; 10
    54c0:	26 9f       	mul	r18, r22
    54c2:	11 24       	eor	r1, r1
    54c4:	30 19       	sub	r19, r0
    54c6:	30 5d       	subi	r19, 0xD0	; 208
    54c8:	31 93       	st	Z+, r19
    54ca:	de f6       	brtc	.-74     	; 0x5482 <__ultoa_invert+0xe>
    54cc:	cf 01       	movw	r24, r30
    54ce:	08 95       	ret
    54d0:	46 2f       	mov	r20, r22
    54d2:	47 70       	andi	r20, 0x07	; 7
    54d4:	40 5d       	subi	r20, 0xD0	; 208
    54d6:	41 93       	st	Z+, r20
    54d8:	b3 e0       	ldi	r27, 0x03	; 3
    54da:	0f d0       	rcall	.+30     	; 0x54fa <__ultoa_invert+0x86>
    54dc:	c9 f7       	brne	.-14     	; 0x54d0 <__ultoa_invert+0x5c>
    54de:	f6 cf       	rjmp	.-20     	; 0x54cc <__ultoa_invert+0x58>
    54e0:	46 2f       	mov	r20, r22
    54e2:	4f 70       	andi	r20, 0x0F	; 15
    54e4:	40 5d       	subi	r20, 0xD0	; 208
    54e6:	4a 33       	cpi	r20, 0x3A	; 58
    54e8:	18 f0       	brcs	.+6      	; 0x54f0 <__ultoa_invert+0x7c>
    54ea:	49 5d       	subi	r20, 0xD9	; 217
    54ec:	31 fd       	sbrc	r19, 1
    54ee:	40 52       	subi	r20, 0x20	; 32
    54f0:	41 93       	st	Z+, r20
    54f2:	02 d0       	rcall	.+4      	; 0x54f8 <__ultoa_invert+0x84>
    54f4:	a9 f7       	brne	.-22     	; 0x54e0 <__ultoa_invert+0x6c>
    54f6:	ea cf       	rjmp	.-44     	; 0x54cc <__ultoa_invert+0x58>
    54f8:	b4 e0       	ldi	r27, 0x04	; 4
    54fa:	a6 95       	lsr	r26
    54fc:	97 95       	ror	r25
    54fe:	87 95       	ror	r24
    5500:	77 95       	ror	r23
    5502:	67 95       	ror	r22
    5504:	ba 95       	dec	r27
    5506:	c9 f7       	brne	.-14     	; 0x54fa <__ultoa_invert+0x86>
    5508:	00 97       	sbiw	r24, 0x00	; 0
    550a:	61 05       	cpc	r22, r1
    550c:	71 05       	cpc	r23, r1
    550e:	08 95       	ret
    5510:	9b 01       	movw	r18, r22
    5512:	ac 01       	movw	r20, r24
    5514:	0a 2e       	mov	r0, r26
    5516:	06 94       	lsr	r0
    5518:	57 95       	ror	r21
    551a:	47 95       	ror	r20
    551c:	37 95       	ror	r19
    551e:	27 95       	ror	r18
    5520:	ba 95       	dec	r27
    5522:	c9 f7       	brne	.-14     	; 0x5516 <__ultoa_invert+0xa2>
    5524:	62 0f       	add	r22, r18
    5526:	73 1f       	adc	r23, r19
    5528:	84 1f       	adc	r24, r20
    552a:	95 1f       	adc	r25, r21
    552c:	a0 1d       	adc	r26, r0
    552e:	08 95       	ret

00005530 <_exit>:
    5530:	f8 94       	cli

00005532 <__stop_program>:
    5532:	ff cf       	rjmp	.-2      	; 0x5532 <__stop_program>
